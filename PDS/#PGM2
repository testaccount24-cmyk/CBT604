-LIST LEFT
-TITLE SNOBOL4 TEST PROGRAM #2 -- DIAGNOSTICS PHASE TWO
*
*        THIS IS THE STANDARD TEST PROGRAM FOR SPITBOL WHICH
*        TESTS PATTERN MATCHING USING BOTH FULLSCAN AND QUICKSCAN
*
*        SINCE SNOBOL4 DOES NOT HAVE LPAD OR BREAKX
*        TWO IMPLEMENTATION OF THEM ARE ADDED
*
         &CODE = 8
         &DUMP = 2
         DEFINE('ERROR(S)')
         &TRACE = 1000
         &ERRLIMIT = 100
         TRACE(.ERRTYPE,'KEYWORD')
         &FULLSCAN = 0

      DEFINE('LPAD(S,N,C)')                :(LPAD..END)
LPAD  LPAD = GE(SIZE(S),N) S               :S(RETURN)
      C    = IDENT(C) ' '
      LPAD = DUPL(C, N - SIZE(S)) S        :(RETURN)
LPAD..END
        DEFINE('BREAKX(S)')     :(BREAKX..END)
BREAKX  BREAKX = BREAK(S) ARBNO(LEN(1) BREAK(S)) :(RETURN)
BREAKX..END
         OUTPUT = '**********************************************'
         OUTPUT = '**** SPITBOL DIAGNOSTICS -- PHASE TWO     ****'
         OUTPUT = '**********************************************'
FLOOP    ERRCOUNT = 0
         OUTPUT = '****           &FULLSCAN = ' &FULLSCAN
.        '              ****'
         TEST = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
*
*        TEST PATTERN MATCHING AGAINST SIMPLE STRING
*
         TEST  'ABC' :S(S01) ; ERROR('S00')
S01      TEST 'BCD' :S(S02) ; ERROR('S01')
S02      TEST 'XYZ' :S(S03) ; ERROR('S02')
S03      TEST 'ABD' :F(S04) ; ERROR('S03')
S04      &ANCHOR = 1
         TEST 'ABC' :S(S05) ; ERROR('S04')
S05      TEST 'BCD' :F(S06) ; ERROR('S05')
S06      TEST TEST :S(S06A) ; ERROR('S06')
*
*        TEST SIMPLE CASES OF $
*
S06A     TEST 'ABC' $ VAR :S(S07) ; ERROR('S06A')
S07      IDENT(VAR,'ABC') :S(S08) ; ERROR('S07')
S08      TEST 'ABC' . VARD :S(S09) ; ERROR('S08')
S09      IDENT(VARD,'ABC') :S(S10) ; ERROR('S09')
*
*        TEST LEN
*
S10      &ANCHOR = 0
         TEST LEN(3) $ VARL :S(S11) ; ERROR('S10')

S11      IDENT(VARL,'ABC') :S(S12) ; ERROR('S11')
S12      TEST LEN(26) $ VARL :S(S13) ; ERROR('S12')
S13      IDENT(VARL,TEST) :S(S14) ; ERROR('S13')
S14      TEST LEN(27) :F(S15)  ; ERROR('S14')
*
*        TEST TAB
*
S15      TEST TAB(3) $ VART :S(S16) ; ERROR('S15')
S16      IDENT(VART,'ABC') :S(S17) ; ERROR('S16')
S17      TEST TAB(26) $ VART :S(S18) ; ERROR('S17')
S18      IDENT(TEST,VART) :S(S19) ; ERROR('S18')
S19      TEST TAB(0) $ VART :S(S20) ; ERROR('S19')
S20      IDENT(VART) :S(S21) ; ERROR('S20')
-EJECT
*
*        TEST ARB
*
S21      TEST ARB $ VARA 'C' :S(S22) ; ERROR('S21')
S22      IDENT(VARA,'AB') :S(S23) ; ERROR('S22')
S23      &ANCHOR = 1
         :(S25)
         TEST ARB $ VARA POS(60) :F(S24) ; ERROR('S23')
S24      IDENT(VARA,TEST) :S(S25) ; ERROR('S24')
*
*        TEST POS
*
S25      TEST ARB $ VARA POS(2) $ VARP :S(S26) ; ERROR('S25')
S26      (IDENT(VARA,'AB') IDENT(VARP)) :S(S27) ; ERROR('S26')
S27      &ANCHOR = 0
         TEST ARB $ VARA POS(26) $ VARP :S(S28) ; ERROR('S27')
S28      (IDENT(VARA,TEST) IDENT(VARP)) : S(S29) ; ERROR('S28')
S29      TEST ARB $ VARA POS(0) $ VARP :S(S30) ; ERROR('S29')
S30      IDENT(VARA VARP) :S(S31) ; ERROR('S30')
S31      TEST POS(0) ARB $ VARA POS(26) :S(S32) ; ERROR('S31')
S32      IDENT(TEST,VARA) :S(S33) ; ERROR('S32')
S33      TEST POS(2) ARB $ VARA POS(3) :S(S34) ; ERROR('S33')
S34      IDENT(VARA,'C') :S(S35) ; ERROR('S34')
S35      TEST POS(27) :F(S36) ; ERROR('S35')
*
*        TEST RPOS
*
S36      TEST ARB $ VARA RPOS(25) :S(S37) ; ERROR('S36')
S37      IDENT(VARA,'A') :S(S38) ; ERROR('S37')
S38      TEST ARB $ VARA RPOS(0) :S(S39) ; ERROR('S38')
S39      IDENT(TEST,VARA) :S(S39A) ; ERROR('S39')
S39A     TEST ARB $ VARA RPOS(26) :S(S40) ; ERROR('S40A')
S40      IDENT(VARA) :S(S41) ; ERROR('S40')
S41      TEST RPOS(27) :F(S42) ; ERROR('S41')
*
*        TEST RTAB
*
S42      TEST RTAB(26) $ VARA :S(S43) ; ERROR('S42')
S43      IDENT(VARA) :S(S44) ; ERROR('S43')
S44      TEST RTAB(27) :F(S45) ; ERROR('S44')
S45      TEST RTAB(0) $ VARA :S(S46) ; ERROR('S45')
S46      IDENT(VARA,TEST) :S(S47) ; ERROR('S46')
S47      TEST RTAB(25) $ VARA :S(S48) ; ERROR('S47')
S48      IDENT(VARA,'A') :S(S49) ; ERROR('S48')
*
*        TEST @
*
S49      TEST LEN(6) @VARA :S(S50) ; ERROR('S49')
S50      IDENT(VARA,6) :S(S51) ; ERROR('S50')
S51      TEST @VARA :S(S52) ; ERROR('S51')
S52      IDENT(VARA,0) :S(S53) ; ERROR('S52')
S53      TEST LEN(26) @VARA :S(S54) ; ERROR('S53')
S54      IDENT(VARA,26) :S(S55) ; ERROR('S54')
-EJECT
*
*        TEST BREAK
*
S55      TEST BREAK('C') $ VARA :S(S56) ; ERROR('S55')
S56      IDENT(VARA,'AB') :S(S57) ; ERROR('S56')
S57      TEST BREAK('Z()') $ VARA :S(S58)     ; ERROR('S57')
S58      IDENT(VARA,'ABCDEFGHIJKLMNOPQRSTUVWXY') :S(S59) ; ERROR('S58')
S59      TEST BREAK(',') :F(S60) ; ERROR('S59')
S60      LPAD(TEST,1000) BREAK('A') $ VARA :S(S61) ; ERROR('S60')
S61      IDENT(LPAD(' ',1000 - 26),VARA) :S(S62) ; ERROR('S61')
S62      LPAD(TEST,1000) BREAK(',') :F(S63)  ; ERROR('S62')
*
*        TEST SPAN
*
S63      TEST SPAN(TEST) $ VARA :S(S64) ; ERROR('S63')
S64      IDENT(TEST,VARA) :S(S65) ;ERROR('S64')
S65      TEST SPAN('CDQ') $ VARA :S(S66) ; ERROR('S65')
S66      IDENT(VARA,'CD') :S(S67) ; ERROR('S66')
S67      TEST SPAN(',') :F(S68) ; ERROR('S67')
S68      LPAD(TEST,1000) SPAN(' ') $ VARA :S(S69) ; ERROR('S68')
S69      IDENT(VARA,LPAD(' ',1000 - 26)) :S(S70) ; ERROR('S69')
*
*        TEST BREAKX
*
S70    (TEST TEST) POS(0) BREAKX('E') $ VARA '.' :F(S71) ; ERROR('S70')
S71      IDENT(VARA,TEST 'ABCD') :S(S72) ; ERROR('S71')
S72      TEST BREAKX('.') :F(S73) ; ERROR('S72')
*
*        TEST ANY
*
S73      TEST ANY('MXZ') $ VARA :S(S74) ; ERROR('S73')
S74      IDENT(VARA,'M') :S(S75) ; ERROR('S74')
S75      TEST ANY(',.') :F(S76) ; ERROR('S75')
-EJECT
*
*        TEST NOTANY
*
S76 TEST NOTANY('ABCDEFGHJKLMPQRSTUWXYZ') $ VARA :S(S77) ; ERROR('S76')
S77      IDENT(VARA,'I') :S(S78) ; ERROR('S77')
S78      TEST NOTANY(TEST) :F(S79) ; ERROR('S78')
*
*        TEST REM
*
S79      TEST REM $ VARA :S(S80) ; ERROR('S79')
S80      IDENT(VARA,TEST) :S(S81) ; ERROR('S80')
S81      TEST LEN(26) REM $ VARA :S(S82) ; ERROR('S81')
S82      IDENT(VARA) :S(S83) ; ERROR('S82')
*
*        TEST ALTERNATION
*
S83      TEST ('ABD' | 'AB') $ VARA :S(S84) ; ERROR('S83')
S84      IDENT(VARA,'AB') :S(S85) ; ERROR('S84')
S85      TEST (TEST 'A' | TEST) $ VARL :S(S86) ; ERROR('S85')
S86      IDENT(VARL,TEST) :S(D00) ; ERROR('S86')
*
*        TEST DEFERRED STRINGS
*
D00      TEST *'ABC' :S(D01) ; ERROR('D00')
D01      TEST *'ABD' :F(D06) ; ERROR('D01')
*
*        TEST $ . WITH DEFERRED NAME ARGUMENTS
*
D06      TEST 'ABC' $ *VAR :S(D07) ; ERROR('D06')
D07      IDENT(VAR,'ABC') :S(D08) ; ERROR('D07')
D08      TEST 'ABC' . *$'VARD' :S(D09) ; ERROR('D08')
D09      IDENT(VARD,'ABC') :S(D10) ; ERROR('D09')
*
*        TEST LEN WITH DEFERRED ARGUMENT
*
D10      &ANCHOR = 0
         TEST LEN(*3) $ VARL :S(D11) ; ERROR('D10')
D11      IDENT(VARL,'ABC') :S(D15) ; ERROR('D11')
*
*        TEST TAB WITH DEFERRED ARGUMENT
*
D15      TEST TAB(*3) $ VART :S(D16) ; ERROR('D15')
D16      IDENT(VART,'ABC') :S(D21) ; ERROR('D16')
-EJECT
*
*        TEST POS WITH DEFERRED ARGUMENT
*
D21      &ANCHOR = 1
         TEST ARB $ VARA POS(*2) $ VARP :S(D26) ; ERROR('D21')
D26      (IDENT(VARA,'AB') IDENT(VARP)) :S(D27) ; ERROR('D26')
D27      &ANCHOR = 0
         TEST ARB $ VARA POS(*0) $ VARP :S(D35) ; ERROR('D27')
D35      IDENT(VARA VARP) :S(D36) ; ERROR('D35')
*
*        TEST RPOS WITH DEFERRED ARGUMENT
*
D36      TEST ARB $ VARA RPOS(*25) :S(D37) ; ERROR('D36')
D37      IDENT(VARA,'A') :S(D38) ; ERROR('D37')
*
*        TEST RTAB WITH DEFERRED ARGUMENT
*
D38      TEST RTAB(*26) $ VARA :S(D43) ; ERROR('D38')
D43      IDENT(VARA) :S(D49) ; ERROR('D43')
*
*        TEST @ WITH DEFERRED ARGUMENT
*
D49      TEST LEN(6) @*VARA :S(D50) ; ERROR('D49')
D50      IDENT(VARA,6) :S(D51) ; ERROR('D50')
D51      TEST @*$'VARA' :S(D52) ; ERROR('D51')
D52      IDENT(VARA,0) :S(D55) ; ERROR('D52')
*
*        TEST BREAK WITH DEFERRED ARGUMENT
*
D55      TEST BREAK(*'C') $ VARA :S(D56) ; ERROR('D55')
D56      IDENT(VARA,'AB') :S(D57) ; ERROR('D56')
*
*        TEST SPAN WITH DEFERRED ARGUMENT
*
D57      TEST SPAN(*TEST) $ VARA :S(D64) ; ERROR('D57')
D64      IDENT(TEST,VARA) :S(D70) ; ERROR('D58')
*
*        TEST BREAKX WITH DEFERRED ARGUMENT
*
D70 (TEST TEST) POS(*0) BREAKX(*'E') $ VARA '.' :F(D71) ; ERROR('D70')
D71      IDENT(VARA,TEST 'ABCD') :S(D73) ; ERROR('D71')
-EJECT
*
*        TEST ANY WITH DEFERRED ARGUMENT
*
D73      TEST ANY(*'MXZ') $ VARA :S(D74) ; ERROR('D73')
D74      IDENT(VARA,'M') :S(D75) ; ERROR('D74')
*
*        TEST NOTANY WITH DEFERRED ARGUMENT
*
D75      TEST NOTANY(*'ABCDEFGHJKLMPQRSTUWXYZ') $ VARA :S(D77) ;
.                                                          ERROR('D77')
D77      IDENT(VARA,'I') :S(D79) ; ERROR('D77')
D79      :(ALLDONE)
         EJECT
*
*        ERROR HANDLING ROUTINE
*
ERROR    OUTPUT = '****** ERROR DETECTED AT ' S ' ' &LASTNO ' ********'
         ERRCOUNT = ERRCOUNT + 1
         OUTPUT = '***** RESUMING EXECUTION *******'       :(RETURN)
*
*        TERMINATION ROUTINE
*
ALLDONE
         ERRCOUNT = ERRCOUNT + &ERRLIMIT - 100
         &ERRLIMIT = 100
         OUTPUT = EQ(ERRCOUNT,0)
.                 '****           NO ERRORS DETECTED         ****'
         OUTPUT = '**********************************************'
         &FULLSCAN = EQ(&FULLSCAN,0) 1           :S(FLOOP)
         OUTPUT = '****           END OF DIAGNOSTICS         ****'
         OUTPUT = '**********************************************'
         &CODE = 4
         NE(ERRCOUNT,0)               :S(END)
         &CODE = 0
END
