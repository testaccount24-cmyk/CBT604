         MACRO
&NAME    ABEND &CC,&DUMP,&STEP                                    19872
.*000400,000800,001600-001700,001800-002600,003400-005400         19872
.*005800-006000,006200,006800-007200,007600-008400,008800         19872
         LCLA  &CTR
         LCLB  &B(2)                                              19872
&NAME    DS    0H
         AIF   ('&CC' EQ '').E1
&B(1)    SETB  ('&DUMP' EQ 'DUMP')
&B(2)    SETB  ('&STEP' EQ 'STEP')
         AIF   ('&DUMP' NE '' AND NOT &B(1)).E2                   19872
.TEST    AIF   ('&STEP' NE '' AND NOT &B(2)).E3                   19872
.SETFLGS ANOP
&CTR     SETA  128*&B(1)+64*&B(2)                                 19872
         AIF   ('&CC'(1,1) EQ '(').CONTA
         AIF   (T'&CC NE 'N' OR '&DUMP&STEP' NE '').AA
         AIF   (&CC GT 4095).AA
.CONTA   ANOP
         IHBINNRA &CC         LOAD REG1 WITH COMPCODE             19872
         AIF   (&CTR EQ 0).SVC                                    19872
         LA    0,&CTR         PICK UP DUMP/STEP CODE
         SLL   0,24(0)                           SHIFT TO HIGH BYTE
         OR    1,0                               OR IN WITH COMPCODE
         AGO   .SVC
.AA      CNOP  0,4
         B     *+8            BRANCH AROUND CONSTANT
         DC    AL1(&CTR)                         DUMP/STEP CODE
         DC    AL3(&CC)                          COMPLETION CODE
         L     1,*-4                             LOAD CODES INTO REG 1
.SVC     SVC   13                                LINK TO ABEND ROUTINE
         MEXIT
.E2      IHBERMAC  37,,&DUMP
         AGO   .TEST
.E3      IHBERMAC  38,,&STEP
         AGO   .SETFLGS
.E1      IHBERMAC 28,303
         MEND
         MACRO
&NAME    OPEN  &PAR1,&MF=I,&TYPE=                                A45585
         GBLB  &IHBRDJ                  ON IF RDJFCB MACRO USED
         LCLA  &ACTR,&ASUM,&CTR,&CTR1,&LGTH,&NUMBER
         LCLB  &MFESW,&MFISW,&MFI2SW,&B(10),&NULLSW,&OPT2SW
         LCLC  &PARA
&NUMBER  SETA  N'&PAR1
&CTR     SETA  1
&CTR1    SETA  2
         AIF   (N'&SYSLIST LE 1).TYPE   IF ONLY 1 (PARMLIST)     A45585
         IHBERMAC 238                   EXCESSIVE POS. PARMS     A45585
.TYPE    AIF   (T'&TYPE NE 'O' AND '&TYPE' NE 'J').ERROR8        A45585
         AIF   ('&MF' EQ 'L').RTEL
         AIF   ('&MF' EQ 'I').TESTI
         AIF   (N'&MF LE 1).ERROR3
         AIF   ('&MF(1)' NE 'E').ERROR3
&NAME    IHBINNRA &MF(2)                    LOAD REG 1 WITH LIST ADDR
         AGO   .ISSSVC
.*---------------------------------------------------------------------
.RTEL    ANOP
&NAME    DC    0F'0'                             ALIGN LIST TO FULLWORD
         AIF   ('&PAR1' EQ '').ERROR5
.CLRSW   ANOP
&ASUM    SETA  0
         AIF   (&CTR1 GT &NUMBER).J
         AIF   ('&PAR1(&CTR1)' EQ '').DC1
         AIF   ('&PAR1(&CTR1)'(1,1) NE '(').NOPAREN
&B(1)    SETB  ('&PAR1(&CTR1)'(2,5) EQ 'INPUT')
&B(2)    SETB  ('&PAR1(&CTR1)'(2,6) EQ 'RDBACK')
&B(3)    SETB  ('&PAR1(&CTR1)'(2,5) EQ 'INOUT')
&B(4)    SETB  ('&PAR1(&CTR1)'(2,5) EQ 'UPDAT')
&B(5)    SETB  ('&PAR1(&CTR1)'(2,5) EQ 'OUTIN')
&B(6)    SETB  ('&PAR1(&CTR1)'(2,6) EQ 'OUTPUT')
         AIF   (K'&PAR1(&CTR1) LE 8).STOPNOW
&B(7)    SETB  ('&PAR1(&CTR1)'(8,4) EQ 'LEAV'  OR '&PAR1(&CTR1)'(9,4) EX
               Q 'LEAV')
&B(8)    SETB  ('&PAR1(&CTR1)'(8,4) EQ 'RERE' OR '&PAR1(&CTR1)'(9,4) EQX
                'RERE')
&B(9)    SETB  ('&PAR1(&CTR1)'(8,4) EQ 'DISP' OR '&PAR1(&CTR1)'(9,4) EQX
                'DISP')
&B(10)   SETB  ('&PAR1(&CTR1)'(8,4) EQ 'IDLE' OR '&PAR1(&CTR1)'(9,4) EQX
                'IDLE')
&OPT2SW  SETB  1
         AIF   (&B(7)+&B(8)+&B(9)+&B(10) NE 1).ERROR1
.STOPNOW AIF   (&B(1)+&B(2)+&B(3)+&B(4)+&B(5)+&B(6) NE 1).ERROR1
&ASUM    SETA  &B(2)+3*&B(3)+4*&B(4)+7*&B(5)+15*&B(6)+48*&B(7)+16*&B(8)X
               +32*&B(10)
         AGO   .RESET
.NOPAREN ANOP
&B(1)    SETB  ('&PAR1(&CTR1)' EQ 'INPUT')
&B(2)    SETB  ('&PAR1(&CTR1)' EQ 'RDBACK')
&B(3)    SETB  ('&PAR1(&CTR1)' EQ 'INOUT')
&B(4)    SETB  ('&PAR1(&CTR1)' EQ 'UPDAT')
&B(5)    SETB  ('&PAR1(&CTR1)' EQ 'OUTIN')
&B(6)    SETB  ('&PAR1(&CTR1)' EQ 'OUTPUT')
         AGO   .STOPNOW
.RESET   ANOP
&B(7)    SETB  0
&B(8)    SETB  0
&B(10)   SETB  0
.DC1     AIF   (&MFESW).ERTRTRN
         AIF   (&CTR1 LT &NUMBER).K
.J       ANOP
&ASUM    SETA  &ASUM+128
.K       AIF   (&MFI2SW).I2ROUT
         AIF   (&MFISW).IROUTRN
         DC    AL1(&ASUM)                        OPTION BYTE
         AIF   ('&PAR1(&CTR)' NE '').NOBLANK
         DC    AL3(0)                            DCB ADDRESS
         AGO   .NOTLST
.NOBLANK AIF   ('&PAR1(&CTR)'(1,1) EQ '(').ERROR6
         DC    AL3(&PAR1(&CTR))                  DCB ADDRESS
.NOTLST  AIF   (&CTR1 GE &NUMBER).FINI
&CTR     SETA  &CTR+2
&CTR1    SETA  &CTR1+2
         AGO   .CLRSW
.*---------------------------------------------------------------------
.TESTI   CNOP  0,4                               ALIGN LIST TO FULLWORD
&LGTH    SETA  ((&NUMBER+1)/2)*4+4
&NAME    BAL   1,*+&LGTH                         LOAD REG1 W/LIST ADDR.
&MFISW   SETB  1
.RTEYE   AIF   ('&PAR1(&CTR)' EQ '').ERROR5
         AIF   ('&PAR1(&CTR)'(1,1) NE '(').CLRSW
         DC    A(0)                              OPT BYTE AND DCB ADDR.
         AGO   .UPCTRS
.IROUTRN DC    AL1(&ASUM)                        OPTION BYTE
         DC    AL3(&PAR1(&CTR))                  DCB ADDRESS
.UPCTRS  AIF   (&CTR1 GE &NUMBER).QUITS
&CTR     SETA  &CTR+2
&CTR1    SETA  &CTR1+2
         AGO   .RTEYE
.QUITS   ANOP
&CTR     SETA  1
&CTR1    SETA  2
.ILOOP2  AIF   ('&PAR1(&CTR)'(1,1) NE '(').UPCTR2
&LGTH    SETA  K'&PAR1(&CTR)-2
&PARA    SETC  '&PAR1(&CTR)'(2,&LGTH)
         ST    &PARA,&ACTR.(1,0)                 STORE INTO LIST
&MFI2SW  SETB  1
         AGO   .CLRSW
.I2ROUT  AIF   (&ASUM EQ 0).UPCTR2
         MVI   &ACTR.(1),&ASUM                   MOVE IN OPTION BYTE
.UPCTR2  AIF   (&CTR1 GE &NUMBER).SVCSVC
&CTR     SETA  &CTR+2
&CTR1    SETA  &CTR1+2
&ACTR    SETA  &ACTR+4
         AGO   .ILOOP2
.*---------------------------------------------------------------------
.ISSSVC  AIF   ('&PAR1' EQ '').SVCSVC
.LOOPA   AIF   ('&PAR1(&NUMBER)' NE '').LOOPB
&NUMBER  SETA  &NUMBER-1
         AIF   (&NUMBER EQ 0).SVCSVC
         AGO   .LOOPA
.LOOPB   AIF   ('&PAR1(&CTR)' NE '').TESTCTR
&NULLSW  SETB  1
.TESTCTR AIF   (&CTR EQ &NUMBER).QUITNOW
         AIF   ('&PAR1(&CTR1)' EQ '').NULLTWO
&MFESW   SETB  1
         AGO   .CLRSW
.ERTRTRN AIF   (&CTR1 EQ &NUMBER).THRUNOW
         AIF   (&NULLSW).NOFIRST
         AIF   ('&PAR1(&CTR)'(1,1) EQ '(').REGISTR
         AIF   (NOT &OPT2SW).OPTA
         LA    14,&PAR1(&CTR)                    PICK UP DCB ADDRESS
         ST    14,&ACTR.(1,0)                    STORE INTO LIST
.SHORTB  MVI   &ACTR.(1),&ASUM                   MOVE IN OPTION BYTE
         AGO   .INCRMT
.OPTA    IC    14,&ACTR.(1,0)                    SAVE OPTION BYTE
         LA    0,&PAR1(&CTR)                     PICK UP DCB ADDRESS
         ST    0,&ACTR.(1,0)                     STORE INTO LIST
.SHORTA  STC   14,&ACTR.(1,0)                    RESTORE OPTION BYTE
.OPTC    NI    &ACTR.(1),X'F0'                   CLEAR OPT 1 BITS
         AIF   (&ASUM EQ 0).INCRMT
         OI    &ACTR.(1),&ASUM                   INSERT OPT 1 BITS
         AGO   .INCRMT
.REGISTR ANOP
&LGTH    SETA  K'&PAR1(&CTR)-2
&PARA    SETC  '&PAR1(&CTR)'(2,&LGTH)
         AIF   (NOT &OPT2SW).OPTB
         ST    &PARA,&ACTR.(1,0)                 STORE INTO LIST
         AGO   .SHORTB
.OPTB    IC    14,&ACTR.(1,0)                    SAVE OPTION BYTE
         ST    &PARA,&ACTR.(1,0)                 STORE INTO LIST
         AGO   .SHORTA
.NOFIRST AIF   (NOT &OPT2SW).OPTC
         AGO   .SHORTB
.NULLTWO AIF   (&NULLSW).INCRMT
         AIF   ('&PAR1(&CTR)'(1,1) EQ '(').REGSTER
         IC    14,&ACTR.(1,0)                    SAVE OPTION BYTE
         LA    0,&PAR1(&CTR)                     PICK UP DCB ADDRESS
         ST    0,&ACTR.(1,0)                     STORE INTO LIST
.SHORTC  STC   14,&ACTR.(1,0)                    RESTORE OPTION BYTE
         AGO   .INCRMT
.REGSTER IC    14,&ACTR.(1,0)                    SAVE OPTION BYTE
&LGTH    SETA  K'&PAR1(&CTR)-2
&PARA    SETC  '&PAR1(&CTR)'(2,&LGTH)
         ST    &PARA,&ACTR.(1,0)                 STORE INTO LIST
         AGO   .SHORTC
.QUITNOW IC    14,&ACTR.(1,0)                    SAVE OPTION BYTE
         AIF   ('&PAR1(&CTR)'(1,1) EQ '(').REGST
         LA    0,&PAR1(&CTR)                     PICK UP DCB ADDRESS
         ST    0,&ACTR.(1,0)                     STORE INTO LIST
.SHORTD  STC   14,&ACTR.(1,0)                    RESTORE OPTION BYTE
         AGO   .SVCSVC
.REGST   ANOP
&LGTH    SETA  K'&PAR1(&CTR)-2
&PARA    SETC  '&PAR1(&CTR)'(2,&LGTH)
         ST    &PARA,&ACTR.(1,0)                 STORE INTO LIST
         AGO   .SHORTD
.THRUNOW AIF   (NOT &OPT2SW).OPTD
         NI    &ACTR.(1),X'80'                   CLEAR OPTION BITS
.SHORTE  AIF   (&ASUM EQ 0).CONTA
         OI    &ACTR.(1),&ASUM                   INSERT OPTION BITS
.CONTA   AIF   (&NULLSW).SVCSVC
         AGO   .QUITNOW
.OPTD    NI    &ACTR.(1),X'F0'                   CLEAR OPTION 1 BITS
         AGO   .SHORTE
.INCRMT  ANOP
&CTR     SETA  &CTR+2
&CTR1    SETA  &CTR1+2
&ACTR    SETA  &ACTR+4
&OPT2SW  SETB  0
&NULLSW  SETB  0
         AGO   .LOOPB
.*---------------------------------------------------------------------
.SVCSVC  AIF   (&IHBRDJ).FINI                                   SA51997
         AIF   ('&TYPE' EQ 'J').SVC22   IF TYPE=J
         SVC   19                                ISSUE OPEN SVC
         MEXIT
.SVC22   SVC   22                                ISSUE OPENJ SVC
         MEXIT
.ERROR1  IHBERMAC 49,,&PAR1(&CTR1)      INVALID OPTION OPERAND
         MEXIT
.ERROR3  IHBERMAC 35,,&MF               INVALID MF OPERAND SPECIFIED
         MEXIT
.ERROR5  IHBERMAC 6                     DCB MISSING
         MEXIT
.ERROR6  IHBERMAC 69                    INVALID REG NOTATION W/MF=L
         MEXIT
.ERROR8  IHBERMAC 63,,&TYPE             INVALID TYPE OPERAND     M0626
.FINI    MEND
         MACRO
&CNAME   CLOSE &PAR1,&MF=I,&TYPE=                                A45585
         LCLA  &ACTR,&ASUM,&CTR,&CTR1,&LGTH,&NUMBER
         LCLB  &MFESW,&MFISW,&MFI2SW,&NULLSW,&B(4)
         LCLC  &PARA
&NUMBER  SETA  N'&PAR1
&CTR     SETA  1
&CTR1    SETA  2
         AIF   (N'&SYSLIST LE 1).TYPE   IF ONLY 1 (PARMLIST)     A45585
         IHBERMAC 238                   EXCESSIVE POS. PARMS     A45585
.TYPE    AIF   (T'&TYPE NE 'O' AND '&TYPE' NE 'T').ERROR8        A45585
         AIF   ('&MF' EQ 'L').RTEL
         AIF   ('&MF' EQ 'I').TESTI
         AIF   (N'&MF LE 1).ERROR3
         AIF   ('&MF(1)' NE 'E').ERROR3
&CNAME   IHBINNRA &MF(2)
         AIF   ('&PAR1' EQ '').SVCSVC
.LOOPA   AIF   ('&PAR1(&NUMBER)' NE '').LOOPB
&NUMBER  SETA  &NUMBER-1
         AIF   (&NUMBER EQ 0).SVCSVC
         AGO   .LOOPA
.LOOPB   AIF   ('&PAR1(&CTR)' NE '').TESTCTR
&NULLSW  SETB  1
.TESTCTR AIF   (&CTR EQ &NUMBER).QUITNOW
         AIF   ('&PAR1(&CTR1)' EQ '').NULLTWO
&MFESW   SETB  1
         AGO   .CLRSW
.ERTRTRN AIF   (&CTR1 EQ &NUMBER).THRUNOW
         AIF   (&NULLSW).NOFIRST
         AIF   ('&PAR1(&CTR)'(1,1) EQ '(').REGISTR
         LA    14,&PAR1(&CTR)                    PICK UP DCB ADDRESS
         ST    14,&ACTR.(1,0)                    STORE INTO LIST
.NOFIRST MVI   &ACTR.(1),&ASUM                   MOVE IN OPTION BYTE
         AGO   .INCRMT
.REGISTR ANOP
&LGTH    SETA  K'&PAR1(&CTR)-2
&PARA    SETC  '&PAR1(&CTR)'(2,&LGTH)
         ST    &PARA,&ACTR.(1,0)                 STORE DCB ADDR IN LIST
         MVI   &ACTR.(1),&ASUM                   MOVE IN OPTION BYTE
         AGO   .INCRMT
.NULLTWO AIF   (&NULLSW).INCRMT
         AIF   ('&PAR1(&CTR)'(1,1) EQ '(').REGSTER
         IC    14,&ACTR.(1,0)                    SAVE OPTION BYTE
         LA    0,&PAR1(&CTR)                     PICK UP DCB ADDRESS
         ST    0,&ACTR.(1,0)                     STORE INTO LIST
         STC   14,&ACTR.(1,0)                    RESTORE OPTION BYTE
         AGO   .INCRMT
.REGSTER IC    14,&ACTR.(1,0)                    SAVE OPTION BYTE
&LGTH    SETA  K'&PAR1(&CTR)-2
&PARA    SETC  '&PAR1(&CTR)'(2,&LGTH)
         ST    &PARA,&ACTR.(1,0)                 STORE DCB ADDR IN LIST
         STC   14,&ACTR.(1,0)                    RESTORE OPTION BYTE
         AGO   .INCRMT
.QUITNOW IC    14,&ACTR.(1,0)                    SAVE OPTION BYTE
         AIF   ('&PAR1(&CTR)'(1,1) EQ '(').REGST
         LA    0,&PAR1(&CTR)                     PICK UP DCB ADDRESS
         ST    0,&ACTR.(1,0)                     STORE INTO LIST
         STC   14,&ACTR.(1,0)                    RESTORE OPTION BYTE
         AGO   .SVCSVC
.REGST   ANOP
&LGTH    SETA  K'&PAR1(&CTR)-2
&PARA    SETC  '&PAR1(&CTR)'(2,&LGTH)
         ST    &PARA,&ACTR.(1,0)                 STORE DCB ADDR IN LIST
         STC   14,&ACTR.(1,0)                    RESTORE OPTION BYTE
         AGO   .SVCSVC
.THRUNOW NI    &ACTR.(1),X'80'                   CLEAR OPTION BITS
         AIF   (&ASUM EQ 0).CONTA
         OI    &ACTR.(1),&ASUM                   SET OPTION BITS
.CONTA   AIF   (&NULLSW).SVCSVC
         AGO   .QUITNOW
.INCRMT  ANOP
&CTR     SETA  &CTR+2
&CTR1    SETA  &CTR1+2
&ACTR    SETA  &ACTR+4
&NULLSW  SETB  0
         AGO   .LOOPB
.*---------------------------------------------------------------------
.SVCSVC  AIF   ('&TYPE' NE 'T').ISSST                           SA51997
         SVC   23                                ISSUE TCLOSE SVC
         MEXIT
.ISSST   SVC   20                                ISSUE CLOSE SVC
         MEXIT
.*---------------------------------------------------------------------
.RTEL    ANOP
&CNAME   DC    0F'0'                             ALIGN LIST TO FULLWORD
         AIF   ('&PAR1' EQ '').ERROR5
.CLRSW   ANOP
&ASUM    SETA  0
         AIF   (&CTR1 GT &NUMBER).J
         AIF   ('&PAR1(&CTR1)' EQ '').DC1
&B(1)    SETB  ('&PAR1(&CTR1)' EQ 'REREAD')
&B(2)    SETB  ('&PAR1(&CTR1)' EQ 'LEAVE')
&B(3)    SETB  ('&PAR1(&CTR1)' EQ 'DISP')
&B(4)    SETB  ('&PAR1(&CTR1)' EQ 'REWIND')
         AIF   (&B(1)+&B(2)+&B(3)+&B(4) NE 1).ERROR2
         AIF   (&B(3) AND '&TYPE' EQ 'T' OR &B(4) AND '&TYPE' EQ 'T').EX
               RROR2                                             A33667
&ASUM    SETA  16*&B(1)+48*&B(2)+64*&B(4)
.DC1     AIF   (&MFESW).ERTRTRN
         AIF   (&CTR1 LT &NUMBER).K
.J       ANOP
&ASUM    SETA  &ASUM+128
.K       AIF   (&MFI2SW).I2ROUT
         AIF   (&MFISW).IROUTRN
         DC    AL1(&ASUM)                        OPTION BYTE
         AIF   ('&PAR1(&CTR)' NE '').NOBLANK
         DC    AL3(0)                            DCB ADDRESS
         AGO   .NOTLST
.NOBLANK AIF   ('&PAR1(&CTR)'(1,1) EQ '(').ERROR6
         DC    AL3(&PAR1(&CTR))                  DCB ADDRESS
.NOTLST  AIF   (&CTR1 GE &NUMBER).FINI
&CTR     SETA  &CTR+2
&CTR1    SETA  &CTR1+2
         AGO   .CLRSW
.*---------------------------------------------------------------------
.TESTI   CNOP  0,4                               ALIGN LIST TO FULLWORD
&LGTH    SETA  ((&NUMBER+1)/2)*4+4
&CNAME   BAL   1,*+&LGTH                         LOAD REG1 W/LIST ADDR
&MFISW   SETB  1
.RTEYE   AIF   ('&PAR1(&CTR)' EQ '').ERROR5
         AIF   ('&PAR1(&CTR)'(1,1) NE '(').CLRSW
         DC    A(0)                              OPTION AND DCB ADDRESS
         AGO   .UPCTRS
.IROUTRN DC    AL1(&ASUM)                        OPTION BYTE
         DC    AL3(&PAR1(&CTR))                  DCB ADDRESS
.UPCTRS  AIF   (&CTR1 GE &NUMBER).QUITS
&CTR     SETA  &CTR+2
&CTR1    SETA  &CTR1+2
         AGO   .RTEYE
.QUITS   ANOP
&CTR     SETA  1
&CTR1    SETA  2
.ILOOP2  AIF   ('&PAR1(&CTR)'(1,1) NE '(').UPCTR2
&LGTH    SETA  K'&PAR1(&CTR)-2
&PARA    SETC  '&PAR1(&CTR)'(2,&LGTH)
         ST    &PARA,&ACTR.(1,0)                 STORE DCB ADDRESS
&MFI2SW  SETB  1
         AGO   .CLRSW
.I2ROUT  AIF   (&ASUM EQ 0).UPCTR2
         MVI   &ACTR.(1),&ASUM                   MOVE IN OPTION BYTE
.UPCTR2  AIF   (&CTR1 GE &NUMBER).SVCSVC
&CTR     SETA  &CTR+2
&CTR1    SETA  &CTR1+2
&ACTR    SETA  &ACTR+4
         AGO   .ILOOP2
.ERROR2  IHBERMAC 49,,&PAR1(&CTR1)      INVALID OPTION OPEARND
         MEXIT
.ERROR3  IHBERMAC 35,,&MF               INVALID MF OPERAND SPECIFIED
         MEXIT
.ERROR5  IHBERMAC 6                     DCB MISSING
         MEXIT
.ERROR6  IHBERMAC 69                    INVALID REG NOTATION W/MF=L
         MEXIT
.ERROR8  IHBERMAC 63,,&TYPE             INVALID TYPE OPERAND     M0626
.FINI    MEND
         MACRO
&NAME    TIME  &UNIT,&ADDR                                        20071
         LCLA  &CTR
         LCLB  &B(3)                                              20071
         AIF   (('&UNIT' EQ 'DEC' OR '&UNIT' EQ '' OR '&UNIT' EQ 'TU' O*
               R '&UNIT' EQ 'BIN') AND '&ADDR' NE '').ERR1        20071
&B(1)    SETB  ('&UNIT' EQ 'DEC' OR '&UNIT' EQ '')
&B(2)    SETB  ('&UNIT' EQ 'BIN')
&B(3)    SETB  ('&UNIT' EQ 'MIC')                                 20071
         AIF   ('&UNIT' EQ 'TU').TU
         AIF   (&B(1)+&B(2)+&B(3) NE 1).E1                        20071
&CTR     SETA  &B(2)+2*&B(1)+3*&B(3)                              20071
&NAME    LA    1,&CTR.(0,0)                      LOAD 1 TO SPECIFY UNIT
         AIF   ('&UNIT' NE 'MIC').SVC                             20071
         AIF   ('&ADDR' EQ '').ERR2                               20071
         AIF   ('&ADDR'(1,1) EQ '(').REG                          20071
         LA    0,&ADDR                                            20071
         AGO   .SVC                                               20071
.REG     ANOP                                                     20071
         AIF   ('&ADDR' EQ '(0)').SVC                             20071
         LR    0,&ADDR                                            20071
         AGO   .SVC
.TU      ANOP
&NAME    SR    1,1                               ZERO 1 TO SPECIFY UNIT
.SVC     SVC   11                                ISSUE TIME SVC
         MEXIT
.E1      IHBERMAC 36,378,&UNIT              INVALID UNIT SPECIFIED
         MEXIT                                                    20071
.ERR1    IHBERMAC  236                                            20071
         MEXIT                                                    20071
.ERR2    IHBERMAC 3                                               20071
         MEND
         MACRO
&NAME    LOAD  &EP=,&EPLOC=,&DE=,&DCB=,&HIARCHY=
.*0014000200,004400                                                LCS0
         AIF   ('&HIARCHY' EQ '' OR '&HIARCHY' EQ '0' OR '&HIARCHY' EQ C
               '1').CONTA
         IHBERMAC  195
         MEXIT
.CONTA   AIF   ('&HIARCHY' EQ '').CONT
         CNOP  0,4
.CONT    AIF   ('&EP' NE '').PROCEP     BRANCH IF EP PRESENT
         AIF   ('&EPLOC' EQ '' AND '&DE' EQ '').E1
         AIF   ('&EPLOC' NE '' AND '&DE' NE '').E2
         AIF   ('&DE&EPLOC'(1,1) NE '(').RXTYPE
         AIF   ('&DE(1)&EPLOC(1)' NE '0').NOTZER
&NAME    DS    0H
         AGO   .EPHERE
.NOTZER  ANOP
&NAME    LA    0,0(&EPLOC(1)&DE(1)) LOAD PARAMETER INTO REGISTER ZERO
         AGO   .EPHERE
.RXTYPE  ANOP
&NAME    LA    0,&EPLOC&DE         LOAD PARAMETER INTO REGISTER ZERO
.EPHERE  AIF   ('&DCB' NE '').DCB
.EPOK    AIF   ('&HIARCHY' NE '').FIN
.SRONE   ANOP
         SR    1,1                 SHOW NO DCB PRESENT
.SVC     AIF   ('&DE' EQ '').HIAR
         LNR   0,0   LOAD NEGITIVE OF REG. ZERO TO INDICATE DE
.HIAR    ANOP
         SVC   8                   ISSUE LOAD SVC
         MEXIT
.FIN     ANOP
         L     1,*+8    NO DCB SPECIFIED,HIARCHY SPECIFIED
         AGO   .TESTO
.DCB     AIF   ('&DCB'(1,1) NE '(').RXSPEC
         LA    1,0(&DCB(1))        LOAD ADDR. OF DCB INTO REG. ONE
         AGO   .TESTHY
.RXSPEC  ANOP
         LA    1,&DCB              LOAD ADDR. OF DCB INTO REG. ONE
.TESTHY  AIF   ('&HIARCHY' EQ '').SVC
         O     1,*+8               INSERT HIARCHY PARAMETER
.TESTO   ANOP
         B     *+8   BRANCH AROUND CONSTANT(S)
         AIF   ('&HIARCHY' EQ '1').HONE
         DC    X'01000000'         HIARCHY ZERO SPECIFIED
         AGO   .SVC
.HONE    ANOP
         DC    X'02000000'         HIARCHY ONE SPECIFIED
         AGO   .SVC
.PROCEP  AIF   ('&EPLOC' NE '' OR '&DE' NE '').E2
         AIF   ('&EP'(1,1) EQ '(').E4
         AIF   ('&HIARCHY' NE '').IARCHY
&NAME    LA    0,*+8               LOAD PARAMETER INTO REGISTER ZERO
         B     *+12  BRANCH AROUND CONSTANT(S)
         DC    CL8'&EP'            ENTRY POINT NAME
         AIF   ('&DCB' NE '').NEXTON
         AGO  .SRONE
.NEXT    ANOP
         LA    1,0(&DCB(1))        LOAD ADDR. OF DCB INTO REG. ONE
         AGO   .SVC
.NEXTON  AIF   ('&DCB'(1,1) EQ '(').NEXT
         LA    1,&DCB              LOAD ADDR. OF DCB INTO REG. ONE
         AGO   .SVC
.IARCHY  AIF   ('&DCB' NE '').PREDCB
&NAME    LA    0,*+16              LOAD PARAMETER INTO REGISTER ZERO
         L     1,*+8               NO DCB SPECIFIED,HIARCHY SPECIFIED
         B     *+16  BRANCH AROUND CONSTANT(S)
         AIF   ('&HIARCHY' EQ '1').HIAR1
         DC    X'01000000'         HIARCHY ZERO SPECIFIED
         AGO   .EP
.HIAR1   ANOP
         DC    X'02000000'         HIARCHY ONE SPECIFIED
.EP      ANOP
         DC    CL8'&EP'            ENTRY POINT NAME
         AGO   .SVC
.PREDCB  ANOP
&NAME    LA    0,*+20              LOAD PARAMETER INTO REGISTER ZERO
         AIF   ('&DCB'(1,1) EQ '(').OKAY
         LA    1,&DCB              LOAD ADDR. OF DCB INTO REG. ONE
         AGO  .PAST
.OKAY    ANOP
         LA    1,0(&DCB(1))   LOAD ADDR. OF DCB INTO REG. ONE
.PAST    ANOP
         O     1,*+8               GENERATE HIARCHY PARAMETER
         B     *+16  BRANCH AROUND CONSTANT(S)
         AIF   ('&HIARCHY' EQ '1').PASS
         DC    X'01000000'         HIARCHY ZERO SPECIFIED
         AGO   .PASSES
.PASS    ANOP
         DC    X'02000000'         HIARCHY ONE SPECIFIED
.PASSES  ANOP
         DC    CL8'&EP'            ENTRY POINT NAME
         AGO   .SVC
.E1      IHBERMAC 31,345
         MEXIT
.E2      IHBERMAC 88,345
         MEXIT
.E4      IHBERMAC  26
         MEND
         MACRO
&NAME    DELETE &EP=,&EPLOC=,&DE=
         AIF   ('&EP' NE '').EPPRES
         AIF   ('&EPLOC' EQ '' AND '&DE' EQ '').E1 BOTH MISSING
         AIF   ('&EPLOC' NE '' AND '&DE' NE '').E2 BOTH PRESENT
&NAME    IHBINNRA ,&EPLOC&DE                LOAD REG 0
         AGO   .SVC
.EPPRES  AIF   ('&EPLOC' NE '' OR '&DE' NE '').E2
&NAME    BAL   0,*+12                            LOAD ADDR OF EP SYMBOL
         DC    CL8'&EP'                          EP SYMBOL
.SVC     SVC   9                                 ISSUE DELETE SVC
         MEXIT
.E1      IHBERMAC 01,318                    PARAM MISSING
         MEXIT
.E2      IHBERMAC 88,318                    TWO MANY PARAMS
         MEND
         MACRO
&NAME    DCB   &DDNAME=0,&MACRF=,                      FOUNDATION BLOCK*
               &BFTEK=,&BFALN=,&EODAD=1,&RECFM=,&EXLST=0,     EXTENSION*
               &BUFNO=0,&BUFCB=1,&BUFL=0,&DSORG=,&IOBAD=1,       COMMON*
               &IMSK=,&UMSK=,&EOEA=0,&PCIA=0,                 EXCP APP1*
               &SIOA=0,&CENDA=0,&XENDA=0,&AERR=0,&PGFX=NO,    EXCP APP2*
               &HIARCHY=,                                              *
               &OPTCD=,&SYNAD=1,&BLKSIZE=0,&NCP=0,&LRECL=0,&EROPT=,    *
               &BUFRQ=0,&CLPS=1,&INTVL=0,&CPRI=,             QTAM LINE1*
               &THRESH=,&CPOLL=,&LCBAD=1,                     QTAMLINE2*
               &TRMAD=1,&SOWA=0,                             QTAM QUEUE*
               &MON=,&MONDLY=,&WRU=,&IAM=,&EOM=,&EOT=,   BTAM/QTAM WTTA*
               &LIMCT=0,                                           BDAM*
               &NTM=0,&CYLOFL=0,&RKP=0,&MSWA=1,                  ISAM 1*
               &SMSI=0,&SMSW=0,&MSHI=1,&DBUFNO=0,                ISAM 2*
               &IMGADR=0,&SSRTN=0,&DCBHDR=0,&IMGRTE=0,          XL03123,
               &DEVD=,&KEYLEN=,&TRTCH=,&DEN=,&ERRCNT=0,&FRID=,  XL03127,
               &PRTSP=,&CODE=,&MODE=,&STACK=,                          *
               &GNCP=1,&POLST=0,&GTYPE=EXPRESS,&ERROPT=,&LERB=,   13549*
               &BUFCT=255,&REPOS=N,&TRANS=,&SCT=,&INVLIST=,&BUFOUT=,   *
               &MH=,&PCI=,&BUFMAX=,&BUFIN=,&BUFSIZE=,&RESERVE=,        *
               &BACKUP=NO,&BKUPDCB=0,&BRINGUP=NO,&DMPAUTO=NO,    ICB447*
               &DUMPDCB=0,&IPLAUTO=NO,&IPLTXID=,&CKPTDCB=0,      ICB447*
               &BUFOFF=,&FUNC=,&READYQ=,&STOP=                  XA02235
.*
.*                      SET SYMBOL DECLARATIONS
.*
         GBLA  &A0
         GBLB  &DSORG0,&DSORG1,&DSORG2,&DSORG3,&DSORG4,&DSORG5,&DSORG6
         GBLB  &MACRFD,&MACRFE,&MACRFF,&MAC5,&MAC6,&MAC7,&FXSW,&RECFM0
         GBLB  &DSORG7,&MACRF0,&MACRF1,&MACRF2,&MACRF3,&MACRF4,&MACRF5
         GBLB  &MACRF6,&MACRF7,&MACRF8,&MACRF9,&MACRFA,&MACRFB,&MACRFC
         GBLB  &RECFM1,&RECFM2,&RECFM3,&RECFM4,&RECFM5,&RECFM6,&RECFM7
         GBLB  &OPTCD0,&OPTCD1,&OPTCD2,&OPTCD3,&OPTCD4,&OPTCD6,&OPTCD7
         GBLB  &DSORG9,&DSORGA
         GBLB  &COMSW,&MAC4,&DSORG8,&OPTCD5                        RER1
         LCLA  &A1,&A2,&B(4)                                      13549
         LCLB  &IFLGS4,&IFLGS5,&IFLGS6,&IFLGS7
         LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7
         LCLB  &WTTFLG2,&WTTFLG3
         LCLC  &MTROFF,&EOMC,&EOTC
         LCLC  &C0,&C1,&ERROPTN,&C2                               13549
         LCLA  &BA1,&BA2
         LCLB  &BS2,&BS3,&BS4,&BS5,&BS6,&BS7,&BS8
         LCLB  &BI
         LCLA  &A4
.* TCAM SUPPORT OPERANDS
         LCLA  &SCTAD,&ICDE,&INTFACE
         LCLB  &SW
         LCLC  &TRNTBL,&TRNNO
         LCLA  &WRKA,&WRKB,&WRKC
         LCLA  &LGTH,&INCR,&NUMENT
         LCLA  &TC1
         LCLC  &TC(4)
.*
.* FUNC SUPPORT OPERANDS
         LCLA  &AFUNC,&AFUNC1,&AFUNC2,&AFUNC3,&AMODE
         LCLC  &LFUNC
.*         RELEASE 21.8 DELETIONS/CHANGES
.*                                                              SA57064
.*0000                                                          SA69182
.*0000                                                          SA70399
.*A000       SYSROUTE FROM OY14164                             @SA77206
.*0000                                                         @SA78498
.*         VS1 RELEASE 03.0 DELETIONS/CHANGES
.*                                                              XA02235
.*         VS1 RELEASE 04.0 DELETIONS/CHANGES
.*                                                             @XA06869
.*         RELEASE 21 DELETIONS/CHANGES
.*                                                               A42398
.*0000833400                                                     A49372
.*         RELEASE 20 DELETIONS/CHANGES
.*  RESEQUENCED DCB IN RELEASE 20 TO ACCOMMODATE TCAM CHANGES    S20002
.*  A344467  M0621  A33170  M0624  M0666                         S20038
.*
         AIF   ('&DSORG' NE 'TR').IHB01  IF NOT DSORG = TR       ICB477
&NAME    IHB03 &BACKUP,&BKUPDCB,&BRINGUP,           EXPAND DSORG=TR DCBX
               &DDNAME,&DMPAUTO,&DUMPDCB,&EXLST,                       X
               &IPLAUTO,&IPLTXID,&MACRF,&CKPTDCB                 ICB477
         MEXIT
.*
.*             ANALYZE DSORG, MACRF, RECFM, OPTCD AND NEGATIVE OFFSET
.*
.IHB01   IHB01 &DSORG,&MACRF,&BFTEK,&BFALN,&EODAD,&RECFM,&EXLST,       *
               &BUFCB,&BUFL,&IOBAD,&EOEA,&PCIA,&SIOA,&CENDA,&XENDA,    *
               &AERR,&PGFX,&OPTCD,&BUFNO,&DEVD,&REPOS
         AIF   (&MACRF0 OR &MACRF1 OR &MACRF2 OR &MACRF3 OR &MACRF4 OR *
               &MACRF5 OR &MACRF6 OR &MACRF7 OR &MACRF8 OR &MACRF9 OR &*
               MACRFA OR &MACRFB OR &MACRFC OR &MACRFD).DGN0
         AIF   (&MACRFE OR &MACRFF).DGN0
         IHBERMAC 171
.* THE FOLLOWING LINE OF CODE PUTS THE NAME FOR THE DCB ON A FULL WORD
.* BOUNDARY IN CASE THERE IS A SEVERE ERROR WHICH WOULD INHIBIT DCB
.* EXPANSION.
&NAME    DS    0F            GENERATED TO DEFINE NAME
         MEXIT
.*                      DIAGNOSE DEVICE SUB-PARAMETERS
.*
.DGN0    AIF   (NOT &DSORG8).DGN00
&NAME    IHB02 &DSORG,&MACRF,&DDNAME,&EXLST,&GNCP,&POLST,&GTYPE
         AIF   ( T'&HIARCHY EQ 'O').GEN7C
         IHBERMAC 190,HIARCHY             ERROR
         AGO   .GEN7C
.DGN00   AIF   (T'&KEYLEN EQ 'O' OR &DSORG0 OR &DSORG2 OR (&A0 LE 4 AND*
                '&DEVD' NE 'TA' AND (&DSORG1 OR &DSORG6 OR &MACRF0))).D*
               GN1
         IHBERMAC 100,KEYLEN
.DGN1    AIF   (T'&CODE EQ 'O' OR '&DEVD' EQ 'PT').DGN2
         AIF   ('&DEVD' EQ 'BS' AND &DSORG3).DGN2
         IHBERMAC 101,CODE
.DGN2    AIF   ('&DEVD' EQ 'PC' OR '&DEVD' EQ 'RD').DGN3
         AIF   (T'&MODE EQ 'O').DGN2A
         AIF   ('&DEVD' EQ 'BS' AND &DSORG3).DGN2A
         IHBERMAC 102,MODE
.DGN2A   AIF   (T'&STACK EQ 'O').DGN3
         IHBERMAC 103,STACK
.DGN3    AIF   (T'&PRTSP EQ 'O' OR '&DEVD' EQ 'PR').DGN4
         IHBERMAC 104,PRTSP
.DGN4    AIF   (T'&TRTCH EQ 'O' OR '&DEVD' EQ 'TA').DGN5
         IHBERMAC 105,TRTCH
.DGN5    AIF   (T'&DEN EQ 'O' OR '&DEVD' EQ 'TA').DGN6
         IHBERMAC 106,DEN
.*
.*                      DIAGNOSE BTAM-QTAM OPERANDS
.*
.DGN6    AIF   ('&DEVD' EQ 'WT' AND &DSORG3).DGN61
         AIF   (T'&MON EQ 'O').DGN601
         IHBERMAC 107,MON
.DGN601  AIF   (T'&MONDLY EQ 'O').DGN602
         IHBERMAC 108,MONDLY
.DGN602  AIF   (T'&WRU EQ 'O').DGN603
         IHBERMAC 109,WRU
.DGN603  AIF   (T'&IAM EQ 'O').DGN604
         IHBERMAC 110,IAM
.DGN604  AIF   (T'&EOM EQ 'O').DGN605
         IHBERMAC 111,EOM
.DGN605  AIF   (T'&EOT EQ 'O').DGN61
         IHBERMAC 112,EOT
.DGN61   ANOP
         AIF   (&DSORG3 AND (&MACRF1 OR &MACRF9)).DGN6G
         AIF   ('&BUFRQ' EQ '0' OR &DSORG5).DGN6B
         IHBERMAC 107,BUFRQ
.DGN6B   AIF   ('&CLPS' EQ '1').DGN6C
         IHBERMAC 109,CLPS
.DGN6C   AIF   (&DSORG9 OR &DSORGA).DGN6D
         AIF   ('&INTVL' EQ '0').DGN6D
         IHBERMAC 110,INTVL
.DGN6D   AIF   (&DSORG9 OR &DSORGA).DGN6E
         AIF   (T'&CPRI EQ 'O').DGN6E
         IHBERMAC 111,CPRI
.DGN6E   ANOP
.DGN6F   AIF   (T'&CPOLL EQ 'O').DGN6G
         IHBERMAC 113,CPOLL
.DGN6G   AIF   ('&SOWA' EQ '0' OR &DSORG5).DGN6A
         IHBERMAC 114,SOWA
.DGN6A   AIF   ('&TRMAD' EQ '1' OR &DSORG5).DGN6H                 13549
         IHBERMAC 108,TRMAD                                       13549
.DGN6H   ANOP                                                     13549
.* THIS CODE IS INTENDED TO ALLOW BOTH 'ERROPT' AND 'EROPT' SPELLING
.* FOR BTAM USERS.  ALL OTHER USERS WILL NOT BE PERMITTED TO USE
.* THIS SPELLING.
.* DELETION OF THIS CODE WILL DISALLOW THAT SPELLING.
         AIF   (&DSORG3 AND (&MACRF2 OR &MACRFA)).ISBTAM          13549
         AIF   (T'&ERROPT EQ 'O').DGN6I                           13549
         IHBERMAC 54,,ERROPT
         MEXIT                                                    13549
.ISBTAM  AIF   (T'&ERROPT EQ 'O').CKEROPT                         13549
&ERROPTN SETC  '&ERROPT'                                          13549
&A2      SETA  K'&ERROPT                                          13549
&C2      SETC  'ERROPT'                                           13549
         AGO   .DGN6I                                             13549
.CKEROPT ANOP                                                     13549
.* END OF CODE DELETION REGARDING 'ERROPT' KEYWORD.               13549
&C2      SETC  'EROPT'                                            13549
         AIF   (T'&EROPT EQ 'O').OMITTED                          13549
&ERROPTN SETC  '&EROPT'                                           13549
&A2      SETA  K'&EROPT                                           13549
         AGO   .DGN6I                                             13549
.OMITTED ANOP                                                     13549
&ERROPTN SETC  'E'                     ASSIGN BTAM STANDARD VALUE 13549
&A2      SETA  1                                                  13549
.DGN6I   ANOP                                                     13549
.*
.*                      DIAGNOSE COMMON OPERANDS
.*
.DGN7    AIF   (&COMSW AND NOT (&DSORG5 OR &DSORG3 AND (&MACRF1 OR &MAC*
               RF9))).DGN7C
         AIF   ('&BUFNO' EQ '0').DGN7A
         IHBERMAC 115,BUFNO
.DGN7A   AIF   ('&BUFCB' EQ '1').DGN7B
         IHBERMAC 116,BUFCB
.DGN7B   AIF   ('&BUFL' EQ '0').DGN7C
         IHBERMAC 117,BUFL
.DGN7C   AIF   ('&IOBAD' EQ '1' OR &DSORG3 OR &DSORG4 OR &MACRF0).DGN7D
         IHBERMAC 118,IOBAD
.*
.*                      DIAGNOSE EXTENSION OPERANDS
.*
.DGN7D   AIF   (&FXSW AND NOT (&DSORG5 OR &DSORG3 AND (&MACRF1 OR &MACR*
               F9))).DGN7I
         AIF   (T'&BFTEK EQ 'O').DGN7E
         IHBERMAC 119,BFTEK
.DGN7E   AIF   (T'&BFALN EQ 'O').DGN7F
         IHBERMAC 120,BFALN
.DGN7F   AIF   (&DSORG5).DGN7I
         AIF   ('&EODAD' EQ '1').DGN7G
         IHBERMAC 121,EODAD
.DGN7G   AIF   (T'&RECFM EQ 'O').DGN7H
         IHBERMAC 122,RECFM
.DGN7H   AIF   ('&EXLST' EQ '0' OR &DSORG3).DGN7I
         IHBERMAC 123,EXLST
.DGN7I   AIF   ('&DDNAME' NE '0').DGN7J
         IHBERMAC 167
         AGO   .DGN7L
.DGN7J   AIF   (K'&DDNAME LE 8).DGN7K
         IHBERMAC 168
.DGN7K   ANOP                'DDNAME SHORT' MSG REMOVED            MCOK
.*
.*                      DIAGNOSE EXCP INTERFACE OPERANDS
.*
.DGN7L   AIF   (&MACRF0).DGN7T
         AIF   (T'&IMSK EQ 'O').DGN7M
         IHBERMAC 124,IMSK
.DGN7M   AIF   (T'&UMSK EQ 'O').DGN7N
         IHBERMAC 125,UMSK
.DGN7N   AIF   ('&EOEA' EQ '0').DGN7O
         IHBERMAC 126,EOEA
.DGN7O   AIF   ('&PCIA' EQ '0').DGN7P
         IHBERMAC 127,PCIA
.DGN7P   AIF   ('&SIOA' EQ '0').DGN7Q
         IHBERMAC 128,SIOA
.DGN7Q   AIF   ('&CENDA' EQ '0').DGN7R
         IHBERMAC 129,CENDA
.DGN7R   AIF   ('&XENDA' EQ '0').DGN7S
         IHBERMAC 130,XENDA
.DGN7S   AIF   ('&AERR' EQ '0').DGN7T
         IHBERMAC 131,AERR
.DGN7T   AIF   (T'&UMSK EQ 'O' OR '&AERR' NE '0' OR NOT &MACRF0).DGN7U
         IHBERMAC 175
.DGN7U   AIF   ('&SIOA' NE '0' AND '&PGFX' NE 'YES').DGN8
         AIF   ('&SIOA' EQ '0' AND '&PGFX' NE 'YES').DGN8
         AIF   ('&SIOA' NE '0' AND '&PGFX' EQ 'YES').DGN8
         IHBERMAC 128,PGFX
.*
.*                      DIAGNOSE ACCESS METHOD INTERFACE OPERANDS
.*
.DGN8    AIF   (NOT &MACRF0 AND (&DSORG0 OR &DSORG1 OR &DSORG6)).DGN8D
         AIF   ('&SYNAD' EQ '1' OR &DSORG2 OR &DSORG5).DGN8A
         IHBERMAC 132,SYNAD
.DGN8A   AIF   ('&BLKSIZE' EQ '0' OR (&DSORG2 OR &DSORGA)).DGN8B
.*                                                           ICBI DCB-9
         IHBERMAC 133,BLKSIZE
.DGN8B   AIF   ('&NCP' EQ '0').DGN8C
         IHBERMAC 134,NCP
.DGN8C   AIF   ('&LRECL' EQ '0').DGN8D
         IHBERMAC 135,LRECL
.DGN8D   AIF   (T'&EROPT EQ 'O' OR (&DSORG1 OR &DSORG3)).DGN8E    13549
         IHBERMAC 136,EROPT
.DGN8E   AIF   ('&LIMCT' EQ '0' OR &DSORG2).DGN8F
         IHBERMAC 137,LIMCT
.DGN8F   AIF   (&DSORG0).DGN9
         AIF   ('&NTM' EQ '0').DGN8G
         IHBERMAC 138,NTM
.DGN8G   AIF   ('&CYLOFL' EQ '0').DGN8H
         IHBERMAC 139,CYLOFL
.DGN8H   AIF   ('&RKP' EQ '0').DGN8I
         IHBERMAC 140,RKP
.DGN8I   AIF   ('&MSWA' EQ '1').DGN8J
         IHBERMAC 141,MSWA
.DGN8J   AIF   ('&SMSI' EQ '0').DGN8K
         IHBERMAC 142,SMSI
.DGN8K   AIF   ('&SMSW' EQ '0').DGN8L
         IHBERMAC 143,SMSW
.DGN8L   AIF   ('&MSHI' EQ '1').DGN8M
         IHBERMAC 144,MSHI
.DGN8M   AIF   ('&DBUFNO' EQ '0').DGN9
         IHBERMAC 145,DBUFNO
.DGN9    ANOP
.*
.*             DIAGNOSE FUNC OPERAND
.*
&AFUNC   SETA  0
         AIF   ('&FUNC' EQ '').DGN90Z
&AFUNC1  SETA  K'&FUNC
         AIF   ('&DEVD' EQ 'RD' OR '&DEVD' EQ 'PC').DGN90A      SA69182
         IHBERMAC 100,FUNC   IHB050 FUNC INCONSISTENT--IGNORED  SA69182
.DGN90A  ANOP
&AFUNC2  SETA  2
&AFUNC3  SETA  7
.DGN90C  AIF   ('&FUNC'(&AFUNC1,1) EQ 'IRPWDXT'(&AFUNC3,1)).DGN90E
&AFUNC3  SETA  &AFUNC3-1
&AFUNC2  SETA  &AFUNC2+&AFUNC2
         AIF   (&AFUNC3 NE 0).DGN90C
&LFUNC   SETC  '&FUNC'(&AFUNC1,1)
         MNOTE 12,'IBH0132 INVALID CHARACTER IN FUNC OPERAND-&LFUNC'
&AFUNC   SETA  0
         AGO   .DGN90Z
.DGN90E  ANOP
&AFUNC   SETA  &AFUNC+&AFUNC2
&AFUNC1  SETA  &AFUNC1-1
         AIF   (&AFUNC1 NE 0).DGN90A
         AIF   (&AFUNC EQ 128 OR &AFUNC EQ 64 OR &AFUNC EQ 32).DGN90Z
         AIF   (&AFUNC EQ 16 OR &AFUNC EQ 18 OR &AFUNC EQ 22).DGN90Z
         AIF   (&AFUNC EQ 96 OR &AFUNC EQ 104 OR &AFUNC EQ 80).DGN90Z
         AIF   (&AFUNC EQ 82 OR &AFUNC EQ 86 OR &AFUNC EQ 48).DGN90Z
         AIF   (&AFUNC EQ 52 OR &AFUNC EQ 54 OR &AFUNC EQ 112).DGN90Z
         AIF   (&AFUNC EQ 116 OR &AFUNC EQ 118 OR &AFUNC EQ 120).DGN90Z
         AIF   (&AFUNC EQ 20 OR &AFUNC EQ 84).DGN90Z
         MNOTE 12,'IHB0131 INVALID COMBINATION OF CHARACTERS IN FUNC OP*
               ERAND-&FUNC'
&AFUNC   SETA  0
.DGN90Z  ANOP
.*
.*                      GENERATE ORIGIN OF DCB
.*
         SPACE 2
*                       DATA CONTROL BLOCK
*
.* THE FOLLOWING LINES OF CODE CHECK TO SEE WHETHER THE ORG VALUE
.* CALCULATED BY IHB01 HAS A MEANING OTHER THAN ZERO.  IF THE VALUE
.* IS ZERO, THE ORG WILL NOT BE PERFORMED.  THE DCB WILL BE ALIGNED
.* TO A FULL WORD BOUNDARY.
         AIF   (&A0 NE 0).DGN9A
&NAME    DC    0F'0'                   ORIGIN ON WORD BOUNDARY
         SPACE 1
         AGO   .DGN9B
.DGN9A   ANOP
         ORG   *-&A0                   TO ELIMINATE UNUSED SPACE
&NAME    DS    0F'0'                    ORIGIN ON WORD BOUNDARY
         ORG   *+&A0                   TO ORIGIN GENERATION
         SPACE 1
.DGN9B   ANOP
         AIF   (&A0 EQ 40).GEN4A       IF NO COMMON OR EXTENSION
.*
.*                      GENERATE DEVICE DEPENDENCY INTERFACE
.*
         AIF   (&DSORG3 AND '&DEVD' EQ 'WT').GEN1Q
         AIF   (&A0 GT 4).GEN10         IF NOT TA,DA,OR MR
&A1      SETA  16-&A0
         AIF   ('&DEVD' NE 'TA').GEN1D   IF NOT TA
*                       MAGNETIC TAPE DEVICE INTERFACE
         SPACE 1
         DC    BL&A1.'0'                NERRS,NOISE,UERRS,BLKCT
         AIF   (T'&TRTCH EQ 'O').TA1         IF TRTCH NOT SPECIFIED
         AIF   ('&TRTCH' EQ 'E' OR '&TRTCH' EQ 'T' OR '&TRTCH' EQ 'C' O*
               R '&TRTCH' EQ 'ET' OR '&TRTCH' EQ 'TE').TA1  IF VALID
         IHBERMAC 150,TRTCH,&TRTCH
.*
.TA1     ANOP
&B2      SETB  ('&TRTCH' EQ 'T' OR '&TRTCH' EQ 'E' OR '&TRTCH' EQ 'TE' *
               OR '&TRTCH' EQ 'ET')
&B3      SETB  ('&TRTCH' EQ 'C' OR '&TRTCH' EQ 'T')
&B4      SETB  ('&TRTCH' EQ 'T' OR '&TRTCH' EQ 'TE' OR '&TRTCH' EQ 'ET'*
               )
&B6      SETB  (&B2 OR &B3 OR &B4)
&B7      SETB  (&B2 OR &B3 OR &B4)
         DC    BL1'00&B2&B3&B4.0&B6&B7'      TRTCH
&B6      SETB  (T'&DEN NE 'O')         IF DEN SPECIFIED
&B7      SETB  (T'&DEN NE 'O')
         AIF   (NOT &B7).TA3                 IF DEN NOT SPECIFIED
         AIF   ('&DEN' EQ '0' OR '&DEN' EQ '1' OR '&DEN' EQ '2' OR '&DEN
               N' EQ '3' OR '&DEN' EQ '4').TA3                    99223
         IHBERMAC 151,DEN,&DEN
&B6      SETB  0                       ZERO FIELD
&B7      SETB  0
.TA3     ANOP
&B0      SETB  ('&DEN' EQ '2' OR '&DEN' EQ '3' OR '&DEN' EQ '4')
.*                                                             @XA06869
&B1      SETB  ('&DEN' EQ '1' OR '&DEN' EQ '3' OR '&DEN' EQ '4')
.*                                                             @XA06869
&B3      SETB  ('&DEN' EQ '4')                                    99223
         DC    BL3'00000000&B0&B1.0&B3.00&B6&B7.00000000'    DEVT,DEN
         SPACE 1
         AGO   .GEN2A                  SKIP TO COMMON INTERFACE
.GEN10   AIF   (&DSORG0 OR &DSORG2).GEN1E  IF ISAM OR BDAM
         AIF   (&DSORG1 OR &MACRF0).GEN1F
         AGO   .GEN2A
.GEN1D   AIF   ('&DEVD' EQ 'OR').GEN1OR IF OPTICAL READER
         AIF   ('&DEVD' EQ 'MR').GENMR  IF MAG CHAR READER
*                       DIRECT ACCESS DEVICE INTERFACE
         SPACE 1
         DC    BL&A1.'0'                FDAD,DVTBL
.GEN1E   AIF   (T'&KEYLEN NE 'O').GEN1C
         DC    A(0)                     KEYLE,DEVT,TRBAL
         SPACE 1
         AGO   .GEN2A                   SKIP TO COMMON INTERFACE
.GEN1C   DC    AL1(&KEYLEN)            KEYLE
&RECFM7  SETB  1                       PREVENT OPEN MERGE TO KEYLEN
         DC    BL3'0'                   DEVT,TRBAL
         SPACE 1
         AGO   .GEN2A                  SKIP TO COMMON INTERFACE
.GENMR   ANOP
*                       MAGNETIC CHARACTER READER INTERFACE
         SPACE 1
         AIF   ('&SSRTN' EQ '0' AND '&IMGADR' EQ '0' AND               ,
               '&DCBHDR' EQ '0' AND '&IMGRTE' EQ '0').GENMR10   XL03123
         AIF   (('&SSRTN' EQ '0' AND '&IMGADR' EQ '0') OR              ,
               ('&DCBHDR' EQ '0' AND '&IMGRTE' EQ '0')).GENMR20 XL03123
         IHBERMAC 171                                           XL03123
.GENMR10 DC    BL20'0'
         AGO   .GENMR90                                         XL03123
.GENMR20 AIF   ('&SSRTN' NE '0' OR '&IMGADR' NE '0').GENMR30    XL03123
         DC    BL4'0'
         DC    A(&IMGRTE)               IMAGE PROC RTN ADDR
         DC    BL4'0'
         DC    A(&DCBHDR)               HEADER DATA AREA ADDR
         DC    BL4'0'                   FLAG/DEVT
         AGO   .GENMR90                                         XL03123
.GENMR30 AIF   (K'&SSRTN LE 8).GENMR35                          XL03123
         IHBERMAC 201                                           XL03123
.GENMR35 DC    CL8'&SSRTN'              STACKER SELECT RTN ADDR
         DC    A(&IMGADR)               IMAGE PROCESSING PARAM LIST
         DC    A(0)                     ECB LIST ADDR
         DC    BL4'0'                   MRFLG,DEVT,APPEN,RES
&BI      SETB  1                        SET 1419 SW             XL03123
.GENMR90 SPACE 1                                                XL03123
         AGO   .GEN2A                   SKIP TO COMMON INTERFACE
.GEN1OR  ANOP
*                       OPTICAL READER DEVICE INTERFACE
         SPACE 1
         AIF   ('&ERRCNT' EQ '0' AND '&FRID' EQ '').GENOR10     XL03127
         AIF   ('&ERRCNT' EQ '0' OR  '&FRID' EQ '').GENOR20     XL03127
         IHBERMAC 171                                           XL03127
.GENOR10 DC    BL20'0'
         AGO   .GENOR90                                         XL03127
.GENOR20 AIF   ('&ERRCNT' NE '0').GENOR30
         DC    BL4'0'
         DC    X'00FF0000'              LINE NO./LINE FMT NO.
         AIF   (K'&FRID LE 4).GENOR25                           XL03127
         IHBERMAC 254,,&FRID                                    XL03127
.GENOR25 DC    CL4'&FRID'               INITIAL FMT RECORD ID
         DC    BL8'0'                   CURRENT FMT RCD ID/DEVT
         AGO   .GENOR90                                         XL03127
.GENOR30 DC    BL4'0'                   WTO ID NUMBER
         DC    A(&ERRCNT)               ERROR COUNTERS
         DC    BL12'0'                 DSPLY,RESCN/RDLNE,ORBYT,DEVT,EIB
.GENOR90 SPACE 1                                                XL03127
         AGO   .GEN2A
.GEN1F   AIF   ('&DEVD' NE 'PT').GEN1M IF NOT PAPER TAPE
*                      PAPER TAPE DEVICE INTERFACE
         SPACE 1
         DC    A(1)                    LCTBL
         DC    A(1)                    TRTBL, UCTBL
&B0      SETB  ('&CODE' EQ 'N')        IF NO CONVERSION
&B1      SETB  ('&CODE' EQ 'I')        IF IBM BCD
&B2      SETB  ('&CODE' EQ 'F')        IF FRIDEN
&B3      SETB  ('&CODE' EQ 'B')        IF BURROUGHS
&B4      SETB  ('&CODE' EQ 'C')        IF NCR
&B5      SETB  ('&CODE' EQ 'A')        IF ASCII
&B6      SETB  ('&CODE' EQ 'T')        IF TELETYPE
         DC    BL1'&B0&B1&B2&B3&B4&B5&B6.0'  CODE
         DC    BL3'0'                  DEVT
         SPACE 1
         AGO   .GEN2A                  SKIP TO COMMON INTERFACE
.*
.GEN1M   AIF   ('&DEVD' NE 'RD' AND '&DEVD' NE 'PC').GEN1N READER-PUNCH
*                       READER/PUNCH DEVICE INTERFACE
         SPACE 1
&AMODE   SETA  K'&MODE
&B0      SETB  0
&B1      SETB  0
&B2      SETB  0
&B3      SETB  0
.GEN1F1  AIF   (&AMODE EQ 0).GEN1F2
&B0      SETB  ('&MODE'(&AMODE,1) EQ 'C' OR &B0)  IF COLUMN BINARY MODE
&B1      SETB  ('&MODE'(&AMODE,1) EQ 'E' OR &B1)  IF EBCDIC MODE
&B2      SETB  ('&MODE'(&AMODE,1) EQ 'O' OR &B2)
&B3      SETB  ('&MODE'(&AMODE,1) EQ 'R' OR &B3)
&AMODE   SETA  &AMODE-1
         AGO   .GEN1F1
.GEN1F2  ANOP
&B6      SETB  ('&STACK' EQ '2')
&B7      SETB  ('&STACK' EQ '1')
         DC    BL2'&B0&B1&B2&B3.00&B6&B7.00000000'  MODE, STACK, DEVT
         DC    X'00'
         DC    AL1(&AFUNC)         FUNC
         SPACE 1
         AGO   .GEN2A                  SKIP TO COMMON INTERFACE
.*
.GEN1N   AIF   ('&DEVD' NE 'PR').GEN2A IF NOT PRINTER
*                       PRINTER DEVICE INTERFACE
         SPACE 1
&B3      SETB  ('&PRTSP' EQ '2' OR '&PRTSP' EQ '3')
&B4      SETB  ('&PRTSP' EQ '1' OR '&PRTSP' EQ '3')
&B7      SETB  (&B3 OR &B4 OR '&PRTSP' EQ '0')
         DC    BL2'000&B3&B4.00&B7.00000000' PRTSP,DEVT
         DC    H'0'
         SPACE 1
         AGO   .GEN2A
.*
.GEN1Q   ANOP
*           WORLD TRADE TELEGRAPH DEVICE INTERFACE
         SPACE 1
&MTROFF  SETC  '00'
&EOMC    SETC  '32'
&EOTC    SETC  '00'
         AIF   ('&MON' EQ 'YES').DGNW30
&MTROFF  SETC  '15'
         AIF   ('&MON' EQ 'NO' OR T'&MON EQ 'O').DGNW20
         IHBERMAC 180,MON,NO
.DGNW20  AIF   (T'&MONDLY EQ 'O').DGNW30
         AIF   (T'&MONDLY NE 'N' OR '&MONDLY' GT '20').DGNW22
&MTROFF  SETC '&MONDLY'
         AGO   .DGNW30
.DGNW22  IHBERMAC 180,MONDLY,15
.DGNW30  AIF   ('&WRU' NE 'YES').DGNW32
&WTTFLG2 SETB  1
&WTTFLG3 SETB  1
         AGO   .DGNW50
.DGNW32  AIF   ('&WRU' EQ 'NO' OR T'&WRU EQ 'O').DGNW40
         IHBERMAC 180,WRU,NO
.DGNW40  AIF   ('&IAM' EQ 'NO' OR T'&IAM EQ 'O').DGNW50
         AIF   ('&IAM' NE 'YES').DGNW44
&WTTFLG3 SETB  1
         AGO   .DGNW50
.DGNW44  IHBERMAC 180,IAM,NO
.DGNW50  AIF   ('&EOM' EQ 'WRU' OR T'&EOM EQ 'O').DGNW60
         AIF   (K'&EOM EQ 5).DGNW52
         AIF   (K'&EOM NE 7 OR '&EOM'(5,3) NE '1F''').DGNW56
.DGNW52  AIF   ('&EOM'(1,2) NE 'X''').DGNW56
         AIF   ('&EOM'(3,1) NE '2' AND '&EOM'(3,1) NE '3').DGNW56
&EOMC    SETC  '&EOM'(3,2)
         AGO   .DGNW60
.DGNW56  IHBERMAC 180,EOM,WRU
.DGNW60  AIF   ('&EOT' EQ '2EOM' OR T'&EOT EQ 'O').DGNW7
         AIF   (K'&EOT NE 7).DGNW64
         AIF   ('&EOT'(1,2) NE 'X''' OR '&EOT'(5,3) NE '1F''').DGNW64
         AIF   ('&EOT'(3,1) NE '2' AND '&EOT'(3,1) NE '3').DGNW64
&EOTC    SETC  '&EOT'(3,2)
         AGO   .DGNW7
.DGNW64  IHBERMAC 180,EOT,2EOM
.DGNW7   ANOP
         DC    BL1'0&WTTFLG2&WTTFLG3.00000' WTTA FLAGS
         DC    X'&EOMC' WTTA EOM CHARACTER
         DC    X'&EOTC' WTTA EOT CHARACTER
         DC    AL1(&MTROFF) WTTA PADDING
         SPACE 1
.GEN2A   AIF   (NOT &COMSW).GEN3A      IF NOT COMMON
.*
         AIF   (NOT &DSORG3 OR NOT (&MACRF1 OR &MACRF9)).GEN2AA
*                       QTAM LINE GROUP INTERFACE
         SPACE 1
         DC    AL1(&BUFRQ)             BUFRQ
         DC    AL3(&CLPS)              CLPS
         DC    AL1(&INTVL)             INTVL
         DC    AL1(0)
         DC    BL2'0001000000000000'   DSORG
         DC    A(&IOBAD)               IOBAD
.TCAM2X  ANOP
         AIF   ('&DEVD' NE 'WT' OR '&CPRI' NE 'R').QTAM1B0
&B6      SETB  1
         AGO   .QTAM1B
.QTAM1B0 ANOP
&B5      SETB  ('&CPRI' EQ 'R')
&B6      SETB  ('&CPRI' EQ 'E')
&B7      SETB  ('&CPRI' EQ 'S')
         AIF   (&B5 OR &B6 OR &B7 OR T'&CPRI EQ 'O').QTAM1B
         IHBERMAC 152,CPRI,&CPRI
.QTAM1B  DC    BL1'00000&B5&B6&B7'     CPRI
         AIF   (&DSORG9).TCAM2A
.*
         DC    AL3(1)                   LCBAD
         AGO   .TCAM2B
.TCAM2A  ANOP
&SW      SETB  0
&TRNTBL  SETC  '&TRANS'
         AIF   (T'&TRANS NE 'O').IN
         DC    AL3(1)                   TRANS
         IHBERMAC   180,TRANS,1
         AGO   .TCAM21
.IN      ANOP
&SCTAD   SETA  10
         AIF   ('&TRNTBL' EQ '1030').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ '1050').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ '105F').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ '1060').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ '2260').SETUP
         AIF   ('&TRNTBL' EQ '2265').SETUP                       A42398
&SCTAD   SETA  &SCTAD+2                                          A42398
         AIF   ('&TRNTBL' EQ '2740').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ '274F').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ 'ITA2').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ 'ZSC3').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ 'TTYA').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ 'TTYB').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ 'TTYC').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ '6BIT').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ 'ASCI').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ 'EBCD').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ 'BC41').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ 'EB41').SETUP
&SCTAD   SETA  &SCTAD+1
         AIF   ('&TRNTBL' EQ 'CR41').SETUP
         AIF   (&SW).BADXIT
         DC    AL3(&TRANS)              USER TRANSLATE TABLE
.TCAM21  ANOP
&SW      SETB  1
&TRNTBL  SETC  '&SCT'
         AGO   .TCAM2B
.BADXIT  DC    XL1'00'                  UNTCT
         IHBERMAC 157,SCT,&TRNTBL
         AGO   .TCAM3B
.SETUP   AIF   (&SW).SCTDC
&TRNNO   SETC  '&SCTAD'
         DC    VL3(IEDQ&TRNNO)          TRANS
&TRNTBL  SETC  '&SCT'
&SW      SETB  1
         AIF   (T'&SCT NE 'O').TCAM2B
         AIF   (T'&TRANS EQ 'O').BADEXIT
&TRNTBL  SETC  '&TRANS'
         AGO   .TCAM2B
.SCTDC   DC    XL1'&SCTAD'              UNTCT
         AGO   .TCAM3B
.BADEXIT ANOP
&TRNTBL  SETC  'ZERO'
.TCAM2B  ANOP
         DC    AL1(0)                   EIOBX
         DC    AL3(&EXLST)              EXLST
         SPACE 1
         AGO   .GEN4A                  SKIP TO FOUNDATION GENERATION
.*
.GEN2AA  AIF   (NOT &DSORG5 OR NOT (&MACRF1 OR &MACRF9)).GEN2AB
*                       QTAM PROBLEM PROGRAM MESSAGE QUEUE INTERFACE
         SPACE 1
         DC    AL1(&BUFRQ)             BUFRQ
         DC    AL3(&TRMAD)             TRMAD
         DC    AL2(&SOWA)              SOWA
         DC    BL2'&DSORG0&DSORG1&DSORG2&DSORG3&DSORG4&DSORG5&DSORG6&DS*
               ORG7.00000000'          DSORG
         DC    A(1)                    SEGAD
         DC    A(&EODAD)               EODAD
         DC    BL1'&RECFM0&RECFM1&RECFM2&RECFM3&RECFM4&RECFM5&RECFM6&RE*
               CFM7'                   RECFM
         DC    AL3(&EXLST)             EXLST
         SPACE 1
         AGO   .GEN4A                  SKIP TO FOUNDATION GENERATION
.*
.GEN2AB  ANOP
*                       COMMON ACCESS METHOD INTERFACE
         SPACE 1
         AIF   (&DSORG9).TCAM1
         DC    AL1(&BUFNO)             BUFNO
         AGO   .GEN9A
.TCAM1   ANOP
&WRKC    SETA  0
         AIF   (T'&BUFIN EQ 'O' AND T'&BUFOUT EQ 'O' AND T'&BUFMAX EQ '*
               O').TCAM1E
         AIF   (T'&BUFIN EQ 'O' OR T'&BUFOUT EQ 'O' OR T'&BUFMAX EQ 'O'*
               ).TCAM1D
         AIF   (T'&BUFIN NE 'N' OR T'&BUFOUT NE 'N').TCAM1FA     M4043
&WRKA    SETA  &BUFIN
&WRKB    SETA  &BUFOUT
         AIF   ('&BUFIN' GT '15' OR '&BUFIN' LT '1' OR '&BUFOUT' LT '2'*
                OR '&BUFOUT' GT '15').TCAM1D
         AIF   (T'&BUFMAX NE 'N').TCAMR                          M4043
         AIF   ('&BUFMAX' GT '255' OR '&BUFMAX' LT '&BUFIN' OR '&BUFMAX*
               ' LT '&BUFOUT').TCAM1D
&WRKA    SETA  (&WRKA*16)
&WRKA    SETA  (&WRKA+&WRKB)
&WRKC    SETA  &BUFMAX
         AGO   .TCAM1F
.TCAM1D  IHBERMAC 180,BUFIN-BUFOUT-BUFMAX,0
.TCAM1E  ANOP
&WRKA    SETA  0
.TCAM1F  DC    AL1(&WRKA)               BUFIN/BUFOUT
         AGO   .TCAM1FB                                          M4043
.TCAM1FA ANOP
         DC    AL1((&BUFIN.*16)+(&BUFOUT)) BUFIN/BUFOUT
.TCAM1FB ANOP                                                    M4043
         AIF   (T'&MH EQ 'O').TCAM1G
         DC    AL3(&MH)                 MH
         AGO   .TCAM1H
.TCAM1G  ANOP
         DC    AL3(1)                   MH
         IHBERMAC 24
.TCAM1H  ANOP
         AIF   (T'&INTVL NE 'N').TCAM1HA                         M4043
         AIF   ('&INTVL' GT '255').TCAM1J                        M4043
.TCAM1HA ANOP                                                    M4043
         AIF   (T'&INTVL EQ 'O').TCAM1J
         DC    AL1(&INTVL)              INTVL
         AGO   .TCAM1K
.TCAM1J  ANOP
         IHBERMAC   180,INTVL,0
         DC    AL1(0)                   INTVL
.TCAM1K  ANOP
         AIF   (T'&PCI(1) EQ 'O' AND T'&PCI(2) EQ 'O').TCAM1L
&B2      SETB  ('&PCI(1)' EQ '')
&B3      SETB  ('&PCI(2)' EQ '')
&B4      SETB  ('&PCI(1)' EQ 'N')
&B6      SETB  ('&PCI(1)' EQ 'R')
&B2      SETB  ('&PCI(1)' EQ 'A')
&B5      SETB  ('&PCI(2)' EQ 'N')
&B7      SETB  ('&PCI(2)' EQ 'R')
&B3      SETB  ('&PCI(2)' EQ 'A')
&B0      SETB  ('&PCI(1)' EQ 'X')                            ICBI DCB-8
&B1      SETB  ('&PCI(2)' EQ 'X')                            ICBI DCB-8
         AIF   ((&B0 OR &B2 OR &B4 OR &B6) AND (&B1 OR &B3 OR &B5 OR   X
               &B7)).TCAMP                                   ICBI DCB-8
         IHBERMAC 180,PCI,0
.TCAM1L  ANOP
         DC    AL1(0)                   PCI
         AGO   .TCAMQ
.TCAMP   DC    BL1'&B0&B1&B2&B3&B4&B5&B6&B7'   PCI           ICBI DCB-8
.TCAMQ   ANOP
         DC    BL2'0000000001000000'    DSORG
.TCAMR   ANOP                                                    M4043
         AIF   (T'&BUFMAX EQ 'N' OR T'&BUFMAX EQ 'O').TCAMS      A39771
         DC    AL1(&BUFMAX)             BUFMAX
         AGO   .TCAMT                                            M4043
.TCAMS   ANOP                                                    M4043
         DC    AL1(&WRKC)               BUFMAX
.TCAMT   ANOP
         DC    AL3(IEDQAVT)
         AGO   .TCAM2X
.GEN9A   AIF   (&DSORG4).GEN2AB1
         DC    AL3(&BUFCB)             BUFCB
         DC    AL2(&BUFL)         BUFL
         AGO   .GEN2AB2
.GEN2AB1 DC    AL3(TERMTBL)            BUFCB
         DC    AL2(IECKBUFL)           BUFL
.GEN2AB2 DC    BL2'&DSORG0&DSORG1&DSORG2&DSORG3&DSORG4&DSORG5&DSORG6&DS*
               ORG7&DSORG8&DSORG9&DSORGA.00000'  DSORG
         AIF   (NOT &DSORGA).TCAML5
         DC    A(IEDQAVT)
         SPACE 1
         AGO   .GEN3A
.TCAML5  DC    A(&IOBAD)                IOBAD
         SPACE 1
.GEN3A   AIF   (NOT &FXSW).GEN4A       IF EXTENSION NOT NEEDED
*                       FOUNDATION EXTENSION
&B0      SETB  0
&B5      SETB  0
         AIF   ( T'&HIARCHY EQ 'O').GEN3A4      NO PARA. PASS
         AIF   ('&HIARCHY' EQ '0' OR '&HIARCHY' EQ '1').GEN3A2
         IHBERMAC 195,HIARCHY
         AGO   .GEN3A4
.GEN3A2  ANOP
         AIF   ( NOT(&DSORG3 OR &DSORG4 OR &DSORG5 OR &DSORG8)).GEN3A3
         IHBERMAC 195,HIARCHY
         AGO   .GEN3A4
.GEN3A3  ANOP
&B0      SETB  ( '&HIARCHY' EQ '1' )     IF HIARCHY =1
&B5      SETB   ( '&HIARCHY' EQ '0' )       IF  HIARCHY=0
.GEN3A4  ANOP
         SPACE 1
&B1      SETB  ('&BFTEK' EQ 'S' OR '&BFTEK' EQ 'A')  SIMPLE BUFF
&B2      SETB  ('&BFTEK' EQ 'A' OR '&BFTEK' EQ 'R')  SPANNED
&B3      SETB  ('&BFTEK' EQ 'E')        IF EXCHANGE
&B4      SETB  ('&BFTEK' EQ 'D')        IF DYNAMIC
         AIF   (&B1 OR &B2 OR &B3 OR &B4 OR T'&BFTEK EQ 'O').GEN3A1
.*             IF BFTEK IS SPECIFIED O.K.
         IHBERMAC 153,BFTEK,&BFTEK
.GEN3A1  ANOP
&B6      SETB  ('&BFALN' EQ 'D')       IF DOUBLE WORD ALIGNMENT
&B7      SETB  ('&BFALN' EQ 'F')       IF SINGLE WORD ALIGNMENT
         AIF   (&B6 OR &B7 OR T'&BFALN EQ 'O').GEN3C
         IHBERMAC 154,BFALN,&BFALN
.GEN3C   AIF   (NOT &DSORGA).GEN3CY
         AIF   (T'&THRESH EQ 'O').GEN3CV
         AIF   (T'&THRESH NE 'N').GEN3CT                         M4043
         AIF   ('&THRESH' GT '100').GEN3CW
.GEN3CT  ANOP                                                    M4043
         DC    AL1(&THRESH)             TCAM THRESH
         AGO   .GEN3CZ
.GEN3CW  IHBERMAC  180,THRESH,0
.GEN3CV  DC    AL1(0)                   TCAM THRESH
         AGO   .GEN3CZ
.GEN3CY  DC    BL1'&B0&B1&B2&B3&B4&B5&B6&B7'  BFTEK,BFLN,HIARCHY
.GEN3CZ  ANOP
         AIF   (NOT &DSORG3 OR NOT (&MACRF2 OR &MACRFA)).NERROPT
&B3      SETB  0
&B4      SETB  0
&B5      SETB  0
&B6      SETB  0
&B7      SETB  0
         AIF   (&A2 LE 5).START                                   13549
&A2      SETA  5                                                  13549
.START   AIF   ('&ERROPTN'(&A2,1) NE 'N').R                       13549
&B7      SETB  1
         AGO   .LOOPCTL
.R       AIF   ('&ERROPTN'(&A2,1) NE 'R').W                       13549
&B6      SETB  1
         AGO   .LOOPCTL
.W       AIF   ('&ERROPTN'(&A2,1) NE 'W').C                       13549
&B5      SETB  1
         AGO   .LOOPCTL
.C       AIF   ('&ERROPTN'(&A2,1) NE 'C').T                       13549
&B4      SETB  1
         AGO   .LOOPCTL
.T       AIF   ('&ERROPTN'(&A2,1) NE 'T').LOOPCTL                 13549
&B3      SETB  1
.LOOPCTL AIF   (&A2 LE 1).SCANOK                                  13549
&A2      SETA  &A2-1                                              13549
         AGO   .START
.SCANOK  AIF   ('&DEVD' NE 'BS').NOK
         AIF   (NOT &B7).NOK
&B7      SETB  0
         MNOTE *,'*** IHB085  DEVD=BS       &C2.=N IGNORED'    @SA78498
.NOK     AIF   ('&DEVD' NE 'WT').NOK1
         AIF   (NOT &B6).NOKA
&B6      SETB  0
         MNOTE *,'*** IHB085  DEVD=WT       ERROPT=R IGNORED'  @SA78498
.NOKA    AIF   (NOT &B5).NOKB
&B5      SETB  0                                               @SA77206
         MNOTE *,'*** IHB085  DEVD=WT       ERROPT=W IGNORED'  @SA78498
.NOKB    AIF   (NOT &B3).NOK1                                  @SA78498
&B3      SETB  0
         MNOTE *,'*** IHB085  DEVD=WT       ERROPT=T IGNORED'  @SA78498
.NOK1    AIF   ('&DEVD' NE 'LD').NOK2                          @SA78498
         AIF   (NOT &B4).NOKC                                  @SA77206
&B4      SETB  0                                               @SA77206
         MNOTE *,'*** IHB085  DEVD=LD         EROPT=C IGNORED' @SA78498
.NOKC    AIF   (NOT &B5).NOKD                                  @SA77206
&B5      SETB  0                                               @SA77206
         MNOTE *,'*** IHB085  DEVD=LD         EROPT=W IGNORED' @SA78498
.NOKD    AIF   (NOT &B6).NOK2                                  @SA77206
&B6      SETB  0                                               @SA77206
         MNOTE *,'*** IHB085  DEVD=LD         EROPT=R IGNORED' @SA78498
.NOK2    AIF   (NOT &B7).OUTPUT3                               @SA77206
&B4      SETB  0
&B5      SETB  0
&B6      SETB  0
.OUTPUT3 AIF   (T'&LERB EQ 'O').OUTPUT1
         AIF   (&B7).OUTPUT2                                   @SA77206
         AIF   (&B4).OUTPUT
&B4      SETB  1
         IHBERMAC 178,&C2,C            EROPT NOT SPEC'D,SET TO C. 13549
         AGO   .OUTPUT
.OUTPUT1 AIF   (NOT &B4).OUTPUT
&B4      SETB  0
         IHBERMAC 147,&C2              EROPT OPERAND INCONSISTENT 13549
         AGO   .OUTPUT
.OUTPUT2 ANOP
         IHBERMAC 147,LERB
.OUTPUT  DC    BL1'000&B3&B4&B5&B6&B7'  BTAM EROPT CODE
         DC    AL1(&BUFCT)              BTAM BUFFER COUNT
         DC    AL1(0)
         AGO   .GEN3C2
.NERROPT ANOP
         AIF   (NOT &DSORG4).GEN3C1
         DC    AL3(IECKAVRQ)           EODAD
         AGO   .GEN3C2
.GEN3C1  DC    AL3(&EODAD)             EODAD
.GEN3C2  ANOP
         DC    BL1'&RECFM0&RECFM1&RECFM2&RECFM3&RECFM4&RECFM5&RECFM6&RE*
               CFM7'                   RECFM
         DC    AL3(&EXLST)             EXLST
         SPACE 1
.*
.GEN4A   ANOP
*                       FOUNDATION BLOCK
         SPACE 1
         DC    CL8'&DDNAME'            DDNAME
.*
.*                      ANALYZE IMSK, AND UMSK
.*
&C0      SETC  'FFFFFFFF'               PRESET TO STANDARD VALUES
&C1      SETC  '00000000'
         AIF   (T'&IMSK EQ 'O' OR NOT &MACRF0).GEN4C
&C0      SETC  '&IMSK'                  SET CODED VALUE
.GEN4C   AIF   (T'&UMSK EQ 'O' OR NOT &MACRF0).GEN4E
&C1      SETC  '&UMSK'                  SET CODED VALUE
.GEN4E   ANOP
&IFLGS4  SETB  ('&C0' EQ '00000000')   IF NEVER IBM ROUTINES
&IFLGS5  SETB  ('&C0' NE 'FFFFFFFF')   IF NOT ALWAYS IBM ROUTINES
&IFLGS6  SETB  ('&C1' EQ 'FFFFFFFF')   IF ALWAYS USER ROUTINES
&IFLGS7  SETB  ('&C1' NE '00000000')   IF SOMETIMES USER ROUTINES
         DC    BL1'00000010'           OFLGS
         DC    BL1'0000&IFLGS4&IFLGS5&IFLGS6&IFLGS7'  IFLG
         AIF   (&MACRF0 OR &MACRF4 OR NOT(&DSORG0 AND &MACRFD)).MACRF1
         IHBERMAC 240,MACRF,&MACRF      INCONSISTANT (GM,PU)    SA70399
         DC    BL2'0000000000000000'    MACRF
         AGO   .MACRF2                                          SA70399
.MACRF1  ANOP                                                   SA70399
         DC    BL2'&MACRF0&MACRF1&MACRF2&MACRF3&MACRF4&MACRF5&MACRF6&MA*
               CRF7&MACRF8&MACRF9&MACRFA&MACRFB&MACRFC&MACRFD&MACRFE&MA*
               CRFF'                   MACR
.MACRF2  ANOP                                                   SA70399
.*
         AIF   (NOT &DSORGA).TCAM3X
         DC    BL1'&OPTCD0&OPTCD1&OPTCD2&OPTCD3&OPTCD4&OPTCD5&OPTCD6&OP*
               TCD7'                    OPTCD
         DC    AL3(0)
         DC    F'0'                                          ICBI DCB-9
         DC    H'0'                                          ICBI DCB-9
         DC    AL2(&BLKSIZE)           BLKSIZE               ICBI DCB-9
.TCAM3X  ANOP
         AIF   (&DSORG9).TCAM3A
         AIF   (&DSORG4).GEN7C         IF DSORG CQ
         AIF   (NOT &MACRF0).GEN5A     IF NOT EXCP ACCESS
         AIF   (NOT &MACRF2 AND T'&UMSK EQ 'O' AND T'&IMSK EQ 'O').GEN7*
               C
         SPACE 1
*                       EXCP APPENDAGE LIST
         SPACE 1
         DC    BL1'00000&OPTCD5.00'                                RER1
         DC    XL3'000000'                                         RER1
         AIF   (NOT &MACRF2 AND T'&UMSK EQ 'O').GEN7C
         DC    XL4'&C1'                UMSK
         AIF   (NOT &MACRF2).GEN7C     IF NO APPENDAGES
         AIF   ('&EOEA' EQ '0').EXCP2                            M0624
         AIF   (K'&EOEA EQ 2).EXCP2                              M0624
         AIF   (K'&EOEA LT 2).EXCP1                              M0624
         IHBERMAC  176,EOEA,&EOEA                                M4043
         AGO   .EXCP2                                            M0624
.EXCP1   IHBERMAC  177,EOEA,&EOEA                                M4043
.EXCP2   DC    CL2'&EOEA'               EOEA
         AIF   ('&PCIA' EQ '0').EXCP4                            M0624
         AIF   (K'&PCIA EQ 2).EXCP4                              M0624
         AIF   (K'&PCIA LT 2).EXCP3                              M0624
         IHBERMAC  176,PCIA,&PCIA                                M4043
         AGO   .EXCP4                                            M0624
.EXCP3   IHBERMAC  177,PCIA,&PCIA                                M4043
.EXCP4   DC    CL2'&PCIA'               PCIA
         AIF   ('&SIOA' EQ '0').EXCP6                            M0624
         AIF   (K'&SIOA EQ 2).EXCP6                              M0624
         AIF   (K'&SIOA LT 2).EXCP5                              M0624
         IHBERMAC  176,SIOA,&SIOA                                M4043
         AGO   .EXCP6                                            M0624
.EXCP5   IHBERMAC  177,SIOA,&SIOA                                M4043
.EXCP6   DC    CL2'&SIOA'               SIOA
         AIF   ('&CENDA' EQ '0').EXCP8                           M0624
         AIF   (K'&CENDA EQ 2).EXCP8                             M0624
         AIF   (K'&CENDA LT 2).EXCP7                             M0624
         IHBERMAC  176,CENDA,&CENDA                              M4043
         AGO   .EXCP8                                            M0624
.EXCP7   IHBERMAC  177,CENDA,&CENDA                              M4043
.EXCP8   DC    CL2'&CENDA'              CENDA
         AIF   ('&XENDA' EQ '0').EXCP10                          M0624
         AIF   (K'&XENDA EQ 2).EXCP10                            M0624
         AIF   (K'&XENDA LT 2).EXCP9                             M0624
         IHBERMAC  176,XENDA,&XENDA                              M4043
         AGO   .EXCP10                                           M0624
.EXCP9   IHBERMAC  177,XENDA,&XENDA                              M4043
.EXCP10  DC    CL2'&XENDA'              XENDA
         AIF   ('&AERR' EQ '0').EXCP12                           M0624
         AIF   (K'&AERR EQ 2).EXCP12                             M0624
         AIF   (K'&AERR LT 2).EXCP11                             M0624
         IHBERMAC  176,AERR,&AERR                                M4043
         AGO   .EXCP12                                           M0624
.EXCP11  IHBERMAC  177,AERR,&AERR                                M4043
.EXCP12  DC    CL2'&AERR'               AERR
         MEXIT
.*
.GEN5A   AIF   (NOT &DSORG5).QTAM1D     IF NOT QTAM MSG QUEUE.
         DC    A(1)                    RECRD
         DC    A(&SYNAD)               SYNAD
         DC    A(1)                    EOBLK
         MEXIT
.QTAM1D  AIF   (NOT (&DSORG3 AND (&MACRF1 OR &MACRF9))).QTAM1F
&A1      SETA  1
&B(1)    SETA  255
&B(2)    SETA  10
&B(3)    SETA  5
&B(4)    SETA  5
         SPACE 1
.THRESH  ANOP
         AIF   (N'&THRESH LT &A1).SVAL
         AIF   ('&THRESH(&A1)' EQ '').SVAL
&B(&A1)  SETA  &THRESH(&A1)
.SVAL    ANOP
         DC    AL1(&B(&A1))             KSTAT
&A1      SETA  &A1+1
         AIF   (&A1 LT 5).THRESH
         SPACE 1
.*
.QTAM1F  AIF   (T'&CPOLL EQ 'O' OR NOT (&DSORG3 AND (&MACRF1 OR &MACRF9*
               ))).GEN5B
         SPACE 1
*                       QTAM LINE GROUP POLLING LIST
         SPACE 1
&A0      SETA  1                       TO INDEX 1ST ITEM
.QTAM1G  DC    A(&CPOLL(&A0))
&A0      SETA  &A0+1                   STEP INDEX
         AIF   (&A0 LE N'&CPOLL).QTAM1G  REPEAT LOOP FOR NEXT ITEM
         MEXIT
.GEN5B   AIF   (&DSORG3).GEN7B5         IF LINE GROUP
.*
         AIF   (NOT &DSORG1 AND NOT &DSORG6).GEN7A  IF NOT PHYSICAL SEQ
         SPACE 1
*                       BSAM-BPAM-QSAM INTERFACE
         SPACE 1
         DC    BL1'&OPTCD0&OPTCD1&OPTCD2&OPTCD3&OPTCD4&OPTCD5&OPTCD6&OP*
               TCD7'                                               RER1
         DC    AL3(1)                  CHECK, GERR, PERR
         DC    A(&SYNAD)               SYNAD
         AIF   (T'&STOP EQ 'O').GEN5B2                       ICBI DCB-3
&B0      SETB  ('&STOP' EQ 'QUICK' OR '&STOP' EQ 'BOTH')     ICBI DCB-3
&B1      SETB  ('&STOP' EQ 'FLUSH' OR '&STOP' EQ 'BOTH')     ICBI DCB-3
         AIF   (NOT &B0 AND NOT &B1).GEN5B1                  ICBI DCB-3
         DC    BL1'&B0&B1.000000'  CIND1                     ICBI DCB-3
         DC    AL1(0)              CIND2                     ICBI DCB-3
         AGO   .GEN5B3                                       ICBI DCB-3
.GEN5B1  ANOP                                                ICBI DCB-3
         IHBERMAC 153,STOP,&STOP                             ICBI DCB-3
.GEN5B2  ANOP                                                ICBI DCB-3
         DC    H'0'                    CIND1, CIND2
.GEN5B3  ANOP                                                ICBI DCB-3
.*  IF BUFL AND BLKSIZE ARE CODED FOR 1419, THEY MUST BE EQUAL
         AIF   (&BI).GENMRA             BR IF 1419              XL03123
         DC    AL2(&BLKSIZE)           BLKSIZE
         AGO   .GENMRC
.GENMRA  AIF   ('&BUFL' EQ '&BLKSIZE').GENMRB
         IHBERMAC  199                  BUFL NE BLKSIZE
.GENMRB  ANOP
         DC    AL2(&BUFL)               BLKSIZE
.GENMRC  ANOP
         DC    F'0'                    WCPO, WCPL, OFFSR, OFFSW
         DC    A(1)                    IOBA
         DC    AL1(&NCP)               NCP
         DC    AL3(1)                  EOBR, EOBAD
         SPACE 1
         AIF   (&MACRF1 OR &MACRF9).GEN6E   IF GET/PUT
*                         BSAM-BPAM INTERFACE
         SPACE 1
         DC    A(1)                    EOBW
         AIF   (T'&BUFOFF EQ 'O').GEN5C9
.GEN5C2A AIF   (&DSORG0 OR &DSORG2 OR &DSORG3 OR &DSORG4 OR &DSORG5 OR X
               &DSORG6 OR &DSORG8).GENER1
         AIF   ('&BUFOFF' EQ 'L' OR '&BUFOFF' EQ '(L)').GEN5C2
&A4      SETA  &BUFOFF(1)
         AIF   (&A4 GT 99).GENER3
         DC    X'00',AL1(&BUFOFF)       USASCI,BUFOFF
         AGO   .GENCR
.GEN5C2  AIF   (&RECFM1 OR &RECFM0).GENER1
         DC    X'4004'                  USASCI,BUFOFF
         AGO   .GENCR
.GENER1  IHBERMAC 147,BUFOFF  BUFOFF INVALID FOR RECFM OR DSORG
         DC    H'0'
         AGO   .GENCR
.GENER3  IHBERMAC 47,,BUFOFF
         MEXIT
.GEN5C9  ANOP
         DC    H'0'                    DIRCT
         AGO   .GENCR
.GEN5C   ANOP
         DC    A(1)                    CNTRL, NOTE, POINT
         AIF   (T'&EROPT EQ 'O').GEN7C
         IHBERMAC 147,EROPT
         MEXIT
.*
.GENCR   AIF   (&DSORG6).GEN6A         ( IF BPAM)
         AIF   ('&LRECL' NE 'X').GEN6A
         AIF    (NOT(&MACRF1 OR &MACRF9)).GEN6B     (IF BSAM)
         AIF   (&MACRF4 OR &MACRFC).GEN6B          (IF  LOCATE MODE )
         DC    X'0000'    LRECL
         IHBERMAC  99,LRECL
         AGO   .GEN6G
.GEN6B   AIF   (T'&RECFM  NE 'O').GEN6C
         DC    X'8000'    LRECL=X
         MNOTE *,'***  IHB085A  LRECL IMPLIES VRE,RECFM OMITTED'
         AGO   .GEN6F
.GEN6C   AIF   (&RECFM1 AND &RECFM4  AND  NOT (&RECFM0)).GEN6D
         DC    X'0000'    LRECL
         IHBERMAC   99,LRECL
         AGO   .GEN6F
.GEN6D   ANOP
         DC    X'8000'        LRECL=X
         AGO   .GEN6F
.GEN6A   ANOP
         DC    AL2(&LRECL)    LRECL
.GEN6F   AIF   (&MACRF1 OR &MACRF9).GEN6G          GO TO  QSAM
         AGO   .GEN5C                              GO TO  BSAM
.*
.GEN6E   ANOP
*                            QSAM INTERFACE
         SPACE 1
         DC    A(1)                     RECAD
         AIF   (T'&BUFOFF NE 'O').GEN5C2A
         DC    H'0'                    QSWS
         AGO   .GENCR
.GEN6G   ANOP
&B0      SETB  ('&EROPT' EQ 'ACC')
&B1      SETB  ('&EROPT' EQ 'SKP')
&B2      SETB  ('&EROPT' EQ 'ABE')
         AIF   (&B0 OR &B1 OR &B2 OR T'&EROPT EQ 'O').GEN6L
         IHBERMAC 155,EROPT,&EROPT
.GEN6L   DC    BL1'&B0&B1&B2.00000'    EROPT
         DC    AL3(1)                  CNTRL
         DC    F'0'                    PRECL
         DC    A(1)                    EOB
         MEXIT
.GEN7A   AIF   (NOT &DSORG0).GEN7B     IF NOT INDEXED SEQUENTIAL
         SPACE 1
*                       BISAM-QISAM INTERFACE
         SPACE 1
         DC    BL1'&OPTCD0&OPTCD1&OPTCD2&OPTCD3&OPTCD4.0&OPTCD6&OPTCD7'
         DC    BL1'0000&MAC4&MAC5&MAC6&MAC7'     MAC
         DC    AL1(&NTM)               NTM
         DC    AL1(&CYLOFL)            CYLOFL
         DC    A(&SYNAD)               SYNAD
         DC    AL2(&RKP)               RKP
         DC    AL2(&BLKSIZE)           BLKSIZE
         DC    A(&MSWA)                MSWA
         DC    AL2(&SMSI)              SMSI
         DC    AL2(&SMSW)              SMSW
         DC    AL1(&NCP)               NCP
         DC    AL3(&MSHI)              MSHI
         DC    A(1)                    SETL
         DC    H'0'                    EXCD1, EXCD2
         DC    AL2(&LRECL)             LRECL
         DC    A(1)                    ESETL
         DC    A(1)                    LRAN
         DC    A(1)                    LWKN
         DC    A(1)                    RELSE
         DC    A(1)                    PUTX
         DC    A(1)                    RELEX
         DC    A(1)                    FREED
         DC    AL1(&DBUFNO)            DBUFNO
         DC    BL31'0'
         DC    BL32'0'
         DC    BL32'0'
         DC    BL20'0'
         DC    A(1)                    WKPT1
         DC    A(1)                    WKPT2
         DC    A(1)                    WKPT3
         DC    A(1)                    WKPT4
         DC    A(1)                    WKPT5
         DC    A(1)                    WKPT6
         MEXIT
.*
.GEN7B   AIF   (NOT &DSORG2).GEN7C     IF NOT BDAM
         SPACE 1
*                       BDAM INTERFACE
         SPACE 1
         DC    BL1'&OPTCD0.0&OPTCD2&OPTCD3&OPTCD4.0&OPTCD6&OPTCD7'
         DC    AL3(1)                  CHECK
         DC    A(&SYNAD)               SYNAD
         DC    H'0'
         DC    AL2(&BLKSIZE)           BLKSIZE
         DC    A(1)                    IOBSQ
         DC    A(1)                    SQND
         DC    A(1)                    IOBUQ
         DC    A(1)                    UQND
         DC    A(&LIMCT)               LIMCT
         DC    F'1'                    XCNT,XARG
         DC    A(1)                    DRDX
         DC    A(1)                    DFOR
         DC    A(1)                    DFBK
         DC    A(1)                    DYNB
         MEXIT
.GEN7B5  AIF   (NOT (&MACRF2 OR &MACRFA)).GEN7C
         AIF   ('&DEVD' NE 'BS' AND (T'&LERB EQ 'O' OR &B7) AND        X
               ('&DEVD' EQ 'BS' OR '&DEVD' EQ 'WT' OR &B4 OR &B5 OR    X
               &B6 OR &B7) AND NOT &B3 AND T'&READYQ EQ 'O').GEN7C
*                                                              @SA78498
         SPACE 1
*                       BTAM INTERFACE
         SPACE 1
         AIF   (T'&LERB EQ 'O' OR &B7).GEN7B7                   XA02235
         DC    A(&LERB)                LERB
         AIF   (T'&READYQ EQ 'O').BYTE56                        XA02235
         IHBERMAC 1016,LERB,READYQ  IHB276 LERB INCOMP W READYQ XA02235
         AGO   .BYTE56
.GEN7B7  AIF   (T'&READYQ EQ 'O').NOLERB                        XA02235
         AIF   ('&DEVD' EQ 'BS' OR '&DEVD' EQ 'WT').GEN7B8     @SA89498
         DC    X'02',AL3(&READYQ)      READYQ
         AGO   .BYTE56                                          XA02235
.GEN7B8  IHBERMAC 1016,DEVD,READYQ  IHB276 DEVD INCOMP W READYQ XA02235
.NOLERB  DC    A(0)                    LERB
.BYTE56  AIF   ('&DEVD' NE 'BS').GEN7C                          XA02235
&BA2     SETA  1
&BS3     SETB  1
         AIF   ('&MODE' EQ '').CHKCODE
&BA1     SETA  (N'&MODE)
&BS2     SETB  ('&MODE(&BA2)' EQ 'IBC')
         AIF   ('&MODE(&BA2)' NE '' AND NOT &BS2).ERROR
         AIF   (&BA2 EQ &BA1).CHKCODE
&BA2     SETA  &BA2+1
         AIF   ('&MODE(&BA2)' NE 'CNTRL').REMOTE
&BS3     SETB  0
.REMOTE  AIF   ('&MODE(&BA2)' NE '' AND &BS3).ERROR
         AIF   (&BA2 EQ &BA1).CHKCODE
&BA2     SETA  &BA2+1
&BS4     SETB  ('&MODE(&BA2)' EQ 'B')
         AIF   ('&MODE(&BA2)' NE 'A' AND '&MODE(&BA2)' NE ''           C
               AND NOT &BS4).ERROR
         AIF   (&BA2 EQ &BA1).CHKCODE
&BA2     SETA  &BA2+1
&BS5     SETB  ('&MODE(&BA2)' EQ 'B')
         AIF   ('&MODE(&BA2)' NE 'A' AND '&MODE(&BA2)' NE ''           C
               AND NOT &BS5).ERROR
.CHKCODE ANOP
&BS6     SETB  ('&CODE' EQ 'EBCDIC' OR '&CODE' EQ '')
&BS7     SETB  ('&CODE' EQ 'USASCII')
&BS8     SETB  ('&CODE' EQ 'TRANSC')
         AIF   (NOT (&BS6 OR &BS7 OR &BS8)).ERROR2
         DC    BL1'0&BS2&BS4.0&BS5.000'          MODE
         DC    BL1'&BS3.0&BS8&BS7&BS8&BS7.00'    MAS,CODE
         DC    XL26'0'                           CONTROL CHARS
         DC    4F'0'                    RESERVED
         SPACE 1
         AGO   .GEN7C
.ERROR   IHBERMAC 45,,&MODE(&BA2)
         MEXIT
.ERROR2  MNOTE 12,'***  IHB002  INVALID CODE OPERAND SPECIFIED-&CODE'
.TCAM3A  ANOP
&LGTH    SETA  0
&INCR    SETA  1
&NUMENT  SETA  N'&INVLIST
&NUMENT  SETA  &NUMENT+2
&NUMENT  SETA  &NUMENT/3
         DC    AL1(&NUMENT)             ILCT
         AGO   .IN
.TCAM3B  ANOP
         AIF   (T'&BUFSIZE EQ 'O').TCAM31
         AIF   (T'&BUFSIZE NE 'N').TCAM3C                        M4043
         AIF   ('&BUFSIZE' GT '35' AND '&BUFSIZE' LE '65535').TCAM3C
         IHBERMAC 180,BUFSIZE,0
.TCAM31  DC    AL2(0)                   BUFSIZE
         AGO   .TCAM3CA
.TCAM3C  DC    AL2(&BUFSIZE)            BUFSIZE
.TCAM3CA ANOP
&TC1     SETA  4
.TCAM3C2 AIF   (&TC1 EQ 0).TCAM3D8
       AIF (T'&RESERVE(&TC1) EQ 'O' OR T'&RESERVE(&TC1) EQ 'U').TCAM3D2
         AIF   (&RESERVE(&TC1) LE 255).TCAM3D2
         IHBERMAC 180,RESERVE,0
.TCAM3D  DC    A(0)                     RESERVE
         AGO   .LOOPA
.TCAM3D2 AIF   (T'&RESERVE(&TC1) EQ 'O').TCAM3D4
&TC(&TC1) SETC '&RESERVE(&TC1)'
         AGO   .TCAM3D6
.TCAM3D4 ANOP
&TC(&TC1) SETC  '0'
.TCAM3D6 ANOP
&TC1     SETA  &TC1-1
         AGO   .TCAM3C2
.TCAM3D8 DC    AL1(&TC(1))         RESERVE
         DC    AL1(&TC(2))         RESERVE
         DC    AL1(&TC(3))         RESERVE
         DC    AL1(&TC(4))         RESERVE
.LOOPA   ANOP
         AIF   (T'&INVLIST NE 'O').LOOP
         DC    A(1)                     INVLIST
         IHBERMAC 24
         AGO   .GEN7C
.LOOP    AIF   ('&LGTH' EQ '&NUMENT').GEN7C
         AIF   ('&INVLIST(&INCR+1)' EQ 'B').SETFCE
&INTFACE SETA  0
         AIF   ('&INVLIST(&INCR+1)' EQ 'A' OR '&INVLIST(&INCR+1)' EQ ''*
               ).ISA1
         IHBERMAC  183,INTERFACE,A
.ISA1    AIF   ('&INCR+1' LE '&LGTH').DCLR
         AGO   .TSTCDE
.SETFCE  ANOP
&INTFACE SETA  20
.TSTCDE  AIF   ('&INVLIST(&INCR+2)' EQ 'B').SETCDE
         AIF   ('&INVLIST(&INCR+2)' EQ 'A' OR '&INVLIST(&INCR+2)' EQ ''*
               ).ISA2
         IHBERMAC   183,CODE,A
.ISA2    ANOP
&ICDE    SETA  &INTFACE
         AGO   .DCLR
.SETCDE  ANOP
&ICDE    SETA  &INTFACE+8
.DCLR    DC    XL1'&ICDE'
         DC    AL3(&INVLIST(&INCR))
&INCR    SETA  &INCR+3
&LGTH    SETA  &LGTH+1
         AGO   .LOOP
.GEN7C   MEND
         MACRO
&NAME    GETMAIN &MODE,&LV=,&LA=,&A=,&SP=,&MF=I,&HIARCHY=
         LCLA  &NO
         LCLB  &B,&C,&D,&E,&F
         LCLC  &GNAME,&AA
.*0000000400,012200,013000-013200,016800-017600,026600-026800      LC0A
.*    047000                                                       LC0A
&GNAME   SETC  'IHB'.'&SYSNDX'
         AIF   ('&MODE' EQ '' AND '&MF' EQ 'I').ERROR1
         AIF   ('&LV' NE '' AND '&LA' NE '').ERROR5
         AIF   ('&MODE' EQ '').CONT1
         AIF   ('&MODE'(1,1) EQ 'E' AND '&LA' NE '').ERROR6
         AIF   ('&MODE' EQ 'R' AND '&LA' NE '').ERROR6
         AIF   ('&MODE'(1,1) EQ 'L' AND '&LV' NE '').ERROR4
         AIF   ('&MODE'(1,1) EQ 'V' AND '&LV' NE '').ERROR4
         AIF   ('&HIARCHY' EQ '' OR '&HIARCHY' EQ '0' OR '&HIARCHY' EQ X
               '1').CONT1
         IHBERMAC 195
         MEXIT
.CONT1   ANOP
         AIF   ('&MF' EQ 'L').LROUT
         AIF   ('&MF' EQ 'I').IROUT
         AIF   (N'&MF LE 1).ERROR2
         AIF   ('&MF(1)' NE 'E').ERROR2
&NAME    IHBINNRA &MF(2)
.CONTA   AIF   ('&LV' EQ '').CONTB
         AIF   ('&LV'(1,1) EQ '(').ISAREG
         AIF   (T'&LV EQ 'N').CONTAA
.CONTBB  ANOP
         CNOP  0,4
         B     *+8                               BRANCH AROUND LENGTH
         DC    A(&LV)                            LENGTH
         MVC   0(4,1),*-4                        MOVE LENGTH INTO LIST
         AGO   .CONTB
.CONTAA  AIF   (&LV GT 4095).CONTBB
         LA    14,&LV.(0,0)                      PICK UP LENGTH
         ST    14,0(1,0)                         STORE INTO LIST
         AGO   .CONTB
.ISAREG  ANOP
         ST    &LV(1),0(1,0)                     STORE LENGTH INTO LIST
.CONTB   AIF   ('&MODE' EQ '').CONTC
         AIF   ('&MODE'(1,1) NE 'E' AND '&LV' NE '').ERROR4
         AIF   ('&MODE' NE 'EC').ISAU
         MVI   8(1),X'20'                        SET MODE TO EC
         AGO   .CONTC
.ISAU    AIF   ('&MODE' NE 'EU').CONTC
         MVI   8(1),X'00'                        SET MODE TO EU
.CONTC   AIF   ('&LA' EQ '').CONTD
         AIF   ('&LA'(1,1) EQ '(').ISAREGA
         LA    14,&LA                            PICK UP LIST ADDRESS
         ST    14,0(1,0)                         STORE INTO PARAM LIST
         AGO   .CONTD
.ISAREGA ST    &LA(1),0(1,0)                     STORE LA IN PARAM LIST
.CONTD   AIF   ('&MODE' EQ '').CONTE
         AIF   ('&MODE' EQ 'EU' OR '&MODE' EQ 'EC').CONTE
         AIF   ('&MODE' NE 'LC').CONTF
         MVI   8(1),X'A0'                        SET MODE TO LC
         AGO   .CONTE
.CONTF   AIF   ('&MODE' NE 'LU').CONTG
         MVI   8(1),X'80'                        SET MODE TO LU
         AGO   .CONTE
.CONTG   AIF   ('&MODE' NE 'VC').CONTH
         MVI  8(1),X'E0'                         SET MODE TO VC
         AGO   .CONTE
.CONTH   AIF   ('&MODE' NE 'VU').ERROR7
         MVI   8(1),X'C0'                        SET MODE TO VU
.CONTE   AIF   ('&A' EQ '').HID
         AIF   ('&A'(1,1) EQ '(').ISAREGB
         LA    14,&A                             LOAD AREA LIST ADDRESS
         ST    14,4(1,0)                         STORE INTO PARAM LIST
         AGO   .HID
.ISAREGB ST    &A(1),4(1,0)                      STORE INTO PARAM LIST
.HID     AIF   ('&HIARCHY' EQ '').CONTI
         MVI   4(1),&HIARCHY                     MOVE IN HIAR BYTE
.CONTI   AIF   ('&SP' EQ '').FINI
         AIF   ('&SP'(1,1) EQ '(').ISAREGC
         MVI   9(1),&SP                          MOVE IN SUBPOOL VALUE
         AGO   .FINI
.ISAREGC STC   &SP(1),9(1,0)                     STORE SUBPOOL VALUE
.FINI    SVC   4                                 ISSUE GETMAIN SVC
         MEXIT
.LROUT   AIF   ('&LV' EQ  '').CONTJ
         AIF   ('&LV'(1,1) EQ '(').ERROR3
&NAME    DC    A(&LV)                            LENGTH
         AGO   .CONTL
.CONTJ   AIF   ('&LA' EQ '').CONTK
         AIF   ('&LA'(1,1) EQ '(').ERROR3
&NAME    DC    A(&LA)                            ADDR. OF LENGTH LIST
         AGO   .CONTL
.CONTK   ANOP
&NAME    DC   A(0)                               LA OR LU
.CONTL   AIF   ('&HIARCHY' EQ '').NOHID
         DC    AL1(&HIARCHY)
         AGO   .CONTLL
.NOHID   DC    AL1(0)                            HIARCHY FILL
.CONTLL  AIF   ('&A' EQ '').CONTM
         AIF   ('&A'(1,1) EQ '(').ERROR3
         DC    AL3(&A)                           ADDR. OF ADDR. LIST
         AGO   .CONTN
.CONTM   DC    AL3(0)                            ADDR. OF ADDR. LIST
.CONTN   AIF   ('&MODE' EQ '').CONTO
         AIF   ('&MODE' NE 'EC').CONTQ
         DC    X'20'                             EC MODE
         AGO   .CONTSP
.CONTQ   AIF   ('&MODE' NE 'EU').CONTP
         DC    X'00'                             EU MODE
         AGO   .CONTSP
.CONTP   AIF   ('&MODE' NE 'LC').CONTS
         DC    X'A0'                             LC MODE
         AGO   .CONTSP
.CONTS   AIF   ('&MODE' NE 'LU').CONTR
         DC    X'80'                             LU MODE
         AGO   .CONTSP
.CONTR   AIF   ('&MODE' NE 'VC').CONTT
         DC    X'E0'                             VC MODE
         AGO   .CONTSP
.CONTT   AIF   ('&MODE' NE 'VU').ERROR7
         DC    X'C0'                             VU MODE
         AGO   .CONTSP
.CONTO   DC    X'00'                             MODE
.CONTSP  AIF   ('&SP' EQ '').CONTU
         AIF   ('&SP'(1,1) EQ '(').ERROR3
         DC    AL1(&SP)                          SUBPOOL VALUE
         AGO   .FINISH
.CONTU   DC    AL1(0)                            SUBPOOL VALUE
.FINISH  MEXIT
.IROUT   AIF   ('&MODE' EQ 'R').RROUT
         AIF   ('&LV' EQ '' AND '&LA' EQ '').ERROR8
         CNOP  0,4
&NAME    BAL   1,*+14                            BRANCH AROUND LIST
         AIF   ('&LV' EQ '').CNTA
         AIF   ('&LV'(1,1) EQ '(').CNTB
         DC    A(&LV)                            LENGTH
         AGO   .CNTC
.CNTB    DC    A(0)                              LENGTH
&B       SETB  1
         AGO   .CNTC
.CNTA    AIF   ('&LA'(1,1) EQ '(').CNTD
         DC    A(&LA)                            ADDR. OF LENGTH LIST
         AGO   .CNTC
.CNTD    DC    A(0)                              ADDR. OF LENGTH LIST
&C       SETB  1
.CNTC    AIF   ('&A' EQ '').ERROR8
         AIF   ('&A'(1,1) EQ '(').CNTE
         AIF   ('&HIARCHY' EQ '' OR '&HIARCHY' EQ '0').CONTCCC
.CNTCC   DC    AL1(&HIARCHY)                     HIAR BYTE
         DC    AL3(&A)                           ADDR. OF ADDR. LIST
         AGO   .CNTF
.CONTCCC DC    A(&A)                  ADDR. OF ADDR. LIST
         AGO   .CNTF
.CNTE    DC    A(0)                              ADDR. OF ADDR. LIST
&D       SETB  1
.CNTF    AIF   ('&MODE' NE 'EU').CNTG
         DC    X'00'                             EU MODE
         AGO   .CNTSP
.CNTG    AIF   ('&MODE' NE 'EC').CNTH
         DC    X'20'                             EC MODE
         AGO   .CNTSP
.CNTH    AIF   ('&MODE' NE 'LU').CNTI
         DC    X'80'                             LU MODE
         AGO   .CNTSP
.CNTI    AIF   ('&MODE' NE 'LC').CNTJ
         DC    X'A0'                             LC MODE
         AGO   .CNTSP
.CNTJ    AIF   ('&MODE' NE 'VU').CNTK
         DC   X'C0'                              VU MODE
         AGO   .CNTSP
.CNTK    AIF   ('&MODE' NE 'VC').ERROR7
         DC   X'E0'                              VC MODE
.CNTSP   AIF   ('&SP' EQ '').CNTL
         AIF   ('&SP'(1,1) EQ '(').ISAREGQ
         DC    AL1(&SP)                          SUBPOOL VALUE
         AGO   .CNTM
.ISAREGQ DC    AL1(0)                            SUBPOOL VALUE
         STC   &SP(1),9(1,0)                     STORE SP INTO LIST
         AGO   .CNTM
.CNTL    DC    AL1(0)                            SUBPOOL VALUE
.CNTM    AIF   (NOT &B).CNTN
         ST    &LV(1),0(1,0)                     STORE LENGTH INTO LIST
         AGO   .CNTO
.CNTN    AIF   (NOT &C).CNTO
         ST    &LA(1),0(1,0)                     STORE LA INTO LIST
.CNTO    AIF   (NOT &D).CNTP
         ST    &A(1),4(1,0)                      STORE INTO PARAM LIST
         AIF   ('&HIARCHY' EQ '' OR '&HIARCHY' EQ '0').CNTP
         MVI   4(1),&HIARCHY                     MOVE IN HIAR BYTE
.CNTP    SVC   4                                 ISSUE GETMAIN SVC
         MEXIT
.RROUT   AIF   ('&A' NE '').ERROR9
         AIF   ('&LV'(1,1) EQ '(').ISARGA
         AIF   ('&SP' EQ '').CTUA
         AIF   ('&SP'(1,1) EQ '(').ISARGB
         CNOP  0,4
&NAME    BAL   1,*+8                             BRANCH AROUND SP+LV
         DC    AL1(&SP)                          SUBPOOL VALUE
         DC    AL3(&LV)                          LENGTH
         L     0,0(1,0)                          LOAD SP AND LV
         AIF   ('&HIARCHY' EQ '1').CONTHH
         SVC   10                                ISSUE GETMAIN SVC
         MEXIT
.CTUA    AIF   (T'&LV EQ 'N').CONTCC
.CTUAA   CNOP  0,4
&NAME    BAL   1,*+8                             BRANCH AROUND LENGTH
         DC    A(&LV)                            LENGTH
         L     0,0(1,0)                          LOAD LENGTH
         AIF   ('&HIARCHY' EQ '1').CONTHH
         SVC   10                                ISSUE GETMAIN SVC
         MEXIT
.CONTCC  AIF   (&LV GT 4095).CTUAA
&NAME    LA    0,&LV.(0,0)                       LOAD LENGTH
         AIF   ('&HIARCHY' EQ '1').CONTHH
         BAL   1,*+4                             INDICATE GETMAIN
         SVC   10                                ISSUE GETMAIN SVC
         MEXIT
.ISARGB  AIF   (T'&LV EQ 'N').CONTEE
.CONTFF  CNOP  0,4
&NAME    BAL   1,*+8                             BRANCH AROUND LENGTH
         DC    A(&LV)                            LENGTH
         LR    0,&SP(1)                          PICK UP SUBPOOL
         SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE
         O     0,0(1,0)                          PACK SP AND LV
         AIF   ('&HIARCHY' EQ '1').CONTHH
         SVC   10                                ISSUE GETMAIN SVC
         MEXIT
.CONTEE  AIF   (&LV GT 4095).CONTFF
&NAME    LR    0,&SP(1)                          PICK UP SUBPOOL
         SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE
         LA    1,&LV.(0,0)                       LOAD LENGTH
         OR    0,1                               PACK SP AND LV
         AIF   ('&HIARCHY' EQ '1').CONTHH
         BAL   1,*+4                             INDICATE GETMAIN
         SVC   10                                ISSUE GETMAIN SVC
         MEXIT
.ISARGA  AIF   ('&LV(1)' EQ '0').ZEROUT
         AIF   ('&SP' EQ '').CTUB
         AIF   ('&SP'(1,1) EQ '(').ISARGC
&NAME    LA    0,&SP.(0,0)                       PICK UP SUBPOOL
         SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE
         OR    0,&LV(1)                          PACK SP AND LV
         AIF   ('&HIARCHY' EQ '1').CONTHH
         BAL   1,*+4                             INDICATE GETMAIN
         SVC   10                                ISSUE GETMAIN SVC
         MEXIT
.CTUB    ANOP
&NAME    LR    0,&LV(1)                          LOAD LENGTH
         AIF   ('&HIARCHY' EQ '1').CONTHH
         BAL  1,*+4                              INDICATE GETMAIN
         SVC   10                                ISSUE GETMAIN SVC
         MEXIT
.CONTHH  CNOP  0,4
         L     1,*+8                             PUT NEG. LCS IN R1
         BC    15,*+8
         DC    XL4'80D3C3E3'
         SVC   10
         MEXIT
.ISARGC  ANOP
&NAME    LR    0,&SP(1)                          PICK UP SUBPOOL
         SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE
         OR    0,&LV(1)                          PACK SP AND LV
         AIF   ('&HIARCHY' EQ '1').CONTHH
         BAL   1,*+4                             INDICATE GETMAIN
         SVC   10                                ISSUE GETMAIN SVC
         MEXIT
.ZEROUT  ANOP
         AIF   ('&HIARCHY' EQ '1').HIAREG
&NAME    BAL   1,*+4                             INDICATE GETMAIN
         SVC   10                                ISSUE GETMAIN SVC
         AGO   .CONTGG
.HIAREG  ANOP
         CNOP  0,4
&NAME    L     1,*+8                             PUT NEG. LCS IN R1
         BC    15,*+8
         DC    XL4'80D3C3E3'
         SVC   10
.CONTGG  AIF   ('&SP' EQ '').EXIT
         IHBERMAC 92
.EXIT    MEXIT
.ERROR1  IHBERMAC 17
         MEXIT
.ERROR2  IHBERMAC 35,,&MF
         MEXIT
.ERROR3  IHBERMAC 69
         MEXIT
.ERROR4  IHBERMAC 89
         MEXIT
.ERROR5  IHBERMAC 91
         MEXIT
.ERROR6  IHBERMAC 90
         MEXIT
.ERROR7  IHBERMAC 45,,&MODE
         MEXIT
.ERROR8  IHBERMAC 01
         MEXIT
.ERROR9  IHBERMAC 93
         MEXIT                                                BC A45446
.ERROR10 IHBERMAC 46,,&SP,1                                   BC A45446
         MEND
         MACRO
&NAME    FREEMAIN &MODE,&LV=,&LA=,&A=,&SP=,&MF=I
         LCLB  &AA,&B,&C,&M(3)
         LCLA  &CTR
         AIF   ('&MODE' EQ '' AND '&MF' EQ 'I').ERROR1
         AIF   ('&LV' NE '' AND '&LA' NE '').ERROR5
         AIF   ('&MODE' EQ '').CONTA
         AIF   ('&MODE' EQ 'E' AND '&LA' NE '').ERROR6
         AIF   ('&MODE' EQ 'R' AND '&LA' NE '').ERROR6
         AIF   ('&MODE' EQ 'L' AND '&LV' NE '').ERROR4
         AIF   ('&MODE' EQ 'V' AND '&LV' NE '').ERROR4
         AIF   ('&MODE' EQ 'V' AND '&LA' NE '').ERROR6
.CONTA   AIF   ('&MF' NE 'I').CONTB
         AIF   ('&MODE' EQ 'E' AND '&LV' EQ '').ERROR8
         AIF   ('&MODE' EQ 'L' AND '&LA' EQ '').ERROR8
         AIF   ('&MODE' NE 'R' AND '&A' EQ '').ERROR8
.CONTB   AIF   ('&MF' EQ 'L').LROUT
         AIF   ('&MF' EQ 'I').IROUT
         AIF   (N'&MF LE 1).ERROR2
         AIF   ('&MF(1)' NE 'E').ERROR2
&NAME    IHBINNRA &MF(2)
.CONTC   AIF   ('&MODE' EQ '').CONTD
&M(1)    SETB  ('&MODE' EQ 'E')
&M(2)    SETB  ('&MODE' EQ 'L')
&M(3)    SETB  ('&MODE' EQ 'V')
         AIF   (&M(1)+&M(2)+&M(3) NE 1).ERROR7
&CTR     SETA  128*&M(2)+192*&M(3)
         MVI   8(1),&CTR                         MOVE MODE BYTE TO LIST
.CONTD   AIF   ('&LV' EQ '').CONTG
         AIF   ('&LV'(1,1) EQ '(').ISAREGA
         AIF   (T'&LV EQ 'N').CONTAA
.CONTBB  ANOP
         B     *+8                               BRANCH AROUND LENGTH
         DC    AL4(&LV)                          LENGTH
         MVC   0(4,1),*-4                        MOVE LENGTH INTO LIST
         AGO   .CONTG
.CONTAA  AIF   (&LV GT 4095).CONTBB
         LA    14,&LV.(0,0)                      PICK UP LENGTH
         ST    14,0(1,0)                         STORE LENGTH INTO LIST
         AGO   .CONTG
.ISAREGA ST    &LV(1),0(1,0)                     STORE LENGTH INTO LIST
.CONTG   AIF   ('&LA' EQ '').CONTH
         AIF   ('&LA'(1,1) EQ '(').ISAREGB
         LA    14,&LA                            PICK UP LIST ADDRESS
         ST    14,0(1,0)                         STORE LA INTO LIST
         AGO   .CONTH
.ISAREGB ST    &LA(1),0(1,0)                     STORE LA INTO LIST
.CONTH   AIF   ('&A' EQ '').CONTI
         AIF   ('&A'(1,1) EQ '(').ISAREGC
         LA    14,&A                             PICK UP AREA LIST ADDR
         ST    14,4(1,0)                         STORE INTO LIST
         AGO   .CONTI
.ISAREGC ST    &A(1),4(1,0)                      STORE A-ADDR INTO LIST
.CONTI   AIF   ('&SP' EQ '').FINI
         AIF   ('&SP'(1,1) EQ '(').ISAREGD
         MVI   9(1),&SP                          MOVE SUBPOOL INTO LIST
         AGO   .FINI
.ISAREGD STC   &SP(1),9(1,0)                     STORE SUBPOOL IN LIST
.FINI    SVC   5                                 ISSUE FREEMAIN SVC
         MEXIT
.LROUT   AIF   ('&LV' EQ '').CONTJ
         AIF   ('&LV'(1,1) EQ '(').ERROR3
&NAME    DC    A(&LV)                            LENGTH
         AGO   .CONTL
.CONTJ   AIF   ('&LA' EQ '').CONTK
         AIF   ('&LA'(1,1) EQ '(').ERROR3
&NAME    DC    A(&LA)                            LIST ADDRESS
         AGO   .CONTL
.CONTK   ANOP
&NAME    DC    F'0'
.CONTL   AIF   ('&A' EQ '').CONTM
         AIF   ('&A'(1,1) EQ '(').ERROR3
         DC    A(&A)                             AREA LIST ADDRESS
         AGO   .CONTN
.CONTM   DC    F'0'                              AREA LIST ADDRESS
.CONTN   AIF   ('&MODE' EQ '').CONTO
&M(1)    SETB  ('&MODE' EQ 'E')
&M(2)    SETB  ('&MODE' EQ 'L')
&M(3)    SETB  ('&MODE' EQ 'V')
         AIF   (&M(1)+&M(2)+&M(3) NE 1).ERROR7
&CTR     SETA  128*&M(2)+192*&M(3)
         DC    AL1(&CTR)                         MODE BYTE
         AGO   .CONTSP
.CONTO   DC    AL1(0)                            MODE BYTE
.CONTSP  AIF   ('&SP' EQ '').CONTU
         AIF   ('&SP'(1,1) EQ '(').ERROR3
         DC    AL1(&SP)                          SUBPOOL VALUE
         AGO   .FINISH
.CONTU   DC    AL1(0)                            SUBPOOL VALUE
.FINISH  MEXIT
.IROUT   AIF   ('&MODE' EQ 'R').RROUT
         CNOP  0,4
&NAME    BAL   1,*+14                            BRANCH AROUND LIST
         AIF   ('&LV' EQ '').CNTA
         AIF   ('&LV'(1,1) EQ '(').CNTB
         DC    A(&LV)                            LENGTH
         AGO   .CNTC
.CNTB    DC    A(0)                              LENGTH
&AA      SETB  1
         AGO   .CNTC
.CNTA    AIF   ('&LA' EQ '').CNTDD
         AIF   ('&LA'(1,1) EQ '(').CNTD
         DC    A(&LA)                            LIST ADDRESS
         AGO   .CNTC
.CNTD    ANOP
&B       SETB  1
.CNTDD   DC    A(0)
.CNTC    AIF   ('&A'(1,1) EQ '(').CNTE
         DC    A(&A)                             AREA LIST ADDRESS
         AGO   .CNTF
.CNTE    DC    A(0)                              AREA LIST ADDRESS
&C       SETB  1
.CNTF    ANOP
&M(1)    SETB  ('&MODE' EQ 'E')
&M(2)    SETB  ('&MODE' EQ 'L')
&M(3)    SETB  ('&MODE' EQ 'V')
         AIF   (&M(1)+&M(2)+&M(3) NE 1).ERROR7
&CTR     SETA  128*&M(2)+192*&M(3)
         DC    AL1(&CTR)                         MODE BYTE
.CNTSP   AIF   ('&SP' EQ '').CNTL
         AIF   ('&SP'(1,1) EQ '(').ISAREGQ
         DC    AL1(&SP)                          SUBPOOL VALUE
         AGO   .CNTM
.ISAREGQ DC    AL1(0)                            SUBPOOL VALUE
         STC   &SP(1),9(1,0)                     STORE SUBPOOL
         AGO   .CNTM
.CNTL    DC    AL1(0)                            SUBPOOL VALUE
.CNTM    AIF   (NOT &AA).CNTN
         ST    &LV(1),0(1,0)                     STORE LENGTH IN LIST
         AGO   .CNTO
.CNTN    AIF   (NOT &B).CNTO
         ST    &LA(1),0(1,0)                     STORE LA INTO LIST
.CNTO    AIF   (NOT &C).CNTP
         ST    &A(1),4(1,0)                      STORE A-ADDR INTO LIST
.CNTP    SVC   5                                 ISSUE FREEMAIN SVC
         MEXIT
.RROUT   AIF   ('&LV' EQ '' AND '&A' EQ '').SPROUT
         AIF   ('&A' EQ '').ERROR8
         AIF   ('&LV' EQ '').ERROR8
         AIF   ('&LV' EQ '(0)' AND '&SP' NE '').ERROR9
         AIF   ('&LV'(1,1) EQ '(').ISARGA
         AIF   ('&SP' EQ '').CTUA
         AIF   ('&SP'(1,1) EQ '(').ISARGB
         CNOP  0,4
&NAME    B     *+8                               BRANCH AROUND SP+LV
         DC    AL1(&SP)                          SUBPOOL VALUE
         DC    AL3(&LV)                          LENGTH
         L     0,*-4                             LOAD SP AND LV
         AGO   .CTUD
.CTUA    AIF   (T'&LV EQ 'N').CONTCC
.CTUAA   CNOP  0,4
&NAME    B     *+8                               BRANCH AROUND LENGTH
         DC    A(&LV)                            LENGTH
         L     0,*-4                             LOAD LENGTH
.CTUD    AIF   ('&A'(1,1) EQ '(').ISARGD
         L     1,&A                              LOAD AREA ADDRESS
.CTUC    LA    1,0(1)                       CLEAR THE HIGH ORDER BYTE
.CTUCX   SVC   10                      ISSUE FREEMAIN SVC         P2504
         MEXIT
.CONTCC  AIF   (&LV GT 4095).CTUAA
&NAME    LA    0,&LV.(0,0)                       LOAD LENGTH
         AGO   .CTUD
.ISARGD  AIF   ('&A(1)' EQ '1').CTUC
         LR    1,&A(1)                           LOAD AREA ADDRESS
         AGO   .CTUC
.ISARGB  AIF   (T'&LV EQ 'N').CONTEE
.CONTFF  CNOP  0,4
&NAME    B     *+8                               BRANCH AROUND LENGTH
         DC    A(&LV)                            LENGTH
         LR    0,&SP(1)                          PICK UP SUBPOOL
         SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE
         O     0,*-10                            PACK SP AND LV
         AGO   .CTUD
.CONTEE  AIF   (&LV GT 4095).CONTFF
&NAME    LR    0,&SP(1)                          PICK UP SUBPOOL
         SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE
         LA    14,&LV.(0,0)                      PICK UP LENGTH
         OR    0,14                              PACK SP AND LV
         AGO   .CTUD
.ISARGA  ANOP
         AIF   ('&NAME' EQ '').UNNAMED
&NAME    DS    0H
.UNNAMED AIF   ('&LV(1)' EQ '0').CTUD
         AIF   ('&SP' EQ '').CTUG
         AIF   ('&SP'(1,1) EQ '(').CTUGP
         LA    0,&SP.(0,0)                       LOAD SUBPOOL
         AGO   .CTUGPP
.CTUGP   LR    0,&SP(1)                          LOAD SUBPOOL
.CTUGPP  SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE
         OR    0,&LV(1)                          PACK SP AND LV
         AGO   .CTUD
.CTUG    LR    0,&LV(1)                          LOAD LENGTH
         AGO   .CTUD
.SPROUT  AIF   ('&SP' EQ '').ERROR8
         AIF   ('&SP'(1,1) EQ '(').ISARGQ
&NAME    LA    0,&SP.(0,0)                       LOAD SUBPOOL
         SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE
         SR    1,1                               INDICATE SP RELEASE
         AGO   .CTUCX                                            P2504
.ISARGQ  AIF   ('&NAME' EQ '').NONE
&NAME    DS    0H
.NONE    AIF   ('&SP(1)' EQ '0').CTUXX
         LR    0,&SP(1)                          LOAD SUBPOOL
         SLL   0,24(0)                           SHIFT TO HI-ORDER BYTE
.CTUXX   SR    1,1                               INDICATE SP RELEASE
         AGO   .CTUCX                                            P2504
.ERROR1  IHBERMAC 17
         MEXIT
.ERROR2  IHBERMAC 35,,&MF
         MEXIT
.ERROR3  IHBERMAC 69
         MEXIT
.ERROR4  IHBERMAC 89
         MEXIT
.ERROR5  IHBERMAC 91
         MEXIT
.ERROR6  IHBERMAC 90
         MEXIT
.ERROR7  IHBERMAC 45,,&MODE
         MEXIT
.ERROR8  IHBERMAC 01
         MEXIT
.ERROR9  IHBERMAC 92
         MEXIT                                                BC A45446
.ERROR10 IHNERMAC 46,,&SP,1                                   BC A45446
         MEND
         MACRO
&NAME    IHBINNRA  &A,&B,&C,&D,&E                                  LC0A
.*0000000360                                                       LC0A
         LCLA  &ASUM                                              19015
         LCLB  &BIT(2)                                            19015
         LCLC  &GVALU                                              LC0A
&GVALU   SETC  'IHB'.'&SYSNDX'                                     LC0A
         AIF   ('&E' EQ '').NOPT                                  19015
&BIT(1)  SETB  ('&E' EQ 'REWIND')                                 19015
&BIT(2)  SETB  ('&E' EQ 'LEAVE')                                  19015
&ASUM    SETA  &BIT(1)*32+&BIT(2)*48                              19015
         AIF   ('&A' EQ '(1)' OR '&A'(1,1) EQ '(').LDREG          19015
         CNOP  0,4                                                19015
&NAME    BAL   1,*+8                    BR AROUND LIST            19015
         DC    AL1(&ASUM)               OPTION BYTE               19015
         DC    AL3(&A(1))                                         19015
         L     1,0(1)                   LOAD REG 1                19015
         AGO   .END                                               19015
.LDREG   ANOP                                                     19015
         AIF   ('&A' EQ '(1)').ORIT                               19015
         CNOP  0,4                                                19015
&NAME    BAL   1,*+8                    BR AROUND LIST            19015
         DC    AL1(&ASUM)               OPTION BYTE               19015
         DC    AL3(0)                                             19015
         L     1,0(1)                   LOAD R 1 WITH OPTION BYTE 19015
         OR    1,&A(1)                  OR IN DCB ADDRESS         19015
         AGO   .END                                               19015
.ORIT    ANOP                                                     19015
         CNOP  0,4                                                19015
&NAME    O     1,*+8                    SET OPTION BYTE IN REG 1  19015
         B     *+8                                                19015
         DC    AL1(&ASUM)               OPTION BYTE               19015
         DC    AL3(0)                                             19015
         AGO   .END                                               19015
.NOPT    AIF   ('&A' EQ '' OR '&A' EQ '(1)').NAMEIT               19015
         AIF   ('&A'(1,1) EQ '(').REGA
         AIF   ('&C' NE '').HOH1                                   LC0A
&NAME    LA    1,&A                              LOAD PARAMETER REG 1
         AGO   .CHKB
.REGA    ANOP
&NAME    LR    1,&A(1)                           LOAD PARAMETER REG 1
         AGO   .CHKB
.NAMEIT  AIF   ('&NAME' EQ '').CHKB
&NAME    DS    0H
.CHKB    AIF   ('&B' EQ '' OR '&B' EQ '(0)').END
         AIF   ('&B'(1,1) EQ '(').REGB
         AIF   ('&A' EQ '').GEN                                    LC0A
         AIF   ('&D' EQ '1').END                                   LC0A
.GEN     ANOP                                                      LC0A
         LA    0,&B                              LOAD PARAMETER REG 0
         AGO   .END
.HOH1    ANOP                                                      LC0A
         AIF   ('&C' EQ '1').H1                                    LC0A
&NAME    L     0,&GVALU  LOAD FOR HIARCHY ZERO                     LC0A
         AGO   .HCHK                                               LC0A
.H1      ANOP                                                      LC0A
&NAME    L     0,&GVALU.A    LOAD FOR HIARCHY ONE                  LC0A
.HCHK    ANOP                                                      LC0A
         CNOP  2,4                                                 LCOA
         LA    1,&A                                                LC0A
         OR    1,0                                                 LC0A
         AIF   ('&D' NE '1').TTT                                   LC0A
         LA    0,*+8                                               LC0A
         B     *+16                                                LC0A
         DC    CL8'&B'                                             LC0A
         AGO   .SSS                                                LC0A
.TTT     ANOP                                                      LC0A
         B     *+8                                                 LC0A
.SSS     AIF   ('&C' EQ '1').L1                                    LC0A
&GVALU   EQU   *                                                   LC0A
         DC    X'01000000'                                         LC0A
         AGO   .CHKB                                               LC0A
.L1      ANOP                                                      LC0A
&GVALU.A EQU   *                                                   LC0A
         DC    X'02000000'                                         LC0A
         AGO   .CHKB                                               LC0A
.REGB    LR    0,&B(1)                           LOAD PARAMETER REG 0
.END     MEND
         MACRO
         IHBERMAC &A,&B,&D,&E,&F,&H                           CB A45446
         LCLC  &G(14)
         LCLC  &C
         LCLA  &H1                                            AB A57083
&C       SETC  '***  IHB'
         AIF   (&A GE 1000).OS1000                                21872
         AIF   (&A GT 232).NEXT3                                  20202
         AIF   (&A GE 202).OCR                                    20202
         AIF   (&A GT 197).NEXT2                                  19033
.*0824                                                             LC0A
         AIF   (&A GT 179).GRAP
         AIF   (&A GT 99).NEXT
         AIF   (&A EQ 1).E24
         AIF   (&A LE 13).E13
         AIF   (&A EQ 24).E24
         AIF   (&A LE 25).E25
         AIF   (&A EQ 26).E26
         AIF   (&A EQ 27).E27
         AIF   (&A EQ 31).E31
         AIF   (&A LE 34).E34
         AIF   (&A EQ 42).E42
         AIF   (&A LE 46).E46
         AIF   (&A EQ 47).E47
         AIF   (&A EQ 52).E52
         AIF   (&A LE 57).E57
         AIF   (&A EQ 60).E60
         AIF   (&A EQ 61).E61
         AIF   (&A LE 67).E67
         AIF   (&A EQ 69).E69
         AIF   (&A EQ 71).E71
         AIF   (&A EQ 72).E72
         AIF   (&A EQ 73).E73
         AIF   (&A EQ 74).E74
         AIF   (&A EQ 75).E75
         AIF   (&A EQ 78).E78
         AIF   (&A EQ 84).E84
         AIF   (&A EQ 87).E87
         AIF   (&A EQ 88).E88
         AIF   (&A EQ 89).E89
         AIF   (&A EQ 90).E90
         AIF   (&A EQ 91).E91
         AIF   (&A EQ 92).E92
         AIF   (&A EQ 93).E93
         AIF   (&A EQ 94).E94
         AIF   (&A EQ 95).E95
.NEXT    AIF   (&A LE 147).DCBA
         AIF   (&A LE 157).DCBB
         AIF   (&A EQ 158).DCBC
         AIF   (&A EQ 159).DCBD
         AIF   (&A EQ 160).DCBE
         AIF   (&A EQ 161).DCBF
         AIF   (&A EQ 162).DCBG
         AIF   (&A EQ 163).DCBH
         AIF   (&A EQ 164).DCBI
         AIF   (&A EQ 165).DCBJ
         AIF   (&A EQ 166).DCBK
         AIF   (&A EQ 167).DCBQ
         AIF   (&A EQ 168).DCBR
         AIF   (&A EQ 169).DCBS
         AIF   (&A EQ 170).DCBL
         AIF   (&A EQ 171).DCBM
         AIF   (&A EQ 172).DCBN
         AIF   (&A EQ 173).DCBO
         AIF   (&A EQ 174).DCBP
         AIF   (&A EQ 176).DCBAA
         AIF   (&A EQ 177).DCBAB
         AIF   (&A EQ 178).DCBAC
.GRAP    AIF   (&A EQ 180).E180
         AIF   (&A EQ 181).E181
         AIF   (&A EQ 182).E182
         AIF   (&A EQ 183).E183
         AIF   (&A EQ 184).E184
         AIF   (&A EQ 185).E185
         AIF   (&A EQ 186).E186
         AIF   (&A EQ 187).E187
         AIF   (&A EQ 188).E188
         AIF   (&A EQ 189).E189
         AIF   (&A EQ 190).SETPRA                                  UCSA
         AIF   (&A EQ 191).SETPRB                                  UCSA
         AIF   (&A EQ 192).SETPRC                                  UCSA
         AIF   (&A EQ 193).SETPRD                                  UCSA
         AIF   (&A EQ 194).SETPRE                                  UCSA
         AIF   (&A EQ 195).LCSERR                                  LC0A
         AIF   (&A EQ 196).E196                                    SD0A
         AIF   (&A EQ 197).E197
.NEXT2   ANOP                                                     19033
         AIF   (&A EQ 198).E198                                   19033
         AIF   (&A EQ 199).E199                                   19033
         AIF   (&A EQ 200).E200                                   19033
         AIF   (&A EQ 201).E201                                   19033
.OCR     AIF   (&A EQ 202).OCR120                                 19017
         AIF   (&A EQ 203).OCR121                                 19017
         AIF   (&A EQ 204).OCR122                                 19017
         AIF   (&A EQ 205).OCR123                                 19017
         AIF   (&A EQ 206).OCR124                                 19017
         AIF   (&A EQ 207).OCR125                                 19017
         AIF   (&A EQ 208).OCR126                                 19017
         AIF   (&A EQ 209).OCR127                                 19017
         AIF   (&A EQ 210).OCR128                                 19017
         AIF   (&A EQ 211).OCR129                                 19017
         AIF   (&A EQ 212).OCR130                                 19017
         AIF   (&A EQ 213).OCR131                                 19017
         AIF   (&A EQ 214).OCR132                                 19017
         AIF   (&A EQ 215).OCR133                                 19017
         AIF   (&A EQ 216).OCR134                                 19017
         AIF   (&A EQ 217).OCR135                                 19017
         AIF   (&A EQ 218).OCR136                                 19017
         AIF   (&A EQ 219).OCR137                                 19017
         AIF   (&A EQ 220).OCR138                                 19017
         AIF   (&A EQ 221).OCR139                                 19017
         AIF   (&A EQ 222).OCR140                                 19017
         AIF   (&A EQ 223).OCR141                                 19017
         AIF   (&A EQ 224).OCR142                                 19017
         AIF   (&A EQ 225).OCR143                                 19017
         AIF   (&A EQ 226).OCR144                                 19017
         AIF   (&A EQ 227).OCR145                                 19017
         AIF   (&A EQ 228).OCR146                                 19017
.NEXT3   ANOP                                                     20202
         AIF   (&A EQ 236).TOD236                                 20071
         AIF   (&A EQ 237).SETPRF                                 20202
         AIF   (&A EQ 238).A027                                  A28592
         AIF   (&A EQ 240).REDPIKE                                21088
         AIF   (&A EQ 241).PIKERED                                21088
         AIF   (&A EQ 242).M1428A                             AH  M1428
         AIF   (&A EQ 243).M1428B                             AH  M1428
         AIF   (&A EQ 244).M1428C                             AH  M1428
         AIF   (&A EQ 245).M1428D                             AH  M1428
         AIF   (&A EQ 246).M1428E                             AH  M1428
         AIF   (&A EQ 247).INNER                                  21024
         AIF   (&A EQ 248).HDCY1                              AB A52575
         AGO  .INVALID
.INNER   MNOTE  12,'&C.084  IPLTXID OPERAND EXCEEDS 7 CHARACTERS' 21024
         MEXIT
.DCBA    MNOTE 4,'&C.050  &B OPERAND INCONSISTENT-IGNORED'
         MEXIT
.DCBB    MNOTE 8,'&C.051  &D INVALID CODE FOR &B-IGNORED'
         MEXIT
.DCBC    MNOTE 12,'&C.052  DSORG OMITTED'
         MEXIT
.DCBD    MNOTE 12,'&C.053  &D INVALID CODE FOR DSORG'
         MEXIT
.DCBE    MNOTE 8,'&C.054  &D INVALID DSORG QUALIFIER-IGNORED'
         MEXIT
.DCBF    MNOTE 8,'&C.055  MACRF NOT SPECIFIED-EXCP ASSUMED'
         MEXIT
.DCBG    MNOTE 8,'&C.056  &D OF MACRF INVALID WITH DSORG=&E-IGNORED'
         MEXIT
.DCBH    MNOTE 8,'&C.057  &D INVALID QUALIFIER FOR &E OF MACRF IF DSORGX
               =&F-IGNORED'
         MEXIT
.DCBI    MNOTE 8,'&C.058  &D OF RECFM INVALID WITH DSORG=&E-IGNORED'
         MEXIT
.DCBJ    MNOTE 8,'&C.059  &D OF OPTCD INVALID WITH DSORG=&E-IGNORED'
         MEXIT
.DCBK    MNOTE 8,'&C.060  &D INVALID CODE FOR DEVD WITH DSORG=&E-IGNOREX
               D'
         MEXIT
.DCBL    MNOTE 8,'&C.065  MACRF=&D INVALID-EXCP ASSUMED'
         MEXIT
.DCBM    MNOTE 12,'&C.066  INCONSISTENT OPERAND'
         MEXIT
.DCBN    MNOTE 4,'&C.067  DCBD MACRO PREVIOUSLY USED'
         MEXIT
.DCBO    MNOTE *,'&C.068  NO VALID DSORG SPECIFIED-EXCP ASSUMED'
         MEXIT
.DCBP    MNOTE *,'&C.069  DEVD NOT SPECIFIED-ALL ASSUMED'
         MEXIT
.DCBQ    MNOTE *,'&C.061  DDNAME NOT SPECIFIED'
         MEXIT
.DCBR    MNOTE 4,'&C.062  DDNAME LONG-TRUNCATED TO 8 CHAR'     AB M1541
         MEXIT
.DCBS    MNOTE 0,'&C.250  DDNAME SHORT-PADDED TO 8 CHAR'
         MEXIT
.DCBAA   MNOTE 0,'&C.252  &D TOO LONG FOR &B-TRUNCATED TO 2 CHAR'
         MEXIT
.DCBAB   MNOTE 0,'&C.253  &D TOO SHORT FOR &B-PADDED TO 2 CHAR'
         MEXIT
.DCBAC   MNOTE 0,'&C.254  &B NOT SPECIFIED-PRESET TO &D'      AB A34441
         MEXIT
.E13     ANOP
&G(1)    SETC 'FIRST'
&G(2)    SETC 'SECOND'
&G(3)    SETC 'THIRD'
&G(4)    SETC 'FOURTH'
&G(5)    SETC 'DCB'
&G(6)    SETC 'DECB'
&G(7)    SETC 'KEY'
&G(8)    SETC 'SEEKADDR'
&G(9)    SETC  'LOW.LIM.'
&G(10)   SETC  'ECB'
&G(11)   SETC  'BLKREF'
&G(12)   SETC  'AREA'
         MNOTE 12,'&C.001  &G(&A-1) OPERAND REQ''D-NOT SPECIFIED'
         MEXIT
.E25     ANOP
&G(1)    SETC  'LENGTH'
&G(2)    SETC  'VALUE'
&G(3)    SETC  'QCB'
&G(4)    SETC  'MODE'
&G(5)    SETC  'REGISTER'
&G(6)    SETC  'MESSAGE'
&G(7)    SETC  'ABEXR'
&G(8)    SETC  'LABEL'
&G(9)    SETC  'TBLOC'
&G(10)   SETC  'FIELDS'
&G(12)   SETC  'TYPE'
         MNOTE 12,'&C.001  &G(&A-13) OPERAND REQ''D-NOT SPECIFIED'
         MEXIT
.E24     MNOTE 12,'&C.004  REQUIRED OPERAND(S) NOT SPECIFIED'
         MEXIT
.E26     MNOTE 12,'&C.001  ENTRY SYMBOL REQ''D-NOT SPECIFIED'
         MEXIT
.E27     MNOTE 12,'&C.001  ENTRY PT. ADR. OPERAND REQ''D-NOT SPECIFIED'
         MEXIT
.E31     MNOTE 12,'&C.001  EP,EPLOC,OR DE OPERAND REQ''D-NOT SPECIFIED'
         MEXIT
.E34     ANOP
&G(1)    SETC  'CODE'
&G(2)    SETC  'COUNT'
&G(3)    SETC  'QEL'
&G(5)    SETC  'TERMINAL'
&G(6)    SETC  'LINE'
&G(7)    SETC  'LIST'
&G(12)   SETC  'LIST'
&G(13)   SETC  'NUMBER'
         MNOTE 12,'&C.001  &G(&A-27) &G(&A-20) OPERAND REQ''D-NOT SPECIX
               FIED'
         MEXIT
.E42     MNOTE 12,'&C.002  INVALID EP OR EPLOC OPERAND SPECIFIED-&D'
         MEXIT
.E46     ANOP
&G(1)    SETC  'MF'
&G(2)    SETC  'FIRST'
&G(3)    SETC  'SECOND'
&G(4)    SETC  'THIRD'
&G(5)    SETC  'FOURTH'
&G(6)    SETC  'IOB'
&G(7)    SETC  'SF'
&G(9)    SETC  'FUNCTION'
&G(10)   SETC  'LENGTH'
&G(11)   SETC  'MODE'
&G(12)   SETC  'TYPE'                                             19015
&G(13)   SETC  'SP'                                           CB A45446
         AIF   (T'&H EQ 'O').AROUND                           AB A65730
&H1      SETA  1                                              AB A57083
.AROUND  ANOP                                                 AB A57083
         MNOTE 12,'&C.002  INVALID &G(&A+&H1-34) OPERAND SPECIFIED-&D'
         MEXIT
.E47     MNOTE 12,'&C.002  INVALID AREA OR LENGTH OPERAND SPECIFIED-&D'
         MEXIT
.E52     MNOTE 12,'&C.001  OPTION THREE OPERAND REQ''D-NOT SPECIFIED'
         MEXIT
.E57     ANOP
&G(1)    SETC  'TYPE'
&G(2)    SETC  'OPTION'
&G(3)    SETC  'OPTION 1'
&G(4)    SETC  'OPTION 2'
&G(6)    SETC  'OPTION 3'
&G(7)    SETC  'KEYWORD'
         MNOTE 12,'&C.002  INVALID &G(&A-47) OPERAND SPECIFIED-&D'
         MEXIT
.E60     MNOTE 12,'&C.023  THIRD OPERAND INVALID WITH SCRATCH-SPECIFIEDX
                AS -&D'
         MEXIT
.E61     MNOTE 12,'&C.005  INVALID REGISTER NOTATION IN RC OPERAND-&D'
         MEXIT
.E67     ANOP
&G(1)    SETC  'OP CODE'
&G(2)    SETC  'TYPE'
&G(3)    SETC  'TYPE'
&G(4)    SETC  'TYPE'
&G(5)    SETC  'TYPE'
&G(6)    SETC  'FIELDS'
         MNOTE 12,'&C.002  INVALID &G(&A-61) OPERAND SPECIFIED-&D'
         MEXIT
.E69     MNOTE 12,'&C.006  INVALID REGISTER NOTATION WITH MF=L FORM'
         MEXIT
.E71     MNOTE 12,'&C.007  PARAM= OPERAND INVALID WITH SF=L FORM'
         MEXIT
.E72     MNOTE 12,'&C.008  INVALID REGISTER NOTATION WITH SF=L FORM'
         MEXIT
.E73     MNOTE 12,'&C.009  ENTRY SYMBOL NOT ALLOWED WITH MF=L FORM'
         MEXIT
.E74     MNOTE 12,'&C.010  ID= OPERAND INVALID WITH MF=L FORM'
         MEXIT
.E75     MNOTE 12,'&C.011  INVALID OPERAND SPECIFIED WITH SF=L FORM'
         MEXIT
.E78     MNOTE 4,'&C.024  CSECT NAME OMITTED. MACRO NAME FIELD BLANK'
         MEXIT
.E84     MNOTE 12,'&C.013  MF=L NOT ALLOWED'
         MEXIT
.E87     MNOTE 12,'&C.014  DECB NOT SPECIFIED AS SYMBOL'
         MEXIT
.E88     MNOTE 12,'&C.015  MORE THAN ONE OF EP,EPLOC OR DE PRESENT'
         MEXIT
.E89     MNOTE 12,'&C.016  LV OPERAND NOT ALLOWED WITH SPECIFIED MODE'
         MEXIT
.E90     MNOTE 12,'&C.017  LA OPERAND NOT ALLOWED WITH SPECIFIED MODE'
         MEXIT
.E91     MNOTE 12,'&C.018  BOTH LV AND LA OPERANDS SPECIFIED'
         MEXIT
.E92     MNOTE 12,'&C.019  SP NOT ALLOWED WITH LV SPECIAL REG. NOTATIONX
               '
         MEXIT
.E93     MNOTE 12,'&C.020  A= OPERAND NOT ALLOWED IN R-TYPE MACRO'
         MEXIT
.E94     MNOTE 12,'&C.021  MORE THAN MAXIMUM VALUE IN FIELDS OPERAND'
.*                                                                M2177
         MEXIT
.E95     MNOTE 12,'&C.012  PARAM OR VL ALLOWED ONLY WITH MF=(E,ADDR)'
         MEXIT
.E180    MNOTE 4,'&C.256  &B OPERAND INVALID OR NOT SPECIFIED-SET TO &D'
               '
         MEXIT
.E181    MNOTE 4,'&C.257  BPX COUNTER INDICATES WRAP AROUND TO TOP OF CR
               RT'                                            AB A34441
         MEXIT
.E182    MNOTE 4,'&C.258  BLC GREATER THAN OR EQUAL TO BLIM'  AB A34441
         MEXIT
.E183    MNOTE 4,'&C.077  &B INVALID-SET TO &D'
         MEXIT
.E184    MNOTE 0,'&C.259  CURRENT BUFFER &B = &D'
         MEXIT
.E185    MNOTE 0,'&C.260  CURRENT BEAM POSITION COUNTER IS X=&B, Y=&D'
         MEXIT
.E186    MNOTE 4,'&C.261  &B COUNTER EXCEEDS CRT LIMITS'
         MEXIT
.E187    MNOTE 4,'&C.262  LOAD VARIABLE SPACE ORDER MAY HAVE NOT BEEN SP
               PECIFIED PRIOR TO ENTERING STROKE MODE'        AB A34441
         MEXIT
.E188    MNOTE 8,'&C.263  INVALID &B ADDRX-&D'                AB A34441
         MEXIT
.E189    MNOTE 7,'&C.083 MF, STORAGE,OR LIST OPERAND INVALID'
         MEXIT                                                     UCSA
.SETPRA MNOTE 12,'&C.092 DCB IS MISSING OR INVALID'                UCSA
         MEXIT                                                     UCSA
.SETPRB MNOTE 12,'&C.093  UCS SUBLIST IS INVALID'                  UCSA
         MEXIT                                                     UCSA
.SETPRC MNOTE 12,'&C.094  MACRO-FORM IS INVALID'                   UCSA
         MEXIT                                                     UCSA
.SETPRD MNOTE 12,'&C.095  OPTCD IS INVALID'                        UCSA
         MEXIT                                                     UCSA
.SETPRE MNOTE 12,'&C.096 UCS, FCB AND OPTCD SUBLISTS MISSING'     20202
         MEXIT                                                    20202
.SETPRF MNOTE 12,'&C.026  FCB SUBLIST IS INVALID'                 20202
         MEXIT                                                     LC0A
.LCSERR  MNOTE 12,'&C.025  INVALID HIARCHY OPERAND SPECIFIED'      LC0A
         MEXIT                                                     SD0A
.E196    MNOTE 12,'&C.264  MORE THAN 5 POSITIONAL OPERANDS'        SD0A
         MEXIT
.E197    MNOTE 12,'&C.097  TCB OPERAND INVALID WITH MF=L FORM'
         MEXIT                                                    19033
.E198    MNOTE *,'&C.098  BUFNO LESS THAN 12--12 ASSUMED'         19033
         MEXIT                                                    19033
.E199    MNOTE *,'&C.099  BUFL AND BLKSIZE UNEQUAL-BUFL ASSUMED'  19033
         MEXIT                                                    19033
.E200    MNOTE *,'&C.102 LREC PLUS 6 IS GREATER THAN BUFL-BUFL ASSUMED'
         MEXIT                                                    19033
.E201    MNOTE 4,'&C.101  SSRTN TOO LONG--TRUNCATED TO 8 CHAR'    19033
         MEXIT                                                    19017
.OCR120  MNOTE 16,'&C.120  DCB ADDRESS MISSING OR INVALID. GENERATION TC
               ERMINATED'                                         19017
         MEXIT                                                    19017
.OCR121  MNOTE 16,'&C.121  REGISTER SPECIFICATION INVALID. GENERATION TC
               ERMINATED.'                                        19017
         MEXIT                                                    19017
.OCR122  MNOTE 16,'&C.122  REGISTER SPECIFICATIONS NOT PAIRED. GENERATIC
               ON TERMINATED'                                     19017
         MEXIT                                                    19017
.OCR123  MNOTE 4,'&C.123  NUMBER OF RETRIES EXCEEDS 9, 9 ASSUMED.'     C
                                                                  19017
         MEXIT                                                    19017
.OCR124  MNOTE 4,'&C.124  NUMBER OF RETRIES INVALID, 1 ASSUMED.'  19017
         MEXIT                                                    19017
.OCR125  MNOTE 8,'&C.125  UNRECOGNIZABLE PARAMETER. PARAMETER IGNORED.'
         MEXIT                                                    19017
.OCR126  MNOTE 4,'&C.126  PARAMETER PREVIOUSLY DEFINED. FIRST DEFINITIOC
               N ASSUMED.'                                        19017
         MEXIT                                                    19017
.OCR127  MNOTE 16,'&C.127  LABEL PREFIX MISSING OR INVALID. GENERATION C
               TERMINATED.'                                       19017
         MEXIT                                                    19017
.OCR128  MNOTE 16,'&C.128  UNRECOGNIZABLE PARAMETER SPECIFIED. GENERATIC
               ON TERMINATED.'                                    19017
         MEXIT                                                    19017
.OCR129  MNOTE 16,'&C.129  TIMES NOT PRECEDED BY FIELD LENGTH. GENERATIC
               ON TERMINATED.'                                    19017
         MEXIT                                                    19017
.OCR130  MNOTE 16,'&C.130  TIMES NOT FOLLOWED BY NUMBER. GENERATION TERC
               MINATED.'                                          19017
         MEXIT                                                    19017
.OCR131  MNOTE 4,'&C.150  OPTIONAL PARAMETER SPECIFIED AFTER FIELD DEFIC
               NITION. PARAMETER IGNORED.'                        19017
         MEXIT                                                    19017
.OCR132  MNOTE 16,'&C.151  LABEL FOR LOAD FORMAT DATA MISSING OR INVALIC
               D. GENERATION TERMINATED.'                         19017
         MEXIT                                                    19017
.OCR133  MNOTE 16,'&C.133  LABEL PREFIX FOR DEFAREA MISSING OR INVALID.C
                GENERATION TERMINATED.'                           19017
         MEXIT                                                    19017
.OCR134  MNOTE 4,'&C.134  REFMARK OR UNFORMAT NOT SPECIFIED PRIOR TO DEC
               FINITION OF FIRST FIELD. FORMATTED MODE ASSUMED.'  19017
         MEXIT                                                    19017
.OCR135  MNOTE 16,'&C.135  REFMARK SPECIFIED WHEN PROCESSING IN UNFORMAC
               TTED MODE. GENERATION TERMINATED.'                 19017
         MEXIT                                                    19017
.OCR136  MNOTE 16,'&C.136  THRU NOT PRECEDED BY FIELD NUMBER. GENERATIOC
               N TERMINATED.'                                     19017
         MEXIT                                                    19017
.OCR137  MNOTE 16,'&C.137  THRU NOT FOLLOWED BY FIELD NUMBER. GENERATIOC
               N TERMINATED.'                                     19017
         MEXIT                                                    19017
.OCR138  MNOTE 16,'&C.138  ENDING VALUE IN THRU LESS THAN STARTING VALUC
               E. GENERATION TERMINATED.'                         19017
         MEXIT                                                    19017
.OCR139  MNOTE 8,'&C.139  LAST CCW GENERATED USES COMMAND CHAINING. POSC
               SIBLE ERROR.'
         MEXIT                                                    19017
.OCR140  MNOTE 16,'&C.140  SYMBOL WITH LABEL PARAMETER MISSING OR INVALC
               ID. GENERATION TERMINATED.'                        19017
         MEXIT                                                    19017
.OCR141  MNOTE 16,'&C.141  FIELD NUMBER FOR RBT/RFT MISSING OR INVALID.C
                GENERATION TERMINATED.'                           19017
         MEXIT                                                    19017
.OCR142  MNOTE 16,'&C.142  SYMBOL FOR RBT/RFT MISSING OR INVALID. GENERC
               ATION TERMINATED.'                                 19017
         MEXIT                                                    19017
.OCR143  MNOTE 16,'&C.143  SYMBOL(S) FOR COMPARE MISSING OR INVALID. GEC
               NERATION TERMINATED.'                              19017
         MEXIT                                                    19017
.OCR144  MNOTE 16,'&C.144  SYMBOL FOR BRANCH MISSING OR INVALID. GENERAC
               TION TERMINATED.'                                  19017
         MEXIT                                                    19017
.OCR145  MNOTE 16,'&C.145  STACKER NUMBER FOR ESD MISSING OR INVALID. GC
               ENERATION TERMINATED.'                             19017
         MEXIT                                                    19017
.OCR146  MNOTE 16,'&C.146  SYMBOL FOLLOWING REFMARK MISSING OR INVALID.C
                GENERATION TERMINATED.'                           19017
         MEXIT                                                   A28592
.A027    MNOTE 12,'&C.027 EXCESSIVE POSITIONAL PARAMETERS SPECIFIED'
.*                                                               A28592
         MEXIT                                                    20071
.TOD236  MNOTE 4,'&C.236 SECOND OPERAND NOT ALLOWED -- IGNORED'   20071
         MEXIT                                                    M4264
.REDPIKE MNOTE 12,'&C.0131  INVALID COMBINATION OF CHARACTERS IN &B 0PEC
               RAND-&D.'                                          21088
         MEXIT                                                    21088
.PIKERED MNOTE 12,'&C.0132  INVALID CHARACTER IN &B OPERAND-&D.'  21088
         MEXIT                                                    21088
.OS1000  AIF   (&A EQ 1009).POST245                               21088
         AIF   (&A EQ 1010).POST246                               21088
         AIF   (&A EQ 1016).POST276                           AB A57064
.INVALID MNOTE 12,'&C.087 INVALID OPERAND &A   PASSED TO SYSTEM MACRO IX
               HBERMAC'                                        AB M1541
         MEXIT                                                 AB M1541
.POST245 MNOTE 12,'&C.245  COMPLETION CODE CANNOT APPEAR IN LIST FORM.'
.*                                                                21872
         MEXIT                                                    21872
.POST246 MNOTE 12,'&C.246 TCB OPERAND SPECIFIED WITHOUT TJID OPERAND.'
.*                                                                21872
         MEXIT                                                    21872
.POST276 MNOTE 4,'&C.276 &B INCOMPATIBLE WITH &D--IGNORED.'   AB A57064
         MEXIT                                                AB A57064
.M1428A  MNOTE *,'&C.147  GENERATION TERMINATED BY E OR DE LINE TYPE'
.*                                                            AH  M1428
         MEXIT                                                AH  M1428
.M1428B  MNOTE *,'&C.148 INVALID LINE TYPE, E OR DE ASSUMED'  AH  M1428
         MEXIT                                                AH  M1428
.M1428C  MNOTE 8,'&C.149 INVALID C OR L LINETYPE, DE ASSUMED--GENERATIOX
               N TERMINATED'                                  AH  M1428
         MEXIT                                                AH  M1428
.M1428D  MNOTE 8,'&C.152  NUMBER OF LINES REQUESTED IS 0 OR GREATER THAX
               N 10--GENERATION TERMINATED'                   AH  M1428
         MEXIT                                                AH  M1428
.M1428E  MNOTE 8,'&C.153 MLWTO/WTOR MUTUALLY EXCLUSSIVE--GENERATION TERX
               MINATED'                                       AH  M1428
         MEXIT                                                AH  M1428
.HDCY1   MNOTE 16,'&C.375 MCSFLAG=HRDCPY INVALID FOR MLWTO- GENERATION X
               TERMINATED'                                    AB A52575
         MEXIT
         MEND
         MACRO
         IHB01 &DSORG,&MACRF,&BFTEK,&BFALN,&EODAD,&RECFM,&EXLST,       *
               &BUFCB,&BUFL,&IOBAD,&EOEA,&PCIA,&SIOA,&CENDA,&XENDA,    *
               &AERR,&PGFX,&OPTCD,&BUFNO,&DEVD,&REPOS
.*  THIS MACRO CHECKS DSORG, MACRF, RECFM, OPTCD, & DEVD FOR DCB MACRO
.*
.*                      SET SYMBOL DECLARATIONS
.*
         GBLA  &A0
         GBLB  &DSORG0,&DSORG1,&DSORG2,&DSORG3,&DSORG4,&DSORG5,&DSORG6
         GBLB  &DSORG7,&MACRF0,&MACRF1,&MACRF2,&MACRF3,&MACRF4,&MACRF5
         GBLB  &MACRF6,&MACRF7,&MACRF8,&MACRF9,&MACRFA,&MACRFB,&MACRFC
         GBLB  &MACRFD,&MACRFE,&MACRFF,&MAC5,&MAC6,&MAC7,&FXSW,&RECFM0
         GBLB  &RECFM1,&RECFM2,&RECFM3,&RECFM4,&RECFM5,&RECFM6,&RECFM7
         GBLB  &OPTCD0,&OPTCD1,&OPTCD2,&OPTCD3,&OPTCD4,&OPTCD6,&OPTCD7
         GBLB  &COMSW,&MAC4,&DSORG8,&OPTCD5                        RER1
         GBLB  &DSORG9,&DSORGA
         LCLA  &A1,&A3
         LCLC  &C0,&C1,&C2
.*
.*         RELEASE 23 DELETIONS/CHANGES
.*         RELEASE 22 DELETIONS/CHANGES
.*         RELEASE 21 DELETIONS/CHANGES
.*
.*0000065660,065720                                            @SA76501
.*0000                                                         @SA78498
.*
.*         RELEASE 20 DELETIONS/CHANGES
.*                                                               S20038
.*                                                               S20002
.*
&MACRF0  SETB  0                       ZERO SWITCHES
&MACRF1  SETB  0
&MACRF2  SETB  0
&MACRF3  SETB  0
&MACRF4  SETB  0
&MACRF5  SETB  0
&MACRF6  SETB  0
&MACRF7  SETB  0
&MACRF8  SETB  0
&MACRF9  SETB  0
&MACRFA  SETB  0
&MACRFB  SETB  0
&MACRFC  SETB  0
&MACRFD  SETB  0
&MACRFE  SETB  0
&MACRFF  SETB  0
&MAC4    SETB  0
&MAC5    SETB  0
&MAC6    SETB  0
&MAC7    SETB  0
&FXSW    SETB  0
&COMSW   SETB  0
.*
.*                      ANALYZE DSORG OPERAND
.*
&DSORG0  SETB  0                       ZERO SWITCHES
&DSORG1  SETB  0
&DSORG2  SETB  0
&DSORG3  SETB  0
&DSORG4  SETB  0
&DSORG5  SETB  0
&DSORG6  SETB  0
&DSORG7  SETB  0
&DSORG8  SETB  0
&DSORG9  SETB  0                        TEST TCAM
&DSORGA  SETB  0                        TEST TCAM
         AIF   (T'&DSORG NE 'O').DSORGB  IF DSORG CODED
         AIF   (T'&MACRF EQ 'O').DSORGA  IF MACRF NOT CODED
         AIF   ('&MACRF(1)' EQ 'E').DSORGX  IF EXCP ACCESS
.DSORGA  IHBERMAC 158                  DSORG OMITTED
         MEXIT
.*
.*                 TEST VALIDITY OF DSORG
.DSORGB  AIF   (K'&DSORG LT 2).DSORGD  ALL VALID CODES ARE 2 OR 3
&C0      SETC  '&DSORG'(1,2)           ISOLATE 1ST TWO CHAR OF CODE
         AIF   ('&C0' EQ 'IS' OR '&C0' EQ 'PS' OR '&C0' EQ 'DA' OR '&C0*
               ' EQ 'CX' OR '&C0' EQ 'CQ' OR '&C0' EQ 'MQ' OR '&C0' EQ *
               'PO' OR '&C0' EQ 'GS').DSORGE      IF VALID VALUE
         AIF   ('&C0' EQ 'TX' OR '&C0' EQ 'TQ').DSORGE    IF TCAM
.DSORGD  IHBERMAC 159,,&C0             INVALID CODE FOR DSORG
         MEXIT
.DSORGE  ANOP
&FXSW    SETB  1
&COMSW   SETB  1
         AIF   (K'&DSORG LT 3).DSORGG  IF NO QUALIFIER
&C1      SETC  '&DSORG'(3,1)           ISOLATE QUALIFIER
         AIF   ('&C1' NE 'U').DSORGF   IF INVALID QUALIFIER
&DSORG7  SETB  1                       SET QUALIFIER SWITCH
         AGO   .DSORGG                 TO ANALYZE PRIMARY CODE
.*
.DSORGF  IHBERMAC 160,,&C1             INVALID DSORG QUALIFIER-IGNORED
.*
.DSORGG  ANOP
&DSORG0  SETB  ('&C0' EQ 'IS')         TEST INDEXED SEQUENTIAL
&DSORG1  SETB  ('&C0' EQ 'PS')         TEST PHYSICAL SEQENTIAL
&DSORG2  SETB  ('&C0' EQ 'DA')         TEST DIRECT ACCESS
&DSORG3  SETB  ('&C0' EQ 'CX')         TEST COMM. LINE GROUP
&DSORG4  SETB  ('&C0' EQ 'CQ')         TEST COMM. DA QUEUE
&DSORG5  SETB  ('&C0' EQ 'MQ')         TEST COMM. MSG. QUEUE
&DSORG6  SETB  ('&C0' EQ 'PO')         TEST PARTITIONED
&DSORG8  SETB  ('&C0' EQ 'GS')          TEST FOR GRAPHICS
&DSORG9  SETB  ('&C0' EQ 'TX')
&DSORGA  SETB  ('&C0' EQ 'TQ')
.DSORGX  ANOP
.*---------------------------------------------------------------------
.*
.*                      ANALYZE MACRF OPERAND
.*
         AIF   (T'&MACRF NE 'O').MACRFA IF MACRF SPECIFIED
         IHBERMAC 161                  MACRF NOT SPECIFIED-EXCP ASSUMED
         AGO   .MACRFC                 TO EXCP ANALYSIS
.MACRFA  ANOP
&A3      SETA  0                       RESET SUBLIST ITEM INDEX
.*
.MACRFB  ANOP                          START OF LOOP ON ITEM INDEX
&A3      SETA  &A3+1                   STEP ITEM INDEX
         AIF   (&A3 GT N'&MACRF).MACRFX  IF ALL ITEMS ANALYZED
         AIF   (K'&MACRF(&A3) EQ 0).MACRFB IF SUBLIST ITEM NULL
&C0      SETC  '&MACRF(&A3)'           ISOLATE SUBLIST ITEM
&A1      SETA  1                       INITIALIZE QUALIFIER POINTER
&C1      SETC  '&C0'(1,1)              ISOLATE MAJOR MACRO TYPE CODE
         AIF   ('&C1' NE 'E').MACRFD   TEST EXCP
         AIF   (N'&MACRF EQ 1).MACRFC  EXCP MUST STAND ALONE
         IHBERMAC 170,,&MACRF          MACRF INVALID-EXCP ASSUMED
.MACRFC  ANOP
&MACRF0  SETB  1                       SET EXCP SWITCH
&MACRF1  SETB  (T'&BFTEK NE 'O' OR T'&BFALN NE 'O' OR '&EODAD' NE '1' O*
               R T'&RECFM NE 'O' OR '&EXLST' NE '0' OR '&BUFNO' NE '0' *
               OR '&BUFCB' NE '1' OR '&BUFL' NE '0' OR '&IOBAD' NE '1')
&MACRF1  SETB  (&MACRF1 OR T'&DEVD NE 'O' OR &FXSW OR &COMSW)
&MACRF1  SETB  (&MACRF1 OR T'&OPTCD NE 'O')                        RER1
&FXSW    SETB  (&MACRF1)               EXTENSION REQUIRED
&MACRF2  SETB  ('&EOEA' NE '0' OR '&PCIA' NE '0' OR '&SIOA' NE '0' OR '*
               &CENDA' NE '0' OR '&XENDA' NE '0' OR '&AERR' NE '0')
&MACRF2  SETB  (&MACRF2 OR T'&OPTCD NE 'O')                        RER1
.*
&MACRF3  SETB  ('&BUFNO' NE '0' OR '&BUFCB' NE '1' OR '&BUFL' NE '0' OR*
                '&IOBAD' NE '1' OR &FXSW OR &COMSW)
&COMSW   SETB  (&MACRF3)
&MACRF4  SETB  0
         AIF   ('&REPOS' NE 'Y').MACRFC6
&MACRF5  SETB  1
.MACRFC6 ANOP
&MACRF6  SETB  0
         AIF   ('&PGFX' EQ 'NO').MACRFC7
         AIF   ('&PGFX' EQ 'YES' AND '&SIOA' EQ '0').MACRFC7
&MACRF6  SETB  1                        INDICATE USER PAGE FIX ROUTINE
.MACRFC7 ANOP
&MACRF7  SETB  0
&MACRF8  SETB  0
&MACRF9  SETB  0
&MACRFA  SETB  0
&MACRFB  SETB  0
&MACRFC  SETB  0
&MACRFD  SETB  0
&MACRFE  SETB  0
&MACRFF  SETB  0
         AGO   .MACRFX                 SKIP TO RECFM ANALYSIS
.*
.MACRFD  AIF   (('&C1' EQ 'G' OR '&C1' EQ 'P') AND (&DSORG0 OR &DSORG1 *
               OR &DSORG3 OR &DSORG4 OR &DSORG5 OR &DSORG9 OR &DSORGA))C
               .MACRGA  IF VALID G/P
         AIF   (('&C1' EQ 'R' OR '&C1' EQ 'W') AND (&DSORG0 OR &DSORG1 *
               OR &DSORG2 OR &DSORG3 OR &DSORG6 OR &DSORG8 OR &DSORG9 O*
               R &DSORGA)).MACRFE IF VALID R/W
         AIF   ('&C1' EQ 'S' AND &DSORG0).MACRSA  IF VALID S
         IHBERMAC 162,,&C0,&DSORG      MACRF INVALID WITH DSORG
         AGO   .MACRFB                 TO ADVANCE TO NEXT ELEMENT
.*
.*  MACRF=R/W ANALYSIS FOR BDAM, BPAM, BSAM, BISAM, BTAM, AND GRAPHICS
.*
.MACRFE  ANOP                          SET BIT FOR MAJOR MACRO TYPE
&MACRF2  SETB  ('&C1' EQ 'R' OR &MACRF2) READ
&MACRFA  SETB  ('&C1' EQ 'W' OR &MACRFA) WRITE
.*
         AIF   (K'&MACRF(&A3) GT 1).MACRFT  TO START R/W QUALIFIER LOOP
         AIF   ((&DSORG0 AND '&C1' EQ 'R') OR &DSORG1 OR &DSORG3 OR    *
               &DSORG6 OR &DSORG8 OR &DSORG9).MACRFB
&C2      SETC  ''                      SET NULL FOR ERROR MESSAGE
.*
.MACRFS  IHBERMAC 163,,&C2,&C1,&DSORG  INVALID QUALIFIER FOR R/W MACRF
.*
.MACRFT  ANOP                          LOOP ON MACRF ITEM QUALIFIERS
&A1      SETA  &A1+1                   STEP QUALIFIER INDEX
         AIF   (K'&MACRF(&A3) LT &A1).MACRFB  IF NO MORE QUALIFIERS
&C2      SETC  '&C0'(&A1,1)            ISOLATE QUALIFIER
.*
         AIF   ('&C2' NE 'K').MACRFI   IF NOT KEY REFERENCE
         AIF   (NOT &DSORG2).MACRFS    VALID FOR DA
&MACRF3  SETB  (&MACRF3 OR '&C1' EQ 'R')  IF K QUALIFIES READ
&MACRFB  SETB  (&MACRFB OR '&C1' EQ 'W')  IF K QUALIFIES WRITE
         AGO   .MACRFT                 TO  BEGIN NEW LOOP
.*
.MACRFI  AIF   ('&C2' NE 'L').MACRFJ   IF NOT BSAM LOAD BDAM MODE
         AIF   (NOT(&DSORG1 AND '&C1' EQ 'W')).MACRFS  VALID PS WRITE
&MACRFC  SETB  1                       L QUALIFIES WRITE
         AGO   .MACRFT                 TO BEGIN NEW LOOP
.*
.MACRFJ  AIF   ('&C2' NE 'I').MACRFK   IF NOT ID REFERENCE
         AIF   (NOT &DSORG2).MACRFS    VALID FOR DA
&MACRF4  SETB  (&MACRF4 OR '&C1' EQ 'R') I QUALIFIES READ
&MACRFC  SETB  (&MACRFC OR '&C1' EQ 'W') I QUALIFIES WRITE
         AGO   .MACRFT                 TO BEGIN NEW LOOP
.*
.MACRFK  AIF   ('&C2' NE 'P').MACRFM   IF NOT NOTE/POINT
         AIF   (NOT &DSORG1).MACRFS    VALID FOR PS
&MACRF5  SETB  (&MACRF5 OR '&C1' EQ 'R') IF P QUALIFIES READ
&MACRFD  SETB  (&MACRFD OR '&C1' EQ 'W') IF P QUALIFIES WRITE
         AGO   .MACRFT                 TO BEGIN NEW LOOP
.*
.MACRFM  AIF   ('&C2' NE 'S').MACRFN   IF NOT DYNAMIC BUFFERING
         AIF   (NOT (&DSORG0 OR &DSORG2)).MACRFS  VALID FOR IS,DA
         AIF   ('&C1' NE 'R').MACRFS   VALID FOR READ ONLY
&MACRF5  SETB  1                       S QUALIFIES READ
         AGO   .MACRFT                 TO BEGIN NEW LOOP
.*
.MACRFN  AIF   ('&C2' NE 'C').MACRFO   IF NOT CNTRL OR CHECK
         AIF   (&DSORG0 OR &DSORG2).MACRF6  IF IS,DA CHECK
         AIF   (NOT(&DSORG1 OR &DSORG8)).MACRFS  VALID FOR PS, GS
&MACRF6  SETB  (&MACRF6 OR '&C1' EQ 'R')  IF C QUALIFIES READ  CNTRL
&MACRFE  SETB  (&MACRFE OR '&C1' EQ 'W')  IF C QUALIFIES WRITE CNTRL
         AGO   .MACRFT                 TO BEGIN NEW LOOP
.MACRF6  ANOP                          VALID IS,DA CHECK
&MACRF6  SETB  (&MACRF6 OR &DSORG0)    IF C QUALIFIES IS R/W CHECK
&MACRF7  SETB  (&MACRF7 OR &DSORG2)    IF C QUALIFIES DA R/W CHECK
         AGO   .MACRFT                 TO BEGIN NEW LOOP
.*
.MACRFO  AIF   ('&C2' NE 'X').MACRFP   IF NOT EXCLUSIVE LOGIC
         AIF   (NOT(&DSORG2 AND '&C1' EQ 'R')).MACRFS VALID FOR DA READ
&MACRF6  SETB  1                       X QUALIFIES READ EXCLUSIVE
         AGO   .MACRFT                 TO BEGIN NEW LOOP
.*
.MACRFP  AIF   ('&C2' NE 'U').MACRFQ   IF NOT UPDATE MODE
         AIF   (NOT &DSORG0).MACRFS    VALID IF IS
&MAC4    SETB  (&MAC4 OR '&C1' EQ 'R') IF U QUALIFIES READ
&MAC5    SETB  (&MAC5 OR '&C1' EQ 'W') IF U QUALIFIES WRITE
         AGO   .MACRFT                 TO BEGIN NEW LOOP
.*
.MACRFQ  AIF   ('&C2' NE 'A').MACRFS   IF NOT ADD MODE
         AIF   (NOT (&DSORG0 OR &DSORG2) OR '&C1' NE 'W').MACRFS  IS-DA
&MACRFE  SETB  (&MACRFE OR &DSORG2)    IF DA WRITE
&MAC6    SETB  (&MAC6 OR &DSORG0)      IF IS WRITE
         AGO   .MACRFT                 TO BEGIN NEW LOOP
.*
.*  MACRF=G/P ANALYSIS FOR QSAM, QISAM, AND QTAM
.*
.MACRGA  ANOP                          SET BIT FOR MAJOR MACRO TYPE
&MACRF1  SETB  ('&C1' EQ 'G' OR &MACRF1) GET
&MACRF9  SETB  ('&C1' EQ 'P' OR &MACRF9) PUT
.*
         AIF   (K'&MACRF(&A3) GT 1).MACRGE  TO START G/P QUALIFIER LOOP
         AIF   (&DSORG3 OR &DSORG4 OR &DSORG5 OR &DSORGA).MACRFB
         AIF   (&DSORG9).MACRFB
&C2      SETC  ''                      SET NULL FOR ERROR MESSAGE
.*
.MACRGB  IHBERMAC 163,,&C2,&C1,&DSORG  INVALID QUALIFIER FOR G/P MACRF
.*
.MACRGE  ANOP                          LOOP ON MACRF ITEM QUALIFIERS
&A1      SETA  &A1+1                   STEP QUALIFIER INDEX
         AIF   (K'&MACRF(&A3) LT &A1).MACRFB  IF NO MORE QUALIFIERS
&C2      SETC  '&C0'(&A1,1)            ISOLATE QUALIFIER
.*
         AIF   ('&C2' NE 'C').MACRGD   IF NOT CNTRL
         AIF   (NOT &DSORG1).MACRGB    VALID FOR PS
&MACRF6  SETB  (&MACRF6 OR '&C1' EQ 'G')  IF C QUALIFIES GET
&MACRFE  SETB  (&MACRFE OR '&C1' EQ 'P')  IF C QUALIFIES PUT
         AGO   .MACRGE                 TO BEGIN NEW LOOP
.*
.MACRGD  AIF   ('&C2' NE 'D').MACRGL   IF NOT MOVE DATA MODE
         AIF   (NOT &DSORG1).MACRGB    VALID FOR PS
&MACRF3  SETB  (&MACRF3 OR '&C1' EQ 'G')  IF D IMPLIES M FOR GET
&MACRF7  SETB  (&MACRF7 OR '&C1' EQ 'G')  IF D QUALIFIES GET
&MACRFB  SETB  (&MACRFB OR '&C1' EQ 'P')  IF D IMPLIES M FOR PUT
&MACRFF  SETB  (&MACRFF OR '&C1' EQ 'P')  IF D QUALIFIES PUT
         AGO   .MACRGE                 TO BEGIN NEW LOOP
.*
.MACRGL  AIF   ('&C2' NE 'L').MACRGM   IF NOT LOCATE MODE
         AIF   (NOT(&DSORG0 OR &DSORG1)).MACRGB  VALID FOR IS-PS
&MACRF4  SETB  (&MACRF4 OR '&C1' EQ 'G')  IF L QUALIFIES GET
&MACRFC  SETB  (&MACRFC OR '&C1' EQ 'P')  IF L QUALIFIES PUT
         AGO   .MACRGE                 TO BEGIN NEW LOOP
.*
.MACRGM  AIF   ('&C2' NE 'M').MACRGT   IF NOT MOVE MODE
         AIF   (NOT(&DSORG0 OR &DSORG1)).MACRGB  VALID FOR IS-PS
&MACRF3  SETB  (&MACRF3 OR '&C1' EQ 'G')  IF M QUALIFIES GET
&MACRFB  SETB  (&MACRFB OR '&C1' EQ 'P')  IF M QUALIFIES PUT
         AGO   .MACRGE                 TO BEGIN NEW LOOP
.*
.MACRGT  AIF   ('&C2' NE 'T').MACRGU   IF NOT SUBSTITUTE MODE
         AIF   (NOT &DSORG1).MACRGB    VALID FOR PS
&MACRF5  SETB  (&MACRF5 OR '&C1' EQ 'G')  IF T QUALIFIES GET
&MACRFD  SETB  (&MACRFD OR '&C1' EQ 'P')  IF T QUALIFIES PUT
         AGO   .MACRGE                 TO BEGIN NEW LOOP
.*
.MACRGU  AIF   ('&C2' NE 'U').MACRGB   IF NOT UPDATE MODE
         AIF   (NOT(&DSORG0 AND '&C1' EQ 'P')).MACRGB  VALID FOR IS PUT
&MACRFD  SETB  1                       U QUALIFIES PUT
         AGO   .MACRGE                 TO BEGIN NEW LOOP
.*
.*  MACRF=S ANYALYSIS FOR QISAM
.*
.MACRSA  ANOP                          SET BIT FOR MAJOR MACRO TYPE
&MACRF8  SETB  1                       SETL
         AIF   (K'&MACRF(&A3) EQ 1).MACRFB  IF NO QUALIFIER
&C2      SETC  '&C0'(2,1)              ISOLATE QUALIFIER
         AIF   (NOT('&C2' EQ 'I' OR '&C2' EQ 'K')).MACRSB  VALID IF I K
&MACRFE  SETB  (&MACRFE OR '&C2' EQ 'K')  IF K QUALIFIES SETL
&MACRFF  SETB  (&MACRFF OR '&C2' EQ 'I')  IF I QUALIFIES SETL
         AIF   (K'&MACRF(&A3) EQ 2).MACRFB  RETURN IF 1 QUALIFIER
&C2      SETC  '&C0'(3,8)              ISOLATE EXTRA QUALIFIERS
.MACRSB  IHBERMAC 163,,&C2,S,&DSORG    INVALID QUALIFIER FOR S MACRF
         AGO   .MACRFB                 RETURN TO BEGIN NEW LOOP
.*
.MACRFX  AIF   (NOT &DSORG6).MACRFY    IF NOT PO
&MACRF5  SETB  (&MACRF5 OR &MACRF2)    IF PO, READ  IMPLIES NOTE/POINT
&MACRFD  SETB  (&MACRFD OR &MACRFA)    IF PO, WRITE IMPLIES NOTE/POINT
.MACRFY  AIF   (&DSORG8).OPTCDX        IF GRAPHICS, SKIP RECFM + OPTCD
.*---------------------------------------------------------------------
.*
.*                      ANALYZE RECFM
.*
&RECFM0  SETB  0
&RECFM1  SETB  0                       ZERO SWITCHES
&RECFM2  SETB  0
&RECFM3  SETB  0
&RECFM4  SETB  0
&RECFM5  SETB  0
&RECFM6  SETB  0
&RECFM7  SETB  0
.*
&A1      SETA  K'&RECFM                SET NUMBER OF ELEMENTS
.RECFMA  AIF   (&A1 EQ 0).RECFMX       LOOP RETURN-IF 0, ALL DONE
&C0      SETC  '&RECFM'(&A1,1)         ISOLATE ELEMENT
         AIF   ('&C0' NE 'F').RECFMB   IF NOT FIXED LENGTH
         AIF   (NOT (&DSORG0 OR &DSORG1 OR &DSORG2 OR &DSORG6 OR &MACRF*
               0)).RECFML              IF VALID CONTEXT
&RECFM0  SETB  1
         AGO   .RECFMK                 TO START NEW LOOP
.RECFMB  AIF   ('&C0' NE 'V').RECFMC   IF NOT VARIABLE LENGTH
         AIF   (NOT (&DSORG0 OR &DSORG1 OR &DSORG2 OR &DSORG6 OR &MACRF*
               0)).RECFML              IF VALID CONTEXT
&RECFM1  SETB  1
         AGO   .RECFMK                 TO START NEW LOOP
.RECFMC  AIF   ('&C0' NE 'U').RECFMD   IF NOT UNKNOWN FORMAT
         AIF   (NOT (&DSORG1 OR &DSORG2 OR &DSORG6 OR &MACRF0)).RECFML
&RECFM0  SETB  1
&RECFM1  SETB  1
         AGO   .RECFMK                 TO START NEW LOOP
.RECFMD  AIF   ('&C0' NE 'D').RECFMD1   IF NOT D-FORMAT          S20038
         AIF   (NOT &DSORG1).RECFML                              S20038
&RECFM2  SETB  1                        D-FORMAT                 S20038
         AGO   .RECFMK       TO START NEW LOOP                   S20038
.RECFMD1 AIF   ('&C0' NE 'B').RECFME    IF NOT BLOCKED RECORDS   S20038
         AIF   (NOT (&DSORG0 OR &DSORG1 OR &DSORG2 OR &DSORG6 OR &MACRFX
               0)).RECFML          GOTO MNOTE
&RECFM3  SETB  1
         AGO   .RECFMK                 TO START NEW LOOP
.RECFME  AIF   ('&C0' NE 'S').RECFMF   IF NOT STANDARD RECORDS
         AIF   (NOT (&DSORG1 OR &DSORG2 OR &DSORG5 OR &DSORG6 OR &MACRFX
               0)).RECFML          GOTO MNOTE
&RECFM4  SETB  1
         AGO   .RECFMK                 TO START NEW LOOP
.RECFMF  AIF   ('&C0' NE 'A' AND '&C0' NE 'G').RECFMG
         AIF   ('&C0' EQ 'A' AND NOT (&DSORG1 OR &MACRF0)).RECFML
         AIF   ('&C0' EQ 'G' AND NOT (&DSORG5 OR &MACRF0)).RECFML
&RECFM5  SETB  1
         AGO   .RECFMK                 TO START NEW LOOP
.RECFMG  AIF   ('&C0' NE 'M' AND '&C0' NE 'R').RECFMI
         AIF   ('&C0' EQ 'M' AND NOT (&DSORG1 OR &MACRF0)).RECFML
         AIF   ('&C0' EQ 'R' AND NOT (&DSORG5 OR &MACRF0)).RECFML
&RECFM6  SETB  1
         AGO   .RECFMK
.RECFMI  AIF   ('&C0' NE 'T').RECFMJ   IF NOT TRACK OVERFLOW
         AIF   (NOT (&DSORG0 OR &DSORG1 OR &DSORG2 OR &DSORG6 OR &MACRF*
               0)).RECFML
&RECFM2  SETB  1
         AGO   .RECFMK                 TO  START NEW LOOP
.RECFML  IHBERMAC 164,,&C0,&DSORG      RECFM INVALID WITH DSORG
         AGO   .RECFMK                 TO START NEW LOOP
.RECFMJ  IHBERMAC 148,RECFM,&C0        INVALID CODE FOR RECFM IGNORED
.RECFMK  ANOP
&A1      SETA  &A1-1                   STEP ELEMENT INDEX
         AGO   .RECFMA                 TO REPEAT LOOP
.RECFMX  ANOP
.*---------------------------------------------------------------------
.*
.*                      ANALYZE OPTCD
.*
&OPTCD0  SETB  0                       ZERO SWITCHES
&OPTCD1  SETB  0
&OPTCD2  SETB  0
&OPTCD3  SETB  0
&OPTCD4  SETB  0
&OPTCD5  SETB  0                                                   RER1
&OPTCD6  SETB  0
&OPTCD7  SETB  0
.*
&A1      SETA  K'&OPTCD                SET ELEMENT INDEX
         AIF  (T'&OPTCD EQ 'O' AND (&DSORG9 OR &DSORGA)).OPTCDX SA76501
.OPTCDB  AIF   (&A1 LE 0).OPTCDX       LOOP RETURN-IF 0, ALL DONE
&C0      SETC  '&OPTCD'(&A1,1)         ISOLATE ELEMENT
         AIF   (&DSORG3 OR &DSORG4 OR &DSORG5).OPTCDJ
         AIF   ('&C0' NE 'W').OPTCDA   IF NOT WRITE CHECK
         AIF   (NOT (&DSORG0 OR &DSORG1 OR &DSORG2 OR &DSORG6)).OPTCDJ
&OPTCD0  SETB  1
         AGO   .OPTCDI                 TO START NEW LOOP
.OPTCDA  AIF   ('&C0' NE 'U').OPTCDC
         AIF   (NOT (&DSORG0 OR &DSORG1)).OPTCDJ
&OPTCD1  SETB  1
         AGO   .OPTCDI                 TO START NEW LOOP
.OPTCDC  AIF   ('&C0' NE 'C' AND '&C0' NE 'M' AND '&C0' NE 'E').OPTCDD
         AIF   ('&C0' EQ 'M' AND NOT &DSORG0).OPTCDJ
         AIF   ('&C0' EQ 'E' AND NOT &DSORG2).OPTCDJ
         AIF   ('&C0' EQ 'C' AND NOT (&DSORG1 OR &DSORG6 OR &DSORGA)).O*
               PTCDJ
&OPTCD2  SETB  1
         AGO   .OPTCDI                 TO START NEW LOOP
.OPTCDD  AIF   ('&C0' NE 'I' AND '&C0' NE 'F' AND '&C0' NE 'O' AND '&C0X
               ' NE 'H').OPTCDE
         AIF   ('&C0' EQ 'I' AND NOT (&DSORG0 OR                       *
               &DSORGA)).OPTCDJ                                  ICB447
         AIF   ('&C0' EQ 'F' AND NOT &DSORG2).OPTCDJ
         AIF   (('&C0' EQ 'O' OR '&C0' EQ 'H') AND NOT &DSORG1).OPTCDJ
         AIF   ('&C0' EQ 'O' AND NOT &MACRF1).OPTCDL
         AIF   ('&C0' EQ 'H' AND NOT &MACRF2).OPTCDL
&OPTCD3  SETB  1
         AGO   .OPTCDI                 TO START NEW LOOP
.OPTCDE  AIF   ('&C0' NE 'Y' AND '&C0' NE 'A' AND '&C0' NE 'Q').OPTCDF
         AIF   ('&C0' EQ 'Y' AND NOT &DSORG0).OPTCDJ
         AIF   ('&C0' EQ 'A' AND NOT &DSORG2).OPTCDJ
         AIF   ('&C0' EQ 'Q' AND (NOT &DSORG1)).OPTCDJ
&OPTCD4  SETB  1
         AGO   .OPTCDI                 TO START NEW LOOP
.OPTCDF  AIF   ('&C0' NE 'R').OPTCDG
         AIF   (NOT (&DSORG0 OR &DSORG2 OR &DSORGA)).OPTCDJ
&OPTCD7  SETB  1
         AGO   .OPTCDI                 TO START NEW LOOP
.OPTCDG  AIF   ('&C0' NE 'L' AND '&C0' NE 'T').OPTCDK
         AIF   (NOT (&DSORG0 OR &DSORG1 OR &DSORGA)).OPTCDJ
&OPTCD6  SETB  1
         AGO   .OPTCDI                 TO START NEW LOOP
.OPTCDK  AIF   ('&C0' NE 'Z').OPTCDH                               RER1
         AIF   (NOT (&DSORG1 OR &MACRF0)).OPTCDJ                   RER1
&OPTCD5  SETB  1                                                   RER1
         AGO   .OPTCDI    TO START NEW LOOP.                       RER1
.OPTCDJ  IHBERMAC 165,,&C0,&DSORG      OPTCD INVALID WITH DSORG
         AGO   .OPTCDI                 TO START NEW LOOP
.OPTCDL  IHBERMAC 171
         AGO   .OPTCDI
.OPTCDLH ANOP
&C0      SETC  '&OPTCD'
.OPTCDH  IHBERMAC 149,OPTCD,&C0        INVALID CODE FOR OPTCD IGNORED
.*
.OPTCDI  ANOP
&A1      SETA  &A1-1                   STEP ELEMENT INDEX
         AGO   .OPTCDB                 TO REPEAT LOOP
.OPTCDX  ANOP
.*---------------------------------------------------------------------
.*
.*                      ANALYZE NEGATIVE ORIGIN OFFSET
.*
&A0      SETA  0                       ZERO ACCUMULATOR
         AIF   ('&DSORG8' EQ '1').ORG3X
         AIF   (NOT (&MACRF0 AND NOT (&MACRF1 OR &MACRF3))).ORG1
&A0      SETA  40                      SET NEGATIVE OFFSET
         MEXIT                         RETURN TO OUTER MACRO
.*
.*                 DEVICE DEPENDENT INTERFACE
.*
.ORG1    AIF   (T'&DEVD EQ 'O').ORG10
         AIF   ('&DEVD' EQ 'LD').ORG10                         @SA78498
         AIF   ('&DEVD' EQ 'BS').ORG1A
         AGO   .ORG1B         IF DEVD CODED
.ORG10   AIF   (&DSORG1 OR &DSORG6).ORG3W  IF PS OR PO
         AIF   (NOT &MACRF0).ORG1A     IF NOT EXCP
&A0      SETA  4                       SET NEGATIVE OFFSET FOR DA
         AGO   .ORG3W                  SKIP TO FINISH
.ORG1A   ANOP
&A0      SETA  16                      SET NEGATIVE OFFSET FOR IS/DA
         AIF   (&DSORG0 OR &DSORG2).ORG3W IF IS OR DA SKIP TO FINISH
&A0      SETA  20                      OTHERWISE NO DEVD INTERFACE
         AGO   .ORG3W                  SKIP TO FINISH
.*
.ORG1B   AIF   (K'&DEVD NE 2).ORG1G     IF INVALID LENGTH
         AIF   ('&DEVD' EQ 'WT').ORG1H
         AIF   (NOT (&DSORG1 OR &DSORG6 OR &MACRF0)).ORG1G INVALID CODE
         AIF   ('&DEVD' NE 'DA').ORG1C IF NOT DA INTERFACE
         AIF   (&DSORG1 OR &DSORG6).ORG3W  IF PS OR PO
&A0      SETA  4                       SET NEGATIVE OFFSET
         AGO   .ORG3W                  SKIP TO FINISH
.*
.ORG1C   AIF   (NOT (&DSORG1 OR &MACRF0)).ORG1G  INVALID CODE
         AIF   ('&DEVD' NE 'TA').ORG1D IF NOT MAGNETIC TAPE INTERFACE
         AIF   (&DSORG1).ORG3W         IF PS
&A0      SETA  4                       SET NEGATIVE OFFSET
         AGO   .ORG3W                  SKIP TO FINISH
.*
.ORG1D   AIF   ('&DEVD' NE 'PT').ORG1E IF NOT PAPER TAPE INTERFACE
&A0      SETA  8                       SET NEGATIVE OFFSET
         AGO   .ORG3W                  SKIP TO FINISH
.*
.ORG1E   AIF   ('&DEVD' NE 'RD' AND '&DEVD' NE 'PC' AND '&DEVD' NE 'PR'*
               ).ORG1F                 IF NOT UNIT RECORD INTERFACE
&A0      SETA  16                      SET NEGATIVE OFFSET
         AGO   .ORG3W                  SKIP TO FINISH
.ORG1F   AIF   ('&DEVD' EQ 'OR' AND &DSORG1).ORG3W
.*
         AIF   ('&DEVD' EQ 'MR' AND &DSORG1).ORG3W
.ORG1G   IHBERMAC 166,,&DEVD,&DSORG
         AGO   .ORG3W
.ORG1H   ANOP
&A0      SETA  16
.ORG3W   AIF   (NOT &MACRF0).ORG3X
&MACRFC  SETB  (&A0 EQ 0)
&MACRFD  SETB  (&A0 EQ 4)
&MACRFE  SETB  (&A0 EQ 8)
&MACRFF  SETB  (&A0 EQ 16)
.ORG3X   MEND
SUBR     TITLE     'E32 (DECEMBER 18, 1969)'
*
* THIS SOURCE IS BASED UNIV ARIZONA'S V3.11 VERSION
* ADDED DATER ROUTINE FROM MTS TO HAVE V3.5 COMPATIBILITY
* AS A CONSEQUENCE, THE DISASSEMBLED MODULE IS NOT USED
* INDEX/BASE REGISTERS ARE LEFT AS IS.
*
SUBR     CSECT
         ENTRY     ALPHA
         ENTRY     APDSP
         ENTRY     BDSPEC
         ENTRY     BIOPTB
         ENTRY     CARDTB
         ENTRY     COMPLG
         ENTRY     COPL
         ENTRY     DATER
         ENTRY     DECBIN
         ENTRY     ELEMTB
         ENTRY     EOSTB
         ENTRY     EXREAL
         ENTRY     FINIS
         ENTRY     FRWDTB
         ENTRY     GBAL
         ENTRY     GOTOTB
         ENTRY     IBLKTB
         ENTRY     LASTDUMP
         ENTRY     LBLTB
         ENTRY     LBLXTB
         ENTRY     LINKER
         ENTRY     LOADER
         ENTRY     LVAL
         ENTRY     MEMLEN          LENGTH OF FREE STORAGE ALLOCATED.
         ENTRY     MOVTST
         ENTRY     NUMBTB
         ENTRY     REALST
         ENTRY     RPLCE
         ENTRY     SNABTB
         ENTRY     SPECEQ
         ENTRY     SPIECUT
         ENTRY     SPIECUT2            ERROR RETURN FROM FORTRAN I/O
         ENTRY     SPIECUTF
         ENTRY     SPIESAVE
         ENTRY     SPREAL
         ENTRY     STINT
         ENTRY     STPRNT
         ENTRY     STREAD
         ENTRY     STREAM
         ENTRY     UNLOADER
         ENTRY     UNOPTB
         ENTRY     VARATB
         EXTRN     ADDFN
         EXTRN     AROWFN
         EXTRN     ATFN
         EXTRN     BARFN
         EXTRN     BIAMFN
         EXTRN     BIATFN
         EXTRN     BINGFN
         EXTRN     BIPDFN
         EXTRN     BIPRFN
         EXTRN     BIQSFN
         EXTRN     DATA              IS RENAMZD TO COMMIN IN 3.11
         EXTRN     DIVFN
         EXTRN     DOLFN
         EXTRN     DOTFN
         EXTRN     EXPFN
         EXTRN     IBCOM#
         EXTRN     INDFN
         EXTRN     INTR10
         EXTRN     KEYFN
         EXTRN     MNSFN
         EXTRN     MPYFN
         EXTRN     NAMFN
         EXTRN     NEGFN
         EXTRN     OBLIST
         EXTRN     ORFN
         EXTRN     PDFN
         EXTRN     PLSFN
         EXTRN     PRFN
         EXTRN     QUESFN
         EXTRN     RETCOD
         EXTRN     SAVESAVE
         EXTRN     SAVE13
         EXTRN     SLHFN
         EXTRN     STRFN
         EXTRN     STYPE
         EXTRN     SUBFN
         EXTRN     SYSCUT
         TITLE     'CONSTANTS'
DESCR    EQU       8                   ADDRESS WIDTH OF DESCRIPTOR.
S        EQU       1
I        EQU       6
R        EQU       7
L        EQU       12
ARGSZ    EQU       20                  TEMP MAX NO OF ARGUMENTS
LSTARG   EQU       128                 HEX 80
         TITLE     'SYSTEM PARAMETERS'
BCDFLD   EQU       4*DESCR
LNKFLD   EQU       3*DESCR
OBSIZ    EQU       256
         TITLE     'APDSP'
         USING     APDSP,15
APDSP    CR        0,3                 TEST FOR NULL APPENDAGE.
         BE        0(14)
         AR        4,5                 COMPUTE TOTAL ADDRESS OF SP2
         LM        5,7,0(2)            GET SP1
         AR        6,7                 ADDRESS OF SP1
         AR        6,5                 OFFSET ADDRESS TO APPEND TO
         AR        5,3                 TOTAL LENGTH OF NEW SP1
         ST        5,0(2)              SET INTO SP1
*        AT THIS POINT, THE FOLLOWING REGISTERS HAVE BEEN LOADED.
*        R6 - ADDRESS TO START MOVING INTO.
*        R4 - ADDRESS OF SP2
*        R3 - LENGTH OF STRING TO BE MOVED.
MOVLOP   LA        2,256
         CR        3,2
*                                      FOR ONE MOVE.
         BNH       MOVSHORT            REMAINDER CAN BE MOVED IN ONE
*                                      INSTRUCTION.
         MVC       0(256,6),0(4)       MOVE 256 BYTES.
         AR        6,2
         AR        4,2
         SR        3,2
         B         MOVLOP
MOVSHORT BCTR      3,0
         EX        3,MOVEX             EXECUTE THE SHORT MOVE.
         BR        14
         USING     *,15
MOVTST   LA        2,256
         CR        3,2
         BNH       MVVSHORT
         MVC       0(256,6),0(4)
         AR        6,2
         AR        4,2
         SR        3,2
         B         MOVTST
MVVSHORT BCTR      3,0
         EX        3,MOVEX
         BR        14
MOVEX    MVC       0(0,6),0(4)         SHORT MOVE. LENGTH IS 'ORED' IN
         LTORG
         TITLE     'BDSPEC'
         USING     BDSPEC,15
BDSPEC   L         2,0(2)              GET NUMBER
         CR        2,0
         BE        BDSZ                ZERO
         BH        BDPLUS              POSITIVE.
         LA        6,1                 RAISE NEGATIVE FLAG.
         LCR       2,2                 COMPLEMENT NUMBER.
BDCNV    CVD       2,BDPBUF            CONVERT FROM BINARY TO DECIMAL.
         UNPK      BDBUF(12),BDPBUF(8)
         OI        BDBUF+11,X'F0'      FIX LAST CHARACTER.
         L         3,=A(BDBUF)         FIND START OF STRING.
         LA        4,1
         LA        5,BDBUF+11
BDLOOP   CLI       0(3),X'F0'
         BNE       BDA
         BXLE      3,4,BDLOOP
BDA      CR        6,0                 IS NEGATIVE FLAG UP.
         BE        BDB             NO.
         SR        3,4                 YES, BACK UP PTR.
         MVI       0(3),C'-'           INSERT MINUS SIGN.
BDB      LR        5,3                 ADDR FIELD OF SPEC IN R5.
         L         4,=A(BDBUF)
         LA        4,12(4)
         SR        4,3
         LR        3,4
BDC      SR        4,4                 ZERO OFFSET IN R4.
         LR        6,0
         STM       3,6,0(1)            SET TARGET SPECIFIER.
         BR        14
BDSZ     MVI       BDBUF,C'0'          SET VALUE ZERO.
         LA        5,BDBUF
         LA        3,1
         B         BDC
BDPLUS   SR        6,6                 RAISE POSITIVE FLAG.
         B         BDCNV
         DC        0D'0'              PS
BDBUF    DC        XL12'00'           PS
         DC        0D'00'             PS
BDPBUF   DC        XL8'00'            PS
         LTORG
         TITLE     'COPL'
         USING     COPL,15
COPL     ST        4,RESID             PUT RESIDULA IN RESID
         LR        1,2
         L         2,0(2)
         ST        5,THSORG            PUT THSORG INTO THSORG.
         ST        6,NXTORG            PUT NXTORG INTO NXTORG.
COPL1    LM        4,5,8(3)            MOVE PROC AND ARGNO TO NEW
         STM       4,5,8(2)            PATTERN.
         LR        4,5                 SAVE ARGUMENT NUMBER.
         L         5,16(3)             GET OR FIELD.
         CR        0,5                 COMPARE TO ZERO.
         BE        COPL2               IF OR ZERO, XFER AND DO NOTHING
         A         5,THSORG            IF OR NOT ZERO, ADD THSORG.
COPL2    L         6,20(3)             GET THEN FIELD.
         CR        0,6                 COMPARE TO ZERO.
         BE        COPL3               IF THEN ZERO, XFERAND USE NXTORG
         A         6,THSORG            THEN NOT ZERO, ADD THSORG.
         B         COPL4
COPL3    L         6,NXTORG            USE NXTORG FOR ZERO THEN FIELD.
COPL4    STM       5,6,16(2)           MOVE THEN AND OR TO NEW PATTERN.
         LM        5,6,24(3)
         A         5,RESID             ADD RESID TO VALUE.
         A         6,RESID             ADD RESID TO RESIDUAL.
         STM       5,6,24(2)
         LA        4,0(4)
         S         4,=F'2'             DISCOUNT THEN-OR
         BZ        COPL5
         LM        5,6,32(3)           NON ZERO, MUST BE ONE ARGUMENT.
         STM       5,6,32(2)
         LA        4,32
         B         COPL6
COPL5    LA        4,24
COPL6    AR        2,4                 ADJUST TOPTR.
         AR        3,4                 ADJUST FRMPTR.
         SR        7,4                 SUBTRACT NODSIZ FROM PLXSIZ.
         BH        COPL1               BRANCH IF MORE NODES
         ST        2,0(1)              STORE UPDATED TOPTR BACK
         BR        14
RESID    DC        F'0'              PS
THSORG   DC        F'0'              PS
NXTORG   DC        F'0'              PS
         DC        F'0'              PS
         LTORG
         TITLE     'DATE ROUTINE'
         USING     DATER,15
DATER    LR        7,15
         STM       13,1,ADSAVE
         L         13,=A(SAVESAVE)
         TIME      TU                  GET THE DATE;  IT IS PUT IN REG
         LR        15,7
         ST        1,PACKEDDT+4        STORE DATE
         LM        13,1,ADSAVE
         CVB       7,PACKEDDT          CONVERT TO BINARY, STORE IN 7
         ST        7,INTEDAT           STORE BINARY DATE
         SR        6,6
         D         6,ONETHOU           DIVIDE BY 1000
         ST        7,YEAR              STORE YEAR
         MVC       LYD(1),YEAR+3       PUT LAST 8 YEAR BITS IN LYD
         NI        LYD,X'03'           CHECK IF LEAP YEAR
         LA        3,SYTABLE           PUT ADRESS OF STD YEAR TABLE IN
         BC        7,DETMONTH          BRANCH IF NOT LEAP YEAR
         LA        3,LYTABLE           PUT ADDRESS OF LEAP YEAR TABLE I
DETMONTH M         6,ONETHOU           MULTIPLY YEAR BY 1000, PUT I
         S         7,INTEDAT           THIS PUTS DAY IN
         LPR       7,7                 MAKE DAY POSITIVE
         LR        2,7                 STORE OS DAY IN REG 2
         D         6,THIRTY            DIVIDE OS DAY BY 30
         LR        4,7                 USE 4 FOR MONTH
         M         6,TWO               MULTIPLY BY TWO TO INDEX BYTES I
         S         3,TWO
         CH        2,0(7,3)            COMPARE DAY WITH TABLE VALUE (RE
         BC        2,INCRMONT          IF DAY VALUE G.T. TABLE VALUE, I
         S         3,TWO               SET POINTER TO GET CORRECT SUBTR
         B         COMPDAY
INCRMONT A         4,ONE               INCREMENT MONTH
COMPDAY  SH        2,0(7,3)            COMPUTE DAY OF MONTH
         CVD       4,PRESULT           MONTH TO PACKED DECIMAL
         UNPK      ZRESULT(2),PRESULT(8)
         OI        ZRESULT+1,C'0'      GET RID OF SIGN
         MVC       DBUF(2),ZRESULT     MOVE MONTH TO ARGUMENT LOCATION
         CVD       2,PRESULT           DAY TO PACKED DECIMAL
         UNPK      ZRESULT(2),PRESULT(8)
         OI        ZRESULT+1,C'0'      GET RID OF SIGN
         MVC       DBUF+3(2),ZRESULT
         L         5,YEAR              LOAD 5 FROM YEAR
         CVD       5,PRESULT           YEAR TO PACKED DECIMAL
         UNPK      ZRESULT(2),PRESULT(8)
         OI        ZRESULT+1,C'0'      GET RID OF SIGN
         MVC       DBUF+6(2),ZRESULT   PUT IN YEAR
         LA        2,8                 LENGTH
         LA        3,0                 OFFSET
         LA        4,DBUF              ADDRESS
         LA        5,0                 FALG AND VALUE
         STM       2,5,0(1)
         BR        14
         CNOP      2,4
         CNOP      0,8
PACKEDDT DC        PL8'0'              PACKED DATE
PRESULT  DC        PL8'0'
INTEDAT  DC        F'0'
ONE      DC        F'1'
TWO      DC        F'2'
THIRTY   DC        F'30'
ONETHOU  DC        F'1000'
YEAR     DC        F'0'
         DC        H'0'
SYTABLE  DC        H'31,59,90,120,151,181,212,243,273,304,334,365'
         DC        H'0'
LYTABLE  DC        H'31,60,91,121,151,182,213,244,274,305,335,366'
LYD      DC        X'00'
ZRESULT  DC        CL2'  '             ZONED INTERMEDIATE RESULT
DBUF     DC        C'  /  /  '
ADSAVE   DC        5F'0'
         TITLE     'DECBIN'
         USING     DECBIN,15
DECBIN   LM        2,4,0(2)            GET SPECIFIER
         CR        0,2                 IS STRING LENGTH ZERO.
         BNE       DBCA
DBCAA    ST        0,0(1)              YES, RETURN ZERO.
         B         DBCRET
DBCA     AR        3,4
         LA        4,1
         LR        5,2
         SR        5,4
         AR        5,3                 GET PTR TO LAST CHARACTER.
         CLI       0(3),C'-'           IS FIRST CHARACTER - ?
         BNE       DBCB
         BXH       3,4,0(14)           UPDATE CHARACTER POINTER
         SR        2,4                 REDUCE LENGTH.
         LR        6,4                 RAISE NEGATIVE FLAG.
         B         DBCD
DBCB     CLI       0(3),C'+'           IS FIRST CHARACTER + ?
         BNE       DBCC
         BXH       3,4,0(14)           UPDATE CHARACTER POINTER
         SR        2,4                 REDUCE LENGTH.
DBCC     LR        6,0                 RAISE POSITIVE FLAG.
DBCD     CLI       0(3),C'0'           REMOVE LEADING ZEROS.
         BNE       DBCDA
         BXH       3,4,DBCAA
         BCTR      2,0
         B         DBCD
DBCDA    C         2,=F'10'
         BH        0(14)
         LR        7,3                 SAVE PTR TO FIRST CHAR.
DBCE     CLI       0(3),X'F0'          IS CHARACTER NUMERIC?
         BL        0(14)
         CLI       0(3),C'9'
         BH        0(14)
         BXLE      3,4,DBCE            YES-LOOP.
         BCTR      2,0
         CR        0,6                 IF NEGATIVE,
         BE        DBCEA
         NI        0(5),X'BF'          CHANGE SIGN.
DBCEA    EX        2,DBCPACK
         OI        0(5),X'F0'
         CP        DBCBUF(8),=P'2147483647'
         BH        0(14)
         CP        DBCBUF(8),=P'-2147483648'
         BL        0(14)
         CVB       5,DBCBUF            BINARY.
         ST        5,0(1)
DBCRET   LA        2,I
         ST        2,4(1)              SET INTEGER DATA TYPE
         B         4(14)
*        DS        0D
         DC        C' UNITL'           LKED GARBAGE
*BCBUF   DS        CL8
DBCBUF   DC        CL8'IMIT ON '       LKED GARBAGE
DBCPACK  PACK      DBCBUF(8),0(0,7)
         DC        CL2'D '             LKED GARBAGE
         LTORG
         TITLE     'EXREAL'
         USING     *,15
EXREAL   STM       14,2,EXSAVE
         LTER      0,0                 IF BASE IS ZERO,
         BE        EXFAIL              ERROR
         LTER      2,2
         BE        LOAD1               IF EXPONENT IS ZERO,GO TO LOAD1
         STE       0,BASE
         STE       2,EXP
         BAL       14,LOG              GET LOG OF BASE IN FR0
         LE        2,EXP
         MER       0,2
         BAL       14,CEXP
EGRESS   LM        14,2,EXSAVE
         B         4(14)               SUCCESS RETURN.
LOAD1    LE        0,ONER
         B         EGRESS
EXFAIL   LM        14,2,EXSAVE
         BR        14                  ERROR RETURN.
LOG      L         0,BASE
         LTR       0,0
         BNH       EXFAIL
         SRDL      0,24
         SRL       1,8
         ST        1,ARGR              STORE MANTISSA M ALONE.
         OI        ARGR,X'40'          AND FLOAT IT
         SLL       0,2                 4*CHAR IN GR0
         STH       0,IPART+2           SAVE THIS IN FLOAT FORM.
         SR        2,2
         SRL       1,21                LET A BE 1,1/4, OR 1/16, IF M IS
         IC        2,TABLE(1)          (1/2,1),(1/8,1/2),(1/16,1/8)
         LE        0,ARGR              OBTAIN Z= (M-A)/(M+A)
         LER       2,0
         SE        0,ONER(2)
         AE        2,ONER(2)           POSSIBLY ONLY 21 SIGNIF BITS HER
         DER       0,2
         STE       0,ARGR              Z READY.
         MER       0,0                 Z**2
         LE        2,C4                COMPUTE LOG((1+Z)/(1-Z)) USING
         MER       2,0                 CHEBYSHEV POLYNOMIAL
         AE        2,C3
         MER       2,0
         AE        2,C2
         MER       2,0
         AE        2,C1
         MER       2,0
         LE        0,ARGR
         MER       2,0
         AER       2,0
         AER       2,0
         LE        0,IPART             4*(P+64)
         SRL       2,1                 0 OR 2 OR 4 = - LOG(A) BASE 2
         LA        2,256(2)            4*64-LOG2(A)
         STH       2,IPART+2           STORE THIS AND FLOAT IT
         SE        0,IPART             4*P+LOG2(A)
         ME        0,LOGE2
         ADR       0,2                 NATURAL LOG READY.
         BR        14
CEXP     CE        0,MAX
         STE       0,BASE
         BH        EXFAIL
         CE        0,MIN
         BH        OK1
         SER       0,0                 IF VERY SMALL,GIVE 0 ANSWER.
         B         EGRESS              RETURN 1.
OK1      STE       0,BASE
         L         1,BASE
         SLDL      0,8
         N         0,=X'0000007F'      CHARACTERISTIC OF X.
         CH        0,SMALL             =X'0039'
         BH        OK2
         LE        0,ONER              IF |X| < 2**-28,
         BR        14                  RETURN 1.
OK2      SRL       1,1                 NORMAL CASE.  MANTISSA OF X GR0(
         SLL       0,2
         LCR       2,0                 -4*CHARACTERISTIC
         M         0,LOG2E             LOG E BASE 2 IN B1. PRODUCT IN B
         SRDL      0,287(2)            |R| IN GR0, |S+T| IN GR1
         LTER      0,0
         BNH       OK3                 IF X <1 0, BRANCH
         X         0,ALLF              OTHERWISE, -R = -R(R'+1) IN GR0,
         X         1,ALLF              S+T = 4-(S'+T'
OK3      SLL       0,24
         LR        2,0                 SAVE -R IN GR2(B7). CHAR MODIFIE
         SLDL      0,2                 S IN GR0 LOW, T IN GL1 HIGH
         LR        3,0                 SAVE S IN GR3, FOR SHIFT COUNT
         SRL       1,4                 T           (B3)
         LR        6,1                 SAVE T     IN GR6 (B3)
         MR        0,1                 T*T               (B7)
         LR        5,0
         M         4,C                 C*T*T      IN GR4  (B4)
         A         0,A
         LR        5,0                 A+T+T      IN GR1   (B3)
         L         0,B
         DR        0,5                 B/(A+T*T)   IN GR1   (B3)
         SR        1,6
         SRL       1,1                 -T+B/(A+T*T) IN GR1   (B4)
         A         1,D
         AR        1,4                 C*T*T+D-T+B/(A+T*T)  (B4)
         LR        4,6
         SRL       4,2                 2**T          (B6)
         DR        4,1                 2*T/(C*T*T+D-T+B)/(A+T*T))  (B1)
         A         5,FXONE             2**(-T) NOW READY IN B1
         SRL       5,0(3)              (2**-S)(2**-T) READY  (B1)
         A         5,FUDGE             ROUND AND FLOAT
         C         5,FXONE             THIS NUMBER
         BL        OK4
         L         5,ONER
         B         JOIN
OK4      SRL       5,6
         O         5,FXONE             BASE CHARACTERISTIC
JOIN     SR        5,2                 ADJUST CHARACTERISTIC WITH -R
         ST        5,ARGR
         LE        0,ARGR
         BR        14
         DC        C'UT'
BASE     DS        0F F
         DC        C'ION '             LKED GARBAGE
EXP      DS        0F F
         DC        C'OF S'             LKED GARBAGE
EXSAVE   DS        0F 5F
         DC        CL20'TATEMENT WITH COMPIL'     LKED GRABAGE
ARGR     DS        0F F
         DC        C'ATIO'
IPART    DC        X'46000000'
TABLE    DC        X'0804040400000000'
ONER     DC        X'41100000'         1     FOLLOWING THREE CONSTANTS
         DC        X'40400000'         1/4      BE CONSECUTIVE
         DC        X'40100000'         1/16
C4       DC        E'0.28157778'
C3       DC        E'0.27965158'
C2       DC        E'0.40024595'
C1       DC        E'0.66666322'
MAX      DC        E'174.673'
MIN      DC        E'-180.218'
ALLF     DC        X'FFFFFFFF'
LOGE2    DC        X'40B17219'         LOG(2) BASE E PLUS FUDGE.
LOG2E    DC        X'5C551D95'
A        DC        X'576AE119'
B        DC        X'269F8E6B'
C        DC        X'B9059003'
D        DC        X'B05CFCE3'
FXONE    DC        X'40000000'
FUDGE    DC        X'00000020'
         DC        0H'0'
SMALL    DC        X'0039'
         DC        C'ARACTE'           LKED GARBAGE
         LTORG
         TITLE     'FINIS'                                 JCN 10/29/69
FINIS    LR        12,15                                   JCN 10/17/69
         USING     FINIS,12
         L         10,=A(RETCOD)                           JCN 10/29/69
         L         10,0(10)            RETURN CODE
         STH       10,FINISRET         PLUG RETURN CODE
         L         15,=A(IBCOM#)
         BAL       14,68(15)           IBEXIT              JCN 10/29/69
FINISRET DC        AL2(0)              PLUGGED WITH RETURN CODE
         DC        X'D4C9E2E2'    LKED GARBAGE
         LTORG
         TITLE     'GBAL'
         USING     GBAL,15
GBAL     L         4,0(1)              GET LENGTH OF TXSP.
         LR        5,4                 COPY LENGTH INTO R5.
         A         5,4(1)              ADD STRING ORIGIN AND OFFSET
         A         5,8(1)              TO LENGTH TO GET ADDRESS OF
*                                      NEXT CHARACTER.
         LA        4,1(4)              BUMP LENGTH OF TXSP.
         CLI       0(5),C')'
         BE        0(14)               IF ')' THEN FAILURE
         CLI       0(5),C'('           COMPARE NEXT CHAR AGAINST '('.
         BNE       GBALS               IF NOT ( THEN SUCCESS
         LA        6,1
GBAL1    BCT       3,GBAL2             DECREASE BYTE LENGTH BY ONE.
         BR        14                  BRANCH OUT WHEN ZERO.
GBAL2    LA        4,1(4)              BUMP LENGTH OF TXSP.
         LA        5,1(5)              BUMP ADDRESS OF NEXT CHARACTER.
         CLI       0(5),C')'           COMPARE NEXT CHAR. AGAINST ')'.
         BE        GBAL3               IF EQUAL, REDUCE BALCNT
         CLI       0(5),C'('           COMPARE NEXT CHAR. AGAINST '('.
         BNE       GBAL1               IF NOT EQUAL, LOOP
         LA        6,1(6)
         B         GBAL1               THEN LOOP
GBAL3    BCT       6,GBAL1             REDUCE BALCNT BY ONE.
GBALS    ST        4,0(1)              IF ZERO, SUCCESS.  UPDATE TXSP.
         B         4(14)
         LTORG
         TITLE     'LASTDUMP'
         USING     *,15
LASTDUMP STM       8,14,LAR8R14
         LR        6,8
         L         8,=A(OBLIST+LNKFLD)
         LR        5,8
         LA        7,OBSIZ*DESCR(5)
LADCELL  L         2,0(5)
         LTR       2,2
         BZ        LACK                     NO STRINGS IN THIS BUCKET
         ST        0,0(5)              ZERO BUCKET USED FOR 1ST.
LA       L         1,8(2)              IS BALUE NULL?
         LTR       1,1
         BNZ       LB
         L         1,12(2)
         C         1,NULPTR+4
         BNE       LB
         L         2,LNKFLD(2)     YES,GET NEXT VARIABLE
         LTR       2,2
         BNZ       LA
         B         LACK            DONE WITH THIS BUCKET.
LB       ST        2,0(8)
LG       LR        1,2
LF       L         2,LNKFLD(2)
         LTR       2,2
         BNZ       LC
         B         LADBLOCK
         SPACE     2
         LR        1,2
LC       L         3,8(2)              IS VALUE NULL?
         LTR       3,3
         BNZ       LD
         L         3,12(2)
         C         3,NULPTR+4
         BNE       LD
         B         LF
LD       ST        2,LNKFLD(1)
         B         LG
LADBLOCK AR        5,6
         CLR       5,7
         BE        LASTLY                   ALL STRINGS LINKED
         L         2,0(5)              NEXT BUCKET.
         LTR       2,2
         BZ        LADBLOCK
         B         LC
LACK     BXLE      5,6,LADCELL
         LR        9,15                ANTICIPATE BASING.
         B         LASTMOVE
LASTLY   LR        12,0
         DROP      15
         LR        9,15
         USING     LASTDUMP,9
LAP      CL        0,LANTERN           CHECK LANTERN.
         BE        LASTMOVE
         ST        0,LANTERN           RESET LANTERN.
         LR        10,12
         L         11,=A(OBLIST)
         L         12,0(8)
LABYRITH L         13,LNKFLD(12)
         CLR       13,10
         BE        LAP
         L         2,4(12)
         LA        2,0(2)
         LA        3,0
         LA        4,BCDFLD(12)
         L         5,4(13)
         LA        5,0(5)
         LA        6,0
         LA        7,BCDFLD(13)
         L         15,=A(COMPLG)
         BALR      14,15
         B         LACOMP
         B         LAMENT
         B         LAMEDUCK
LACOMP   L         6,LNKFLD(13)        R12>R13.
         ST        13,LNKFLD(11)
         ST        12,LNKFLD(13)
         ST        6,LNKFLD(12)
         MVI       LANTERN,X'F'             SWITCH HAS BEEN MADE
         LR        11,13
         B         LABYRITH
LASTMOVE L         1,=A(OBLIST)
         LA        1,8+LNKFLD(1)
         LA        2,8
         LD        0,=D'0'
         LA        3,(OBSIZ-2)*8(1)
LAZARO   STD       0,0(1)
         BXLE      1,2,LAZARO
         LM        8,14,LAR8R14
         BR        14
LAMEDUCK LR        11,12
         LR        12,13
         B         LABYRITH
NULPTR   DC        A(0)
         DC        A(S)
LANTERN  DC        F'1'                     SWITCH INDICATOR
         USING     *,15
COMPLG   AR        6,7                 ADDR OF STR2.
         AR        3,4                 ADDR OF STR1.
         LR        1,2
         CR        2,5                 COMPARE LENGTHS.
         BNH       COMPARE             STR1 SMALLER OR = STR 2
         LR        2,5
COMPARE  C         2,=F'256'
         BNH       COMPDOWN            SHORTER STRING < OR = 256
         CLC       0(256,3),0(6)
         BL        8(14)               STR1 SMALLER THAN STR2.
         BH        0(14)               STR1 LARGER THAN STR2.
         S         2,=F'256'
         BZ        4(14)               STRINGS ARE IDENTICAL.
         LA        3,256(3)
         LA        6,256(6)
         B         COMPARE             COMPARE NEXT SECTION OF STRINGS
COMPDOWN BCTR      2,0
         EX        2,COMPOM            COMPARE STRINGS.
         BL        8(14)               STR1 SMALLER THAN STR2.
         BH        0(14)               STR1 LARGER THAN STR2.
         CR        1,5
         BL        8(14)
         BE        4(14)
         BR        14
COMPOM   CLC       0(0,3),0(6)
LAMENT   L         15,=A(INTR10)
         BR        15
         DC        H'0'              PS
LAR8R14  DC        7F'0'             PS
         DC        F'0'              PS
         LTORG
         TITLE     'LVAL'
         USING     LVAL,15
LVAL     LR        3,2
LVAL1    L         4,24(3)             LOAD R4 WITH LEAST VALUE.
LVAL2    C         0,16(3)             IS OR FIELD ZERO?
         BE        LVAL3               BRANCH IF ZERO
         L         3,16(3)             NO, GET OR FIELD.
         AR        3,2                 GET ADDRESS OF NEXT NODE.
         C         4,24(3)             IS NEW VALUE SMALLER?
         BNH       LVAL2               BRANCH IF NOT
         B         LVAL1               IF YES, REPLACE R4
LVAL3    LR        5,0
         STM       4,5,0(1)
         BR        14
         TITLE     'LINKER'
         USING     *,15
LINKER   STM       0,15,SAVE           USER CAN ALSO DO THIS...BUT WE
         SR        5,5
         LA        7,SPEC              SET POINTER FOR STRING ARG BLOCK
         CL        2,=A(ARGSZ)         ARE THERE MORE THAN 20 ARGS
         BNH       NXTARG              NO
         L         2,=A(ARGSZ)         YES,FORCE IT TO 20. THIS WILL BE
NXTARG   LH        6,6(1)              GET THE ARG DATA TYPE
         C         6,=A(S)             IS IT A STRING?
         BE        STRARG              YES, MAKE A SPECIAL ENTRY
         ST        1,ARG(5)            NO, IT'S REAL INT OR USER DEFINE
NXTONE   LA        1,8(1)              MOVE R1 TO POINT TO NEXT ARG
         LA        5,4(5)              MOVE DOWN ARG LIST POINTER
         BCT       2,NXTARG            IF MORE ARGS GET THEM
         LA        5,ARG-4(5)
         MVI       0(5),LSTARG
         LM        0,12,SAVE
         LA        1,ARG               ADD OF ARG LIST IN REG1
         LA        13,DSAVE            GIVE CALLED PROG A DUMMY SAVE AR
         LR        15,4                PUT CALLED PROG EP IN R15
         BALR      14,15               GO TO IT
         LA        14,0                SUCCESS RETURN.
         BALR      15,0                FAIL RETURN-RE ESTABLISH R15 AS
         USING     *,15
         L         15,=A(LINKER)
         USING     LINKER,15
         CL        14,=A(0)            DID USER RETURN ON FAIL?
         BNE       ERET                YES, GO TO FAIL RETURN.
         LM        1,15,SAVE+4         RESTORE ALL REGS BUT R0.USER
         LH        5,6(3)              R5 CONTAINS THE DATA TYPE
         ST        0,0(3)              IT'S PROBABLY INTEGER SO ASSUME
         C         5,=A(I)             IS DATA TYPE INTEGER?
         BE        GOBACK              YES, YOU GUESSED IT9
         C         5,=A(R)             NO, REAL?
         BE        REAL                YES, IT'S REAL
         C         5,=A(S)             NOT INT OR REAL, STRING?
         BE        STRRTN              YES, IT'S A STRING.
         B         USERDEF             IF ANYTHING ELSE, LET USER DEFIN
ERET     LM        0,15,SAVE           RETURN ON FAILURE
         BR        14                  GO HOME ON R14.
REAL     STE       0,0(3)              STORE REAL ARG
GOBACK   LM        0,15,SAVE           RESTORE REGS FOR RETURN
         B         4(14)               SUCCESS RETURN.
STRARG   L         6,0(1)              R6 HAS THE POINTER TO FST WRD OF
         CL        6,=A(0)             IS THIS STRING NULL?
         BE        NULSTR
         L         8,4(6)
         LA        8,0(8)
         ST        8,4(7)              STORE IN WRD2 OF USER SPEC
         LA        6,32(6)             ADD OF STRING NOW IN R6
STRNUL   ST        6,0(7)              PUT IT IN WRD1 OF USER DESCRIPTO
         ST        7,ARG(5)            PUT SPEC ADD IN ARG LIST
         LA        7,8(7)              SET SPEC POINTER TO NEXT SPEC
         B         NXTONE              THIS ARG IS PROCESSED, GET THE N
NULSTR   SR        6,6                 CREATE A WORD OF ZEROS
         ST        6,4(7)              FILL USER DESCRIPTOR WITH THEM
         B         STRNUL
STRRTN   LR        11,0
         L         6,0(11)             GET FIRST WRD OF USER DESCR..(AD
         ST        6,SPEC+8            PUT IT AWAY (WRD3)
         L         6,4(11)             GET SECOND WRD (LENGTH) OF USER
         ST        6,SPEC              PUT IN FST WRD OF INTER BLOCK
         L         6,=A(0)
         ST        6,SPEC+4            ZERO OUT REST OF INTER BLOCK
         ST        6,SPEC+12
         LA        6,SPEC
         ST        6,0(3)              RETURN POINTER TO SPEC
         L         6,=A(L)             PUT A 12 IN VALUE FIELD TO SHOW
         ST        6,4(3)              THAT A STRING IS BEING RETURNED
         B         GOBACK
USERDEF  LR        11,0
         LD        4,0(11)             MOVE USER'S DESC. IT MUST BE ON
         STD       4,0(3)              A DOUBLE WORD BOUNDARY
         B         GOBACK
         DS        0D                  ALIGN FOR PROPER BOUNDARY
SAVE     DC        18F'0'
DSAVE    DC        40F'0'              VERY LARGE DUMMY SAVE AREA
ARG      DC        20F'0'
SPEC     DC        40F'0'              ROOM FOR 20 STRINGS
         LTORG
         TITLE     'LOADER AND UNLOADER'
OFLGS    EQU       48
DDNAME   EQU       40
LOADER   BALR      6,0
         USING     *,6
LOADOR   STM       8,0,SAVEX
         L         3,0(1)
         BCTR      3,0
         CL        3,FULL              FCT NAME > 8 CHARS?
         BNH       LE8
         L         3,FULL              YES, SET LENGTH TO 8.
LE8      L         4,4(1)              GET OFFSET.
         A         4,8(1)              ADD BASE.
         LD        4,BLANKS
         STD       4,LOADAX            PUT BLANKS IN LOADAX
         EX        3,MOVE              PUT FCT NAME IN LOADAX.
         L         3,0(2)              GET LENGTH OF DDNAME
         CR        0,3
         BE        DSRNZ               BRANCH IF IT IS ZERO.
         BCTR      3,0
         CL        3,FULL
         BNH       LEE8                IF LENGTH IS GREATER THAN 8
         L         3,FULL              USE FIRST 8 CHARACTERS.
LEE8     L         4,4(2)
         A         4,8(2)              GET POINTER TO CHARACTERS.
         LD        4,BLANKS
         STD       4,NEWDDN
         EX        3,MOVEE
         B         OPENTST
DSRNZ    MVC       NEWDDN(8),SNOLIB
OPENTST  TM        LIBE+OFLGS,X'10'    IS DATA SET ALREADY OPEN?
         BZ        NOTOPEN
         CLC       PRDDN(8),NEWDDN     IS THE LIBRARY NEW?
         BE        DOLOAD              NO, LOAD THE FUNCTION.
         CLOSE     (LIBE,DISP)         CLOSE PREVIOUS LIBRARY.
NOTOPEN  MVC       LIBE+DDNAME(8),NEWDDN
         OPEN      (LIBE,(INPUT))
         MVC       PRDDN(8),NEWDDN     SAVE DDNAME
*
DOLOAD   LOAD      EPLOC=LOADAX,DCB=LIBE
         ORG       DOLOAD
         LA        1,LIBE              <--+ HACK FOR BINARY COMPAT.
         LA        0,LOADAX            <--+
         ORG       ,
*
         LR        2,0                 SAVE ENTRY TO FUNCTION.
         LM        8,0,SAVEX
         BR        14                  RETURN.
         USING     *,15
UNLOADER L         6,=A(LOADOR)
         DROP      15
         USING     LOADOR,6
         STM       8,0,SAVEX           SAVE REGS
         L         2,0(1)
         BCTR      2,0
         CL        2,FULL              FUNCT NAME > 8 CHARS?
         BNH       LT8
         L         2,FULL              YES,SET TO LENGTH - 1
LT8      L         4,4(1)
         A         4,8(1)              GET POINTER TO FUNCTION NAME.
         LD        4,BLANKS
         STD       4,LOADAX            PUT BLANKS IN LOADAX
         EX        2,MOVE              PUT FUNCT NAME IN LOADAX WITH BL
*                            WHERE THERE WAS GARBAGE
         LR        7,15                SAVE 15..DELETE WILL KILL IT.
         DELETE    EPLOC=LOADAX
         LR        15,7                RESTORE 15..NEEDED FOR PROPER BA
         LM        8,0,SAVEX
         BR        14                  RETURN.
         DS        0D
BLANKS   DC        CL8' '              8 BLANKS.
LOADAX   DC        D'0'
SAVEX    DC        18F'0'
FULL     DC        F'7'
         DC        D'0'
NEWDDN   DC        CL8' '
PRDDN    DC        CL8' '
SNOLIB   DC        CL8'SNOLIB'
LIBE     DCB       DSORG=PO,MACRF=(R),DEVD=DA
MOVE     MVC       LOADAX(0),0(4)
MOVEE    MVC       NEWDDN(0),0(4)
         TITLE     'REALST'
         USING     REALST,15
REALST   EQU       *
         SR        1,1
         SR        4,4
         CE        2,=E'0'         IS IT NEGATIVE
         BE        REALZERO
         BH        REALPL          NO,BRANCH.
         MVI       SIGN,C'-'       YES,SET SWITCH.
         LCER      2,2             COMPLEMENT X
         B         REAL1           GO TO CONVERT.
REALPL   MVI       SIGN,C'+'
REAL1    CE        2,=X'46100000'  IS EXP >OR = 46
         BNL       DLOOPA
MLOOP    CE        2,=E'15'
         BNL       MLOOPA          IF X > OR = 15 , BRANCH
         ME        2,=E'1.E+6'     OTHERWISE,X = X * 10 ** 6
         LA        4,6(4)          D = D + 4
         B         MLOOP
MLOOPA   CE        2,=E'15000'
         BNL       MLOOPB          IF X > OR = 15000, BRANCH
         ME        2,=E'1000'      OTHERWISE, X = X * 1000
         LA        4,3(4)          D = D + 3
MLOOPB   CE        2,=X'46100000'
         BNL       MLOOPEND        IF X > OR = 16 ** 5 BRANCH
         ME        2,=E'10'        OTHERWISE, X = X * 10
         LA        4,1(4)          D = D + 1
         B         MLOOPB
MLOOPEND EQU       *
         STE       2,X             NOW EXP IS 46,THUS
         L         2,X             NUMBER IS AN INTEGER.
         SRDL      2,24            GET INTEGER WITHOUT CHARACTERISTIC.
         SRL       3,8
         CVD       3,XP            CONVERT TO PACKED DECIMAL.
         LA        3,RBUF+LPAT-1   INSERT DECIMAL POINT D PLACES FROM
         SR        3,4             THE RIGHT.
         C         4,=F'15'        IF D IS VERY LARGE,
         BNL       REALSM          X IS VERY SMALL.
         MVC       RBUF(17),PAT    GET A COPY OF THE BASIC PATTERN.
         MVI       0(3),C'.'
         EDMK      RBUF(17),XP      CONVERT TO A STRING.
REALSIG  CR        3,1             IS FIRST SIGNIFICANT DIGIT TO
         BH        REAL2           THE RIGHT OF THE DECIMAL PT. NO
         MVI       0(3),C'.'
         BCTR      3,0             YES, APPEND 0.
         LR        1,3
REAL2    CLI       SIGN,C'-'       IS NUMBER NEGATIVE
         BNE       REALDONE        NO, GET OUT
         BCTR      1,0             XR1 POINTS TO FIRST SIGNIFICANT
         MVI       0(1),C'-'       DIGIT.  BACK UP POINTER AND INSERT
*                                  MINUS SIGN.
REALDONE ST        1,8(5)          RETURN ADDRESS
         LA        2,RBUF+LPAT     LENGTH AND OFFSET
         SR        2,1             TO SPECIFIER.
         SR        3,3
         STM       2,3,0(5)
         ST        3,12(5)
         BR        14
REALSM   MVI       MBUF,C'0'
         MVC       MBUF+1(80),MBUF LOAD BUFFER.
         MVC       RBUF+1(16),PAT
         EDMK      RBUF+1(16),XP
         B         REALSIG
REALZERO LA        1,3
         SR        2,2
         LA        3,REALZIP
         SR        4,4
         STM       1,4,0(5)
         BR        14
DLOOP    DE        2,=E'10'        X = X / 10.0
         LA        4,1(4)          D = D + 1
DLOOPA   CE        2,=X'47100000'  IS EXP > 46
         BNL       DLOOP           YES, BRANCH
         STE       2,X             EXP IS NOW 46
         L         2,X             GET X WITHOUT CHARACTERISTIC.
         SRDL      2,24
         SRL       3,8
         CVD       3,XP            CONVERT TO PACKED DECIMAL,
         MVC       LBUF(16),PAT    GET COPY OF BASIC PATTERN.
         EDMK      LBUF(16),XP     CONVERT TO EBCDIC.
         L         3,=A(MBUF)
         AR        3,4             INSERT DECIMAL POINT.
         MVI       MBUF,C'0'
         MVC       MBUF+1(80),MBUF  ZERO BUFFER.
         MVI       0(3),C'.'
         CLI       SIGN,C'-'       INSERT MINUS SIGN IF NECESSARY.
         BNE       REAL3
         BCTR      1,0
         MVI       0(1),C'-'
REAL3    ST        1,8(5)          RETURN ADDRESS OF STRING.
         SR        3,1
         LA        3,1(3)          LENGTH OF STRING
         SR        4,4             OFFSET OF STRING.
         STM       3,4,0(5)
         ST        4,12(5)
         BR        14
REALZIP  DC        C'0.0'
LPAT     EQU       17
LBUF     DC        16C'0'
MBUF     DC        80C'0'
RBUF     DC        17C'0'
PAT      DC        C'0',16X'20'
SIGN     DC        C'0'
XP       DC        D'0'
X        DC        F'0'
         DC        F'0'          PS
         LTORG
         TITLE     'REPLACE'
         USING     RPLCE,15
RPLCE    MVC       TRTBL(256),ALPHA
         LTR       3,3
         BNH       0(14)
         BCTR      3,0
         AR        4,5                 COMPUTE TOTAL ADDRESS OF SP3.
         LM        5,6,4(2)            LOAD SP2.
         AR        5,6                 COMPUTE TOTAL ADDRESS OF SP2.
         LR        7,5
         AR        7,3                 GET END OF REPLACE STRING.
         LA        6,1
RPLC1    SR        3,3                 RESET REGISTER
         IC        3,0(5)              GET A CHARACTER.
         A         3,=A(TRTBL)
         MVC       0(1,3),0(4)
         LA        4,1(4)              UPDATE PTR IN REPLACE STRING.
         BXLE      5,6,RPLC1
         LM        2,4,0(1)            GET SP1
         LTR       2,2
         BNH       0(14)
         AR        3,4                 GET ADDRESS OF TARGET STRING
RPTEST   C         2,=F'256'
         BNH       RPSHORT
         TR        0(256,3),TRTBL
         LA        3,256(3)
         S         2,=F'256'
         B         RPTEST
RPSHORT  BCTR      2,0
         EX        2,RPEX
         BR        14
RPEX     TR        0(0,3),TRTBL
TRTBL    DC        256C' '
ALPHA    DC        X'000102030405060708090A0B0C0D0E0F'
         DC        X'101112131415161718191A1B1C1D1E1F'
         DC        X'202122232425262728292A2B2C2D2E2F'
         DC        X'303132333435363738393A3B3C3D3E3F'
         DC        X'404142434445464748494A4B4C4D4E4F'
         DC        X'505152535455565758595A5B5C5D5E5F'
         DC        X'606162636465666768696A6B6C6D6E6F'
         DC        X'707172737475767778797A7B7C7D7E7F'
         DC        X'808182838485868788898A8B8C8D8E8F'
         DC        X'909192939495969798999A9B9C9D9E9F'
         DC        X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC        X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC        X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC        X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC        X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC        X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
         DC        H'0'              PS
         LTORG
         TITLE    'SPECEQ'
         USING     SPECEQ,15
SPECEQ   CR        0,2                 CHECK FOR NULL.
         BE        4(14)
         AR        6,7                 ADDRESS OF SP2.
         AR        3,4                 ADDRESS OF SP1.
SPECDOWN C         2,=F'256'           ARE STRING LONG?
         BNH       SPECSHRT
         CLC       0(256,3),0(6)       COMPARE 256 CHARACTERS.
         BNE       0(14)
         S         2,=F'256'
         BZ        4(14)
         LA        3,256(3)
         LA        6,256(6)
         B         SPECDOWN
SPECSHRT BCTR      2,0
         EX        2,SPECOM            EXECUTE SHORT COMPARE.
         BE        4(14)
         BR        14
SPECOM   CLC       0(0,3),0(6)
         TITLE     'SPIECUT -- PROCESS PROGRAM INTERRUPTIONS'
SPIECUT  BALR      15,0
         USING     *,15
         CLI       SPIECUTF,X'00'
         BE        SPIECUT1            FIRST TIME THROUGH.
         ABEND     0,DUMP              DIE ON SUBSEQUENT INTERRUPTS.
SPIECUT1 MVI       SPIECUTF,X'FF'
         STM       3,14,SPIE3          SAVE REGISTERS AT INTERRUPTION
         MVC       SPIEPIE(32),0(1)    SAVE PIE
         L         3,SIGRESET          RESTORE MASK
         SPM       3
         L         11,=A(SYSCUT)       PROCESS INTERRUPTION AS SYSTEM
*                                      CUT.
         LA        0,0
         LA        8,8
         LM        9,10,SPIEREST
         BR        11
*
SPIECUT2 EQU       *                   HANDLE ERROR RETURN FROM FORTRAN
         USING     SPIECUT2,15                             JCN 10/29/69
         L         9,=A(RETCOD)
         LA        10,16               RETURN CODE = 16
         ST        10,0(9)
         LA        0,0                 RESTORE SNOBOL CONVENTIONS
         LA        8,8
         LM        9,10,SPIEREST
         L         11,=A(SYSCUT)                           JCN 10/29/69
         BR        11                                      JCN 10/29/69
*
*        CNOP      4,8
         NOPR      0
         NOPR      0
         NOPR      0
SPIEPIE  DS        0F                  PROGRAM ITERRUPTION ELEMENT
SPIEPICA DC        AL1(0),AL3(0)       ,PICA ADDRESS
SPIESAVE DC        D'0'                OLD PSW
SPIER14  DC        5F'0'               R 14,15,0,1,2 AT INTERRUPTION
SPIE3    DC        10F'0'              REGISTERS 3-12 AT INTERRUPTION
SPIE13   DC        F'0'                ADDR OF SAVE AREA FOR PROGRAM
SPIE14   DC        F'0'                RETURN ADDR TO CONTROL PROGRAM
SPIECUTF DC        A(0)
SPIEREST DC        A(DATA,DATA+4096)
SIGRESET DC        X'36000000'
         DC        F'0'
         LTORG
         TITLE     'SPREAL'
         USING     SPREAL,15
SPREAL   AR        4,3                 GET POINTER TO FIRST CHARACTER
         CR        2,0
         BE        SPZERO
         MVI       RSIGN,X'00'         RESET SIGN FLAG.
         AR        2,4                 POINTER TO END OF STRING.
         CLI       0(4),C'9'
         BH        0(14)
         CLI       0(4),X'F0'          IS FIRST CHAR. A DIGIT
         BNL       SPSTART             YES,BRANCH.
         CLI       0(4),C'+'           IS FIRST CHAR  '+'
         BNE       SPMINUS             NO,BRANCH.
SPCHECK  LA        4,1(4)              UPDATE POINTER.
         CR        4,2
         BNL       0(14)
         CLI       0(4),X'F0'          IS NEXT CHAR A DIGIT
         BL        0(14)
         CLI       0(4),C'9'
         BH        0(14)
         B         SPSTART
SPMINUS  CLI       0(4),C'-'           IS FIRST CHAR '-'
         BNE       0(14)
         MVI       RSIGN,X'01'         SET SIGN FLAG.
         B         SPCHECK
SPSTART  MVC       CHAR(1),0(4)        GET FIRST DIGIT.
         NI        CHAR,X'0F'          FLOAT IT.
         LE        INT,DIGIT           LET INT=DIGIT.
SPILOOP  LA        4,1(4)              GET NEXT CHARACTER.
         CR        4,2                 IF DONE,
         BE        SPRETURN            NUMBER IS INTEGER ONLY.
         CLI       0(4),C'.'           IS IT '.'
         BE        SPFRAC              YES COMPUTE FRACTION PART.
         CLI       0(4),X'F0'          IS IT A DIGIT
         BL        0(14)
         CLI       0(4),C'9'
         BH        0(14)
         ME        INT,=E'10'          NO, THEN LET
         MVC       CHAR(1),0(4)        INT = INT * 10 + DIGIT
         NI        CHAR,X'0F'
         AE        INT,DIGIT
         B         SPILOOP             LOOP.
*
*                                  FRACTION IS COMPUTED DIGIT BY
*                                  DIGIT RIGHT TO LEFT.
SPFRAC   LE        FRAC,RZERO          LET FRAC= 0
SPFLOOP  BCTR      2,0                 DECREMENT POINTER.
         CR        4,2                 ARE WE AT DECIMAL POINT.
         BE        SPFIN               YES,THEN GET OUT.
         CLI       0(2),X'F0'
         BL        0(14)
         CLI       0(2),C'9'
         BH        0(14)
         MVC       CHAR(1),0(2)        OTHERWISE, LET
         NI        CHAR,X'0F'          FRAC = (FRAC+DIGIT)/10
         AE        FRAC,DIGIT
         DE        FRAC,TEN
         B         SPFLOOP             LOOP
SPFIN    AER       INT,FRAC
SPRETURN CLI       RSIGN,X'00'
         BE        SPOS
         LCER      INT,INT
SPOS     STE       INT,0(1)
         B         4(14)               NORMAL RETURN.
SPZERO   LE        INT,=E'0'
         B         SPRETURN
RSIGN    DC        X'00'
         DC        X'000000'         PS
TEN      DC        E'10'
RZERO    DC        E'0'
INT      EQU       2
DIGIT    DC        X'42000000'
CHAR     EQU       DIGIT+1
FRAC     EQU       4
         DC        F'0'              PS
         LTORG
MEMLEV   EQU       10000           LEAVE THIS MANY BYTES FOR BUFFERS
*                                  AND NON-RESIDENT I/O MODULES.
MEMMIN   EQU       4400            MINIMUM 'TOY' MEMORY SIZE (DESCR).
MEMMAX   EQU       25000           MAXIMUM NUMBER OF DESCRIPTORS
         TITLE     'STINT'
         USING     *,7
STINT    LR        7,15                SAVE BASE.
         STM       13,1,SAVEA          SAVE REGISTERS
         LR        2,1
         L         2,0(2)              GET PTR TO LENGTH OF PARM FIELD
         LH        3,0(2)              GET LENGTH
         LA        2,2(2)              SKIP OVER LENGTH.
         SR        0,0
         CR        0,3                 IS LENGTH ZERO?
         BE        GET                 YES.
         AR        3,2                 GET PTR TO END OF STRING.
KEY      CLI       0(2),C'L'           IS KEY L
         BE        LOW
         CLI       0(2),C'H'           OR H
         BE        HIGH
         CLI       0(2),C'R'           OR R
         BNE       GET                 NO - ERROR.
         BAL       8,CONVERT
         ST        5,RESERVE           SET RESERVE
         B         DTEST
LOW      BAL       8,CONVERT
         ST        5,MEMREQ            SET MEMREQ
         B         DTEST
HIGH     BAL       8,CONVERT
         ST        5,MEMTOP            SET MEMTOP
DTEST    CLI       DONE,C'D'           IF NOT DONE,
         BNE       KEY                 GET NEXT KEY
GET      L         2,RESERVE           MEMREQ = MEMREQ + RESERVE
         L         3,MEMREQ
         AR        3,2
         ST        3,MEMREQ
         L         3,MEMTOP            MEMTOP = MEMTOP + RESERVE
         AR        3,2
         ST        3,MEMTOP
         L         13,=V(SAVESAVE)
         GETMAIN   VU,LA=MEMREQ,A=MEMGIV
*                                  GET ALL AVAILABLE
         LM        1,2,MEMGIV          STORAGE RECEIVED
         L         3,RESERVE
         SR        2,3                 LENGTH REMAINING
         STM       1,2,MEMREQ          AMOUNT TAKEN
         AR        2,1                 ADDRESS TO RELEASE
         STM       2,3,MEMGIV
         FREEMAIN  V,A=MEMGIV          RELEASE AREA
*                                  GET RESIDUAL
         L         2,MEMREQ
         L         1,=V(HDSGPT)
         ST        2,0(1)          SET BASE.
         L         1,=V(FRSGPT)
         ST        2,0(1)          SET FREE SEGMENT POINTER
         A         2,MEMTOP
         L         1,=V(TLSGP1)
         ST        2,0(1)          SET TAIL POINTER
         BR        14
CONVERT  CLI       1(2),C'='           IS NEXT CHAR =
         BNE       GET                 NO, ERROR
         LA        2,2(2)              UPDATE CHARACTER PTR.
         CR        2,3
         BNL       GET                 ERROR IF AT END OF STRING.
         SR        5,5
CLOOP    CLI       0(2),C'0'           CHECK THAT CHAR IS AN INTEGER.
         BL        GET
         CLI       0(2),C'9'
         BH        GET
         MVC       CHOR(1),0(2)
         NI        CHOR,X'0F'
         M         4,=F'10'
         A         5,DOGIT
         LA        2,1(2)              UPDATE CHAR PTR.
         CR        2,3
         BL        MORE
         MVI       DONE,C'D'           RAISE FLAG IF DONE
         BR        8                   AND RETURN.
MORE     CLI       0(2),C','
         BNE       CLOOP               BRANCH IF NEXT CHAR IS NOT ','
         LA        2,1(2)
         BR        8                   OTHERWISE UPDATE PTR & RETURN
SAVEA    DC        5F'0'
         DC        CL8'STORAGE'
MEMREQ   DC        A(MEMMIN*DESCR)
MEMTOP   DC        A(MEMMAX*DESCR)
MEMGIV   DC        A(0)
MEMLEN   DC        A(0)
RESERVE  DC        A(MEMLEV)
DOGIT    DC        F'0'
CHOR     EQU       DOGIT+3
DONE     DC        C' '
         TITLE     'STPRNT'
         USING     STPRNT,7
STPRNT   LR        7,15
         STM       13,1,AISAVE         SAVE KEY REGISTERS.
         L         13,=A(SAVESAVE)
         ST        0,0(1)
         L         6,0(2)              GET TO BLOCK ITSELF.
         LA        5,DESCR(6)
STPRNT0  ST        5,STPRUNIT          STUFF UNIT.
         L         6,2*DESCR(6)        POINTER TO FORMAT
         MVI       STPRUNIT,X'01'      AND FLAG
         LA        6,BCDFLD(6)
         ST        6,STPRFRMT          STUFF FORMAT
         MVI       STPRFRMT,X'01'      AND FLAG.
         LM        2,4,0(3)            GET SPECIFIER.
         LTR       2,2                 IS THIS NULL STRING?
         BNZ       STPRNT1
         LM        2,4,BLSP            YES, LOAD BLANK SPECIFIER.
STPRNT1  STH       2,STPRLENG          STUFF LENGTH.
         AR        4,3                 COMPUTE ADDRESS + OFFSET.
         ST        4,STPRADDR          STUFF IT.
         L         15,=A(IBCOM#)                           JCN 10/26/69
         CNOP      0,4                 ALLIGNMENT.
         BAL       14,4(15)            INITIALIZE WRITE.
STPRUNIT DC        X'01',AL3(0)        UNIT (PLUGGED).
STPRFRMT DC        X'01',AL3(0)        FORMAT (PLUGGED).
         L         15,=A(IBCOM#)                           JCN 10/28/69
         BAL       14,12(15)           OUTPUT LIST.
STPRADDR DC        A(0)                ADDRESS (PLUGGED).
         DC        XL2'0170'           FLAGS.
STPRLENG DC        H'0'                LENGTH (PLUGGED).
         L         15,=A(IBCOM#)                           JCN 10/26/69
         BAL       14,16(15)           FINISH WRITE.
         LM        13,1,AISAVE         RESTORE.
         BR        14
BLSP     DC        A(1)
         DC        A(0)
         DC        A(BLST)
         DC        A(0)
BLST     DC        C' '
         TITLE     'STREAD'
         USING     STREAD,7
STREAD   LR        7,15
         STM       13,1,AISAVE
         L         13,=A(SAVESAVE)
STREAD0  ST        2,STRDUNIT
         MVI       STRDUNIT,X'31'      UNIT AND FLAG PLUGGED.
         LM        1,3,0(1)            SPECIFIER
         STH       1,STRDLNTH+2        PLUGG LENGTH.
         AR        2,3
         ST        2,STRDBUF           BUFFER ADDRESS.
         L         15,=A(IBCOM#)                           JCN 10/26/69
         CNOP      0,4
         BAL       14,0(15)            INITIALIZE FORMATTED READ.
STRDUNIT DC        X'31',AL3(0)        UNIT (PLUGGED)
         DC        X'01',AL3(INFORMAT)
         DC        A(EOFADD)
         DC        A(ERRADD)
         L         15,=A(IBCOM#)                           JCN 10/26/69
         BAL       14,12(15)           PERFORM READ.
STRDBUF  DC        A(0)                BUFFER ADDRESS (PLUGGED)
STRDLNTH DC        XL2'0170',AL2(0)    LENGTH IS PLUGGED.
         L         15,=A(IBCOM#)                           JCN 10/22/69
         BAL       14,16(15)           TERMINATE READ.
         LM        13,1,AISAVE
         B         8(14)               NORMAL RETURN
         CNOP      0,4
EOFADD   DC        A(EOF)
ERRADD   DC        A(ERR)
EOF      LM        13,1,AISAVE
         BR        14                  END OF FILE.
ERR      LM        13,1,AISAVE
         B         4(14)               ERROR RETURN
INFORMAT DC        C'(255(255A1))'
AISAVE   DC        5F'0'
         LTORG
         TITLE     'SNOBOL4 COMPILER TRANSLATE AND TEST TABLES'
*
*      SYNTACTIC TYPES
*
ARYTYP EQU     7
CLNTYP EQU     5
CMATYP EQU     2
CMTTYP EQU     2
CNTTYP EQU     4
CTLTYP EQU     3
DIMTYP EQU     1
EOSTYP EQU     6
EQTYP  EQU     4
FGOTYP EQU     3
FTOTYP EQU     6
FLITYP EQU     6
FNCTYP EQU     5
ILITYP EQU     2
LPTYP  EQU     1
NBTYP  EQU     1
NEWTYP EQU     1
NSTTYP EQU     4
QLITYP EQU     1
RBTYP  EQU     7
RPTYP  EQU     3
SGOTYP EQU     2
STOTYP EQU     5
UGOTYP EQU     1
UTOTYP EQU     4
VARTYP EQU     3
         SPACE
         USING     STREAM,15
         SPACE
         DS        0F
*        BIOPTB
*        FOR(PLUS) PUT(ADDFN) GOTO(TBLKTB)
*        FOR(MINUS) PUT(SUBFN) GOTO(TBLKTB)
*        FOR(DOT) PUT(NAMFN) GOTO(TBLKTB)
*        FOR(DOLLAR) PUT(DOLFN) GOTO(TBLKTB)
*        FOR(STAR) PUT(MPYFN) GOTO(STARTB)
*        FOR(SLASH) PUT(DIVFN) GOTO(TBLKTB)
*        FOR(AT) PUT(BIATFN) GOTO(TBLKTB)
*        FOR(POUND) PUT(BIPDFN) GOTO(TBLKTB)
*        FOR(PERCENT) PUT(BIPRFN) GOTO(TBLKTB)
*        FOR(RAISE) PUT(EXPFN) GOTO(TBLKTB)
*        FOR(ORSYM) PUT(ORFN) GOTO(TBLKTB)
*        FOR(KEYSYM) PUT(BIAMFN) GOTO(TBLKTB)
*        FOR(NOTSYM) PUT(BINGFN) GOTO(TBLKTB)
*        FOR(QUESYM) PUT(BIQSFN) GOTO(TBLKTB)
*        ELSE ERROR
BIOPTB   EQU       *
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474741474740454'
         DC        X'5C7474747474747474744C1C24747464'
         DC        X'0C2C747474747474747474744474746C'
         DC        X'74747474747474747474743C34747474'
         DC        X'74747474747474747474747474747474'
         DC        X'7474747474747474747474747474744C'
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         L         7,=A(ADDFN)
         L         3,=A(TBLKTB)
         L         7,=A(SUBFN)
         L         3,=A(TBLKTB)
         L         7,=A(NAMFN)
         L         3,=A(TBLKTB)
         L         7,=A(DOLFN)
         L         3,=A(TBLKTB)
         L         7,=A(MPYFN)
         L         3,=A(STARTB)
         L         7,=A(DIVFN)
         L         3,=A(TBLKTB)
         L         7,=A(BIATFN)
         L         3,=A(TBLKTB)
         L         7,=A(BIPDFN)
         L         3,=A(TBLKTB)
         L         7,=A(BIPRFN)
         L         3,=A(TBLKTB)
         L         7,=A(EXPFN)
         L         3,=A(TBLKTB)
         L         7,=A(ORFN)
         L         3,=A(TBLKTB)
         L         7,=A(BIAMFN)
         L         3,=A(TBLKTB)
         L         7,=A(BINGFN)
         L         3,=A(TBLKTB)
         L         7,=A(BIQSFN)
         L         3,=A(TBLKTB)
         BR        14
         SPACE
         DC        H'0'
*        CARDTB
*        FOR(CMT) PUT(CMTTYP) STOPSH
*        FOR(CTL) PUT(CTLTYP) STOPSH
*        FOR(CNT) PUT(CNTTYP) STOPSH
*        ELSE PUT(NEWTYP) STOPSH
CARDTB   EQU       *
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C141C1C1404'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C041C1C1C'
         DC        X'0C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C0404041C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         L         7,=A(CMTTYP)
         B         STRMSHRT
         L         7,=A(CTLTYP)
         B         STRMSHRT
         L         7,=A(CNTTYP)
         B         STRMSHRT
         L         7,=A(NEWTYP)
         B         STRMSHRT
         SPACE
         DS        0F
*        DQLITB
*        FOR(DQUOTE) STOP
*        ELSE CONTIN
DQLITB   EQU       *
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000004'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         B         STRMSTOP
         SPACE
         DS        0F
*        ELEMTB
*        FOR(NUMBER) PUT(ILITYP) GOTO(INTGTB)
*        FOR(LETTER) PUT(VARTYP) GOTO(VARTB)
*        FOR(SQUOTE) PUT(QLITYP) GOTO(SQLITB)
*        FOR(DQUOTE) PUT(QLITYP) GOTO(DQLITB)
*        FOR(LEFTPAREN) PUT(NSTTYP) STOP
*        ELSE ERROR
ELEMTB   EQU       *
         DC        X'2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C'
         DC        X'2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C'
         DC        X'2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C'
         DC        X'2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C'
         DC        X'2C2C2C2C2C2C2C2C2C2C2C2C2C242C2C'
         DC        X'2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C'
         DC        X'2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C'
         DC        X'2C2C2C2C2C2C2C2C2C2C2C2C2C142C1C'
         DC        X'2C0C0C0C0C0C0C0C0C0C2C2C2C2C2C2C'
         DC        X'2C0C0C0C0C0C0C0C0C0C2C2C2C2C2C2C'
         DC        X'2C2C0C0C0C0C0C0C0C0C2C2C2C2C2C2C'
         DC        X'2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C'
         DC        X'2C0C0C0C0C0C0C0C0C0C2C2C2C2C2C2C'
         DC        X'2C0C0C0C0C0C0C0C0C0C2C2C2C2C2C2C'
         DC        X'2C2C0C0C0C0C0C0C0C0C2C2C2C2C2C2C'
         DC        X'040404040404040404042C2C2C2C2C2C'
         L         7,=A(ILITYP)
         L         3,=A(INTGTB)
         L         7,=A(VARTYP)
         L         3,=A(VARTB)
         L         7,=A(QLITYP)
         L         3,=A(SQLITB)
         L         7,=A(QLITYP)
         L         3,=A(DQLITB)
         L         7,=A(NSTTYP)
         B         STRMSTOP
         BR        14
         SPACE
         DC        H'0'     PS
*        EOSTB
*        FOR(EOS) STOP
*        ELSE CONTIN
EOSTB    EQU       *
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000400'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         B         STRMSTOP
         SPACE
         DS        0F
*        FLITB
*        FOR(NUMBER) CONTIN
*        FOR(TERMINATOR) STOPSH
*        ELSE ERROR
FLITB    EQU       *
         DC        X'08080808080408080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'04080808080808080808080808080808'
         DC        X'08080808080808080808080808040408'
         DC        X'08080808080808080808080408080408'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808040808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'00000000000000000000080808080808'
         B         STRMSHRT
         BR        14
         SPACE
         DC        X'3CF8'     LKED GARBAGE
         DS        0F
*        FRWDTB
*        FOR(BLANK) CONTIN
*        FOR(EQUAL) PUT(EQTYP) STOP
*        FOR(RIGHTPAREN) PUT(RPTYP) STOP
*        FOR(RIGHTBR) PUT(RBTYP) STOP
*        FOR(COMMA) PUT(CMATYP) STOP
*        FOR(COLON) PUT(CLNTYP) STOP
*        FOR(EOS) PUT(EOSTYP) STOP
*        ELSE PUT(NBTYP) STOPSH
FRWDTB   EQU       *
         DC        X'34343434340034343434343434343434'
         DC        X'34343434343434343434343434343434'
         DC        X'34343434343434343434343434343434'
         DC        X'34343434343434343434343434343434'
         DC        X'00343434343434343434043434343434'
         DC        X'343434343434343434343434340C2C34'
         DC        X'34343434343434343434341C34341434'
         DC        X'34343434343434343434243434340434'
         DC        X'34343434343434343434343434343434'
         DC        X'34343434343434343434343434343434'
         DC        X'34343434343434343434343434343434'
         DC        X'34343434343434343434343434143434'
         DC        X'34343434343434343434343434343434'
         DC        X'34343434343434343434343434343434'
         DC        X'34343434343434343434343434343434'
         DC        X'34343434343434343434343434343434'
         L         7,=A(EQTYP)
         B         STRMSTOP
         L         7,=A(RPTYP)
         B         STRMSTOP
         L         7,=A(RBTYP)
         B         STRMSTOP
         L         7,=A(CMATYP)
         B         STRMSTOP
         L         7,=A(CLNTYP)
         B         STRMSTOP
         L         7,=A(EOSTYP)
         B         STRMSTOP
         L         7,=A(NBTYP)
         B         STRMSHRT
         SPACE
         DS        0F
*        GOTFTB
*        FOR(LEFTPAREN) PUT(FGOTYP) STOP
*        FOR(LEFTBR) PUT(FTOTYP) STOP
*        ELSE ERROR
GOTFTB   EQU       *
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'1414141414141414141414140C041414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'141414141414141414141414140C1414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         L         7,=A(FGOTYP)
         B         STRMSTOP
         L         7,=A(FTOTYP)
         B         STRMSTOP
         BR        14
         SPACE
         DC        H'0'     PS
*        GOTOTB
*        FOR(SGOSYM) GOTO(GOTSTB)
*        FOR(FGOSYM) GOTO(GOTFTB)
*        FOR(LEFTPAREN) PUT(UGOTYP) STOP
*        FOR(LEFTBR) PUT(UTOTYP) STOP
*        ELSE ERROR
GOTOTB   EQU       *
         DC        X'24242424242424242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'2424242424242424242424241C142424'
         DC        X'24242424242424242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'2424242424240C242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'242404242424242424242424241C2424'
         DC        X'24242424242424242424242424242424'
         DC        X'2424242424240C242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'24240424242424242424242424242424'
         DC        X'24242424242424242424242424242424'
         SR        0,0
         SR        0,0
         L         3,=A(GOTSTB)
         SR        0,0
         SR        0,0
         L         3,=A(GOTFTB)
         L         7,=A(UGOTYP)
         B         STRMSTOP
         L         7,=A(UTOTYP)
         B         STRMSTOP
         BR        14
         SPACE
         DC        X'000D'      LKED GARBAGE
         DS        0F
*        GOTSTB
*        FOR(LEFTPAREN) PUT(SGOTYP) STOP
*        FOR(LEFTBR) PUT(STOTYP) STOP
*        ELSE ERROR
GOTSTB   EQU       *
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'1414141414141414141414140C041414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'141414141414141414141414140C1414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         L         7,=A(SGOTYP)
         B         STRMSTOP
         L         7,=A(STOTYP)
         B         STRMSTOP
         BR        14
         SPACE
         DC        X'40C5'      LKED GARBAGE
         DS        0F
*        IBLKTB
*        FOR(BLANK) GOTO(FRWDTB)
*        FOR(EOS) PUT(EOSTYP) STOP
*        ELSE ERROR
IBLKTB   EQU       *
         DC        X'14141414140414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'04141414141414141414141414141414'
         DC        X'14141414141414141414141414140C14'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         SR        0,0
         SR        0,0
         L         3,=A(FRWDTB)
         L         7,=A(EOSTYP)
         B         STRMSTOP
         BR        14
         SPACE
         DC        C'21'         LKED GARBAGE
         DS        0F
*        INTGTB
*        FOR(NUMBER) CONTIN
*        FOR(TERMINATOR) PUT(ILITYP) STOPSH
*        FOR(DOT) PUT(FLITYP) GOTO(FLITB)
*        ELSE ERROR
INTGTB   EQU       *
         DC        X'14141414140414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'04141414141414141414140C14141414'
         DC        X'14141414141414141414141414040414'
         DC        X'14141414141414141414140414140414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414041414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'00000000000000000000141414141414'
         L         7,=A(ILITYP)
         B         STRMSHRT
         L         7,=A(FLITYP)
         L         3,=A(FLITB)
         BR        14
         SPACE
         DC        X'C5D9'  LKED GARBAGE
         DS        0F
*        LBLTB
*        FOR(ALPHANUMERIC) GOTO(LBLXTB)
*        FOR(BLANK,EOS) STOPSH
*        ELSE ERROR
LBLTB    EQU       *
         DC        X'10101010100C10101010101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'0C101010101010101010101010101010'
         DC        X'10101010101010101010101010100C10'
         DC        X'10101010101010101010101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'10040404040404040404101010101010'
         DC        X'10040404040404040404101010101010'
         DC        X'10100404040404040404101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'10040404040404040404101010101010'
         DC        X'10040404040404040404101010101010'
         DC        X'10100404040404040404101010101010'
         DC        X'04040404040404040404101010101010'
         SR        0,0
         SR        0,0
         L         3,=A(LBLXTB)
         B         STRMSHRT
         BR        14
         SPACE
         DC        X'1A45'  LKED GARBAGE
         DS        0F
*        LBLXTB
*        FOR(BLANK,EOS) STOPSH
*        ELSE CONTIN
LBLXTB   EQU       *
         DC        X'00000000000400000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'04000000000000000000000000000000'
         DC        X'00000000000000000000000000000400'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         B         STRMSHRT
         SPACE
         DS        0F
*        NBLKTB
*        FOR(TERMINATOR) ERROR
*        ELSE STOPSH
NBLKTB   EQU       *
         DC        X'08080808080408080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'04080808080808080808080808080808'
         DC        X'08080808080808080808080808040408'
         DC        X'08080808080808080808080408080408'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808040808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         BR        14
         SR        0,0
         B         STRMSHRT
         SPACE
         DS        0F
*        NUMBTB
*        FOR(NUMBER) GOTO(NUMCTB)
*        FOR(PLUS,MINUS) GOTO(NUMCTB)
*        FOR(COMMA) PUT(CMATYP) STOPSH
*        FOR(COLON) PUT(DIMTYP) STOPSH
*        ELSE ERROR
NUMBTB   EQU       *
         DC        X'24242424242424242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'24242424242424242424242424240C24'
         DC        X'24242424242424242424242424242424'
         DC        X'0C242424242424242424241424242424'
         DC        X'242424242424242424241C2424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'24242424242424242424242424242424'
         DC        X'04040404040404040404242424242424'
         SR        0,0
         SR        0,0
         L         3,=A(NUMCTB)
         SR        0,0
         SR        0,0
         L         3,=A(NUMCTB)
         L         7,=A(CMATYP)
         B         STRMSHRT
         L         7,=A(DIMTYP)
         B         STRMSHRT
         BR        14
         SPACE
         DC        X'474E'       LKED GARBAGE
         DS        0F
*        NUMCTB
*        FOR(NUMBER) CONTIN
*        FOR(COMMA) PUT(CMATYP) STOPSH
*        FOR(COLON) PUT(DIMTYP) STOPSH
*        ELSE ERROR
NUMCTB   EQU       *
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414140414141414'
         DC        X'141414141414141414140C1414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'14141414141414141414141414141414'
         DC        X'00000000000000000000141414141414'
         L         7,=A(CMATYP)
         B         STRMSHRT
         L         7,=A(DIMTYP)
         B         STRMSHRT
         BR        14
         DC        X'3A20'
         SPACE
         DS        0F
*        SNABTB
*        FOR(FGOSYM) STOP
*        FOR(SGOSYM) STOPSH
*        ELSE ERROR
SNABTB   EQU       *
         DC        X'0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C'
         DC        X'0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C'
         DC        X'0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C'
         DC        X'0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C'
         DC        X'0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C'
         DC        X'0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C'
         DC        X'0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C'
         DC        X'0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C'
         DC        X'0C0C0C0C0C0C040C0C0C0C0C0C0C0C0C'
         DC        X'0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C'
         DC        X'0C0C080C0C0C0C0C0C0C0C0C0C0C0C0C'
         DC        X'0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C'
         DC        X'0C0C0C0C0C0C040C0C0C0C0C0C0C0C0C'
         DC        X'0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C'
         DC        X'0C0C080C0C0C0C0C0C0C0C0C0C0C0C0C'
         DC        X'0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C'
         B         STRMSTOP
         B         STRMSHRT
         BR        14
         SPACE
         DC        H'0'    PS
*        SQLITB
*        FOR(SQUOTE) STOP
*        ELSE CONTIN
SQLITB   EQU       *
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000040000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         DC        X'00000000000000000000000000000000'
         B         STRMSTOP
         SPACE
         DS        0F
*        STARTB
*        FOR(BLANK) STOP
*        FOR(STAR) PUT(EXPFN) GOTO(TBLKTB)
*        ELSE ERROR
STARTB   EQU       *
         DC        X'10101010100410101010101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'04101010101010101010101010101010'
         DC        X'10101010101010101010101008101010'
         DC        X'10101010101010101010101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'10101010101010101010101010101010'
         DC        X'10101010101010101010101010101010'
         B         STRMSTOP
         L         7,=A(EXPFN)
         L         3,=A(TBLKTB)
         BR        14
         DC        X'1A34'
         SPACE
         DS        0F
*        TBLKTB
*        FOR(BLANK) STOP
*        ELSE ERROR
TBLKTB   EQU       *
         DC        X'08080808080408080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'04080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         DC        X'08080808080808080808080808080808'
         B         STRMSTOP
         BR        14
         SPACE
         DC        X'18F4'          LKED GARBAGE
         DS        0F
*        UNOPTB
*        FOR(PLUS) PUT(PLSFN) GOTO(NBLKTB)
*        FOR(MINUS) PUT(MNSFN) GOTO(NBLKTB)
*        FOR(DOT) PUT(DOTFN) GOTO(NBLKTB)
*        FOR(DOLLAR) PUT(INDFN) GOTO(NBLKTB)
*        FOR(STAR) PUT(STRFN) GOTO(NBLKTB)
*        FOR(SLASH) PUT(SLHFN) GOTO(NBLKTB)
*        FOR(PERCENT) PUT(PRFN) GOTO(NBLKTB)
*        FOR(AT) PUT(ATFN) GOTO(NBLKTB)
*        FOR(POUND) PUT(PDFN) GOTO(NBLKTB)
*        FOR(KEYSYM) PUT(KEYFN) GOTO(NBLKTB)
*        FOR(NOTSYM) PUT(NEGFN) GOTO(NBLKTB)
*        FOR(ORSYM) PUT(BARFN) GOTO(NBLKTB)
*        FOR(QUESYM) PUT(QUESFN) GOTO(NBLKTB)
*        FOR(RAISE) PUT(AROWFN) GOTO(NBLKTB)
*        ELSE ERROR
UNOPTB   EQU       *
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         DC        X'7474747474747474747474147474045C'
         DC        X'4C7474747474747474746C1C24747454'
         DC        X'0C2C7474747474747474747434747464'
         DC        X'7474747474747474747474443C747474'
         DC        X'74747474747474747474747474747474'
         DC        X'7474747474747474747474747474746C'
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         DC        X'74747474747474747474747474747474'
         L         7,=A(PLSFN)
         L         3,=A(NBLKTB)
         L         7,=A(MNSFN)
         L         3,=A(NBLKTB)
         L         7,=A(DOTFN)
         L         3,=A(NBLKTB)
         L         7,=A(INDFN)
         L         3,=A(NBLKTB)
         L         7,=A(STRFN)
         L         3,=A(NBLKTB)
         L         7,=A(SLHFN)
         L         3,=A(NBLKTB)
         L         7,=A(PRFN)
         L         3,=A(NBLKTB)
         L         7,=A(ATFN)
         L         3,=A(NBLKTB)
         L         7,=A(PDFN)
         L         3,=A(NBLKTB)
         L         7,=A(KEYFN)
         L         3,=A(NBLKTB)
         L         7,=A(NEGFN)
         L         3,=A(NBLKTB)
         L         7,=A(BARFN)
         L         3,=A(NBLKTB)
         L         7,=A(QUESFN)
         L         3,=A(NBLKTB)
         L         7,=A(AROWFN)
         L         3,=A(NBLKTB)
         BR        14
         SPACE
         DC        H'0'   PS
*        VARATB
*        FOR(LETTER) GOTO(VARBTB)
*        FOR(COMMA) PUT(CMATYP) STOPSH
*        FOR(RIGHTPAREN) PUT(RPTYP) STOPSH
*        ELSE ERROR
VARATB   EQU       *
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C141C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C0C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C0404040404040404041C1C1C1C1C1C'
         DC        X'1C0404040404040404041C1C1C1C1C1C'
         DC        X'1C1C04040404040404041C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C0404040404040404041C1C1C1C1C1C'
         DC        X'1C0404040404040404041C1C1C1C1C1C'
         DC        X'1C1C04040404040404041C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         SR        0,0
         SR        0,0
         L         3,=A(VARBTB)
         L         7,=A(CMATYP)
         B         STRMSHRT
         L         7,=A(RPTYP)
         B         STRMSHRT
         BR        14
         SPACE
         DC        H'0'     PS
*        VARBTB
*        FOR(ALPHANUMERIC,BREAK) CONTIN
*        FOR(LEFTPAREN) PUT(LPTYP) STOPSH
*        FOR(COMMA) PUT(CMATYP) STOPSH
*        FOR(RIGHTPAREN) PUT(RPTYP) STOPSH
*        ELSE ERROR
VARBTB   EQU       *
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C001C041C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C141C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C0C1C001C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C0000000000000000001C1C1C1C1C1C'
         DC        X'1C0000000000000000001C1C1C1C1C1C'
         DC        X'1C1C00000000000000001C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C0000000000000000001C1C1C1C1C1C'
         DC        X'1C0000000000000000001C1C1C1C1C1C'
         DC        X'1C1C00000000000000001C1C1C1C1C1C'
         DC        X'000000000000000000001C1C1C1C1C1C'
         L         7,=A(LPTYP)
         B         STRMSHRT
         L         7,=A(CMATYP)
         B         STRMSHRT
         L         7,=A(RPTYP)
         B         STRMSHRT
         BR        14
         SPACE
         DC        H'0'
*        VARTB
*        FOR(ALPHANUMERIC,BREAK) CONTIN
*        FOR(TERMINATOR) PUT(VARTYP) STOPSH
*        FOR(LEFTPAREN) PUT(FNCTYP) STOP
*        FOR(LEFTBR) PUT(ARYTYP) STOP
*        ELSE ERROR
VARTB    EQU       *
         DC        X'1C1C1C1C1C041C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'041C1C1C1C1C1C1C1C1C1C00140C1C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C04041C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C041C00041C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C'
         DC        X'1C0000000000000000001C1C1C1C1C1C'
         DC        X'1C0000000000000000001C1C1C1C1C1C'
         DC        X'1C1C00000000000000001C1C1C141C1C'
         DC        X'1C1C1C1C1C1C1C1C1C1C1C1C1C041C1C'
         DC        X'1C0000000000000000001C1C1C1C1C1C'
         DC        X'1C0000000000000000001C1C1C1C1C1C'
         DC        X'1C1C00000000000000001C1C1C1C1C1C'
         DC        X'000000000000000000001C1C1C1C1C1C'
         L         7,=A(VARTYP)
         B         STRMSHRT
         L         7,=A(FNCTYP)
         B         STRMSTOP
         L         7,=A(ARYTYP)
         B         STRMSTOP
         BR        14
         TITLE     'STREAM'
         USING     STREAM,15
STREAM   LM        4,7,0(2)
         STM       1,2,STTEMP
         STM       4,7,0(1)            SET UP SP1 TO BE SAME AS SP2.
         LTR       4,4
         BZ        4(14)
         LA        1,0(5,6)            ADDRESS OF STRING.
         BCTR      1,0
         AR        4,1
         BCTR      4,0
         LR        7,0                 REGISTER FOR STYPE.
         B         STRMTEST            ENTER TRT LOOP
STRMLOOP LR        2,0                 ZERO 2 FOR TRT.
         C         5,=F'256'
         BL        STRMSMAL
         TRT       1(256,1),0(3)
         BNZ       STRMJOIN
         LA        1,256(1)            BYTES CONSUMED.
         B         STRMTEST
STRMSMAL EX        5,STRMTRT
         BZ        STRMOUT
STRMJOIN AR        2,3
         EX        0,256-4(2)          FIRST EXECUTE
         EX        0,256(2)            SECOND EXECUTE
*                                      RETURN HERE MEANS RETENTION OF
*                                      CONTROL, CONTINUE TRT
STRMTEST LR        5,4
         SR        5,1
         BNM       STRMLOOP
STRMOUT  L         1,=A(STYPE)
         ST        7,0(1)
         L         2,STTEMP+4
         ST        0,0(2)
         B         4(14)               RUN OUT
STRMSHRT BCTR      1,0
STRMSTOP SR        4,1                 N-I-|
         LA        4,1(4)              N-I
         LA        5,1(1)              I + 1 TH CHARACTER.
         SR        5,6                 OFFSET OF SP2.
         LM        2,3,STTEMP
         STM       4,5,0(3)            UPDATE SP2.
         L         3,0(2)              N
         SR        3,4                 N-(N-I) = I.
         ST        3,0(2)              SET LENGTH OF R1.
         L         1,=A(STYPE)
         ST        7,0(1)
         B         8(14)
STRMTRT  TRT       1(0,1),0(3)         TRANSLATE AND TEST.
STTEMP   DC        2F'0'
         LTORG
         TITLE     'ARITH# AND ADJSWTCH'
ARITH#   CSECT
         DC        F'0'
         LA        10,0            LKED GARBAGE
ADJSWTCH CSECT
         DC        F'0'
         BC        1,0              LKED GARBAGE
         END
